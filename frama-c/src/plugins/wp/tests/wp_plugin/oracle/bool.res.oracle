# frama-c -wp -wp-no-let [...]
[kernel] Parsing bool.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function band_bool with behavior false
------------------------------------------------------------

Goal Post-condition for 'false' (file bool.i, line 28) in 'band_bool':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_bool(band_bool_0) /\
      is_bool(retres_0).
  (* Pre-condition for 'false' *)
  Have: (a != 1) \/ (b != 1).
  Have: (if (land(a, b) = 0) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = band_bool_0.
}
Prove: band_bool_0 = 0.

------------------------------------------------------------
------------------------------------------------------------
  Function band_bool with behavior true
------------------------------------------------------------

Goal Post-condition for 'true' (file bool.i, line 25) in 'band_bool':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_bool(band_bool_0) /\
      is_bool(retres_0).
  (* Pre-condition for 'true' *)
  Have: (a = 1) /\ (b = 1).
  Have: (if (land(a, b) = 0) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = band_bool_0.
}
Prove: band_bool_0 = 1.

------------------------------------------------------------
------------------------------------------------------------
  Function bor_bool with behavior false
------------------------------------------------------------

Goal Post-condition for 'false' (file bool.i, line 18) in 'bor_bool':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_bool(bor_bool_0) /\ is_bool(retres_0).
  (* Pre-condition for 'false' *)
  Have: (a != 1) /\ (b != 1).
  Have: (if ((a = 0) & (b = 0)) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bor_bool_0.
}
Prove: bor_bool_0 = 0.

------------------------------------------------------------
------------------------------------------------------------
  Function bor_bool with behavior true
------------------------------------------------------------

Goal Post-condition for 'true' (file bool.i, line 15) in 'bor_bool':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_bool(bor_bool_0) /\ is_bool(retres_0).
  (* Pre-condition for 'true' *)
  Have: (a = 1) \/ (b = 1).
  Have: (if ((a = 0) & (b = 0)) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bor_bool_0.
}
Prove: bor_bool_0 = 1.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_bool with behavior false
------------------------------------------------------------

Goal Post-condition for 'false' (file bool.i, line 37) in 'bxor_bool':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_bool(bxor_bool_0) /\
      is_bool(retres_0).
  (* Pre-condition for 'false' *)
  Have: ((a != 0) \/ (b != 1)) /\ ((a != 1) \/ (b != 0)).
  Have: (if (b = a) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bxor_bool_0.
}
Prove: bxor_bool_0 = 0.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_bool with behavior true
------------------------------------------------------------

Goal Post-condition for 'true' (file bool.i, line 34) in 'bxor_bool':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_bool(bxor_bool_0) /\
      is_bool(retres_0).
  (* Pre-condition for 'true' *)
  Have: ((a = 0) /\ (b = 1)) \/ ((a = 1) /\ (b = 0)).
  Have: (if (b = a) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bxor_bool_0.
}
Prove: bxor_bool_0 = 1.

------------------------------------------------------------
------------------------------------------------------------
  Function job
------------------------------------------------------------

Goal Post-condition (file bool.i, line 10) in 'job':
Assume {
  Type: is_bool(a) /\ is_bool(b) /\ is_sint32(job_0) /\ is_sint32(retres_0).
  Have: (a + b) = retres_0.
  (* Return *)
  Have: retres_0 = job_0.
}
Prove: (0 <= job_0) /\ (job_0 <= 2).

------------------------------------------------------------
