# frama-c -wp [...]
[kernel] Parsing doomed_axioms.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Wp_smoke_dead_loop in 'foo' at loop (file doomed_axioms.i, line 29):
Assume {
  Type: is_sint32(n).
  (* Invariant 'A' *)
  Have: P_P(0).
  (* Invariant 'B' *)
  Have: P_Q(0).
  (* Invariant 'C' *)
  Have: P_R(0).
  (* Invariant 'A' *)
  Have: P_P(n).
  (* Invariant 'B' *)
  Have: P_Q(n).
  (* Invariant 'C' *)
  Have: P_R(n).
}
Prove: false.

------------------------------------------------------------

Goal Wp_smoke_dead_code in 'foo' at instruction (file doomed_axioms.i, line 30):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant 'A' *)
  Have: P_P(0).
  (* Invariant 'B' *)
  Have: P_Q(0).
  (* Invariant 'C' *)
  Have: P_R(0).
  (* Invariant 'A' *)
  Have: P_P(n).
  (* Invariant 'B' *)
  Have: P_Q(n).
  (* Invariant 'C' *)
  Have: P_R(n).
  (* Then *)
  Have: 0 < x.
}
Prove: false.

------------------------------------------------------------

Goal Wp_smoke_dead_code in 'foo' at return (file doomed_axioms.i, line 32):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant 'A' *)
  Have: P_P(0).
  (* Invariant 'B' *)
  Have: P_Q(0).
  (* Invariant 'C' *)
  Have: P_R(0).
  (* Invariant 'A' *)
  Have: P_P(n).
  (* Invariant 'B' *)
  Have: P_Q(n).
  (* Invariant 'C' *)
  Have: P_R(n).
  (* Else *)
  Have: x <= 0.
}
Prove: false.

------------------------------------------------------------

Goal Preservation of Invariant 'A' (file doomed_axioms.i, line 24):
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant 'A' *)
  Have: P_P(0).
  (* Invariant 'B' *)
  Have: P_Q(0).
  (* Invariant 'C' *)
  Have: P_R(0).
  (* Invariant 'A' *)
  Have: P_P(n).
  (* Invariant 'B' *)
  Have: P_Q(n).
  (* Invariant 'C' *)
  Have: P_R(n).
  (* Then *)
  Have: 0 < x.
}
Prove: P_P(x_1).

------------------------------------------------------------

Goal Establishment of Invariant 'A' (file doomed_axioms.i, line 24):
Prove: P_P(0).

------------------------------------------------------------

Goal Preservation of Invariant 'B' (file doomed_axioms.i, line 25):
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant 'A' *)
  Have: P_P(0).
  (* Invariant 'B' *)
  Have: P_Q(0).
  (* Invariant 'C' *)
  Have: P_R(0).
  (* Invariant 'A' *)
  Have: P_P(n).
  (* Invariant 'B' *)
  Have: P_Q(n).
  (* Invariant 'C' *)
  Have: P_R(n).
  (* Then *)
  Have: 0 < x.
  (* Invariant 'A' *)
  Have: P_P(x_1).
}
Prove: P_Q(x_1).

------------------------------------------------------------

Goal Establishment of Invariant 'B' (file doomed_axioms.i, line 25):
Assume { (* Invariant 'A' *) Have: P_P(0). }
Prove: P_Q(0).

------------------------------------------------------------

Goal Preservation of Invariant 'C' (file doomed_axioms.i, line 26):
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant 'A' *)
  Have: P_P(0).
  (* Invariant 'B' *)
  Have: P_Q(0).
  (* Invariant 'C' *)
  Have: P_R(0).
  (* Invariant 'A' *)
  Have: P_P(n).
  (* Invariant 'B' *)
  Have: P_Q(n).
  (* Invariant 'C' *)
  Have: P_R(n).
  (* Then *)
  Have: 0 < x.
  (* Invariant 'A' *)
  Have: P_P(x_1).
  (* Invariant 'B' *)
  Have: P_Q(x_1).
}
Prove: P_R(x_1).

------------------------------------------------------------

Goal Establishment of Invariant 'C' (file doomed_axioms.i, line 26):
Assume { (* Invariant 'A' *) Have: P_P(0). (* Invariant 'B' *) Have: P_Q(0).
}
Prove: P_R(0).

------------------------------------------------------------

Goal Loop assigns (file doomed_axioms.i, line 27):
Prove: true.

------------------------------------------------------------
