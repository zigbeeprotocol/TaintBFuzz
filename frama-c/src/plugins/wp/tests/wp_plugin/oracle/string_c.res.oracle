# frama-c -wp [...]
[kernel] Parsing string_c.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards

Goal Post-condition 'copied_contents' in 'memcpy':
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Assume {
  Type: is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Pre-condition 'separation' *)
  Have: separated(a, n, shift_sint8(src_0, 0), n).
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(src_0, i_1)] = a_1[shift_sint8(dest_0, i_1)]))).
  (* Else *)
  Have: n <= i.
}
Prove: L_memcmp(Mchar_0, havoc(Mchar_undef_0, Mchar_0, a, i), dest_0, src_0,
         i) = 0.

------------------------------------------------------------

Goal Post-condition 'result_ptr' in 'memcpy':
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 33):
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Assume {
  Type: is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Pre-condition 'separation' *)
  Have: separated(a, n, shift_sint8(src_0, 0), n).
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(src_0, i_1)] = a_1[shift_sint8(dest_0, i_1)]))).
  (* Then *)
  Have: i < n.
}
Prove: to_uint64(1 + i) <= n.

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 33):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 34):
Let x = to_uint64(1 + i).
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = a_1[shift_sint8(dest_0, i) <- a_1[shift_sint8(src_0, i)]].
Assume {
  Type: is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Pre-condition 'separation' *)
  Have: separated(a, n, shift_sint8(src_0, 0), n).
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_1[shift_sint8(src_0, i_2)] = a_1[shift_sint8(dest_0, i_2)]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
}
Prove: a_2[shift_sint8(src_0, i_1)] = a_2[shift_sint8(dest_0, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 34):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 35) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 35) (2/3):
Effect at line 38
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 35) (3/3):
Effect at line 39
Let x = to_uint64(1 + i).
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = shift_sint8(dest_0, i).
Let a_3 = a_1[a_2 <- a_1[shift_sint8(src_0, i)]].
Assume {
  Type: is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_2, 1).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Pre-condition 'separation' *)
  Have: separated(a, n, shift_sint8(src_0, 0), n).
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(src_0, i_1)] = a_1[shift_sint8(dest_0, i_1)]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) ->
      (a_3[shift_sint8(src_0, i_1)] = a_3[shift_sint8(dest_0, i_1)]))).
}
Prove: included(a_2, 1, a, n).

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 99) in 'memcpy':
Effect at line 38
Prove: true.

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file FRAMAC_SHARE/libc/string.c, line 38):
Let x = to_uint64(1 + i).
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = a_1[shift_sint8(dest_0, i) <- a_1[shift_sint8(src_0, i)]].
Assume {
  Type: is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Pre-condition 'separation' *)
  Have: separated(a, n, shift_sint8(src_0, 0), n).
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(src_0, i_1)] = a_1[shift_sint8(dest_0, i_1)]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) ->
      (a_2[shift_sint8(src_0, i_1)] = a_2[shift_sint8(dest_0, i_1)]))).
}
Prove: i < x.

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file FRAMAC_SHARE/libc/string.c, line 38):
Prove: true.

------------------------------------------------------------

Goal Post-condition 'copied_contents' in 'memmove':
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(i_1) /\
      is_uint64(i_2) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  If n = 0
  Then { Have: Mchar_1 = Mchar_0. }
  Else {
    Let a = shift_sint8(dest_0, 0).
    Let a_1 = shift_sint8(src_0, 0).
    (* Call 'memoverlap' *)
    Have: ((separated(a, n, a_1, n) -> (memoverlap_0 = 0))) /\
        ((addr_le(dest_0, src_0) ->
         (addr_lt(src_0, shift_sint8(dest_0, n)) ->
         ((!separated(a, n, a_1, n)) -> (memoverlap_0 = (-1)))))) /\
        ((addr_lt(src_0, dest_0) ->
         (addr_le(dest_0, shift_sint8(src_0, n)) ->
         ((!separated(a, n, a_1, n)) -> (memoverlap_0 = 1))))).
    If memoverlap_0 <= 0
    Then {
      Have: (ta_i_0=false).
      (* Invariant 'no_eva' *)
      Have: 0 <= n.
      (* Loop assigns ... *)
      Have: havoc(Mchar_undef_0, Mchar_0, a, n) = Mchar_1.
      (* Invariant 'no_eva' *)
      Have: (0 <= i) /\ (i <= n).
      (* Invariant 'no_eva' *)
      Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
          (Mchar_1[shift_sint8(dest_0, i_3)]
             = Mchar_0[shift_sint8(src_0, i_3)]))).
      (* Invariant 'no_eva' *)
      Have: forall i_3 : Z. let a_2 = shift_sint8(src_0, i_3) in
          ((i <= i_3) -> ((i_3 < n) -> (Mchar_1[a_2] = Mchar_0[a_2]))).
      (* Else *)
      Have: n <= i.
    }
    Else {
      (* Block In *)
      Have: (ta_i_1=false).
      (* Initializer *)
      Init: to_uint64(n - 1) = i_2.
      (* Invariant 'no_eva' *)
      Have: i_2 < n.
      (* Invariant 'no_eva' *)
      Have: forall i_3 : Z. ((i_2 < i_3) -> ((i_3 < n) ->
          (Mchar_0[shift_sint8(src_0, i_3)]
             = Mchar_0[shift_sint8(dest_0, i_3)]))).
      (* Loop assigns ... *)
      Have: havoc(Mchar_undef_1, Mchar_0, a, n) = Mchar_2.
      (* Invariant 'no_eva' *)
      Have: (0 <= i_1) /\ (i_1 < n).
      (* Invariant 'no_eva' *)
      Have: forall i_3 : Z. ((i_1 < i_3) -> ((i_3 < n) ->
          (Mchar_2[shift_sint8(dest_0, i_3)]
             = Mchar_0[shift_sint8(src_0, i_3)]))).
      (* Invariant 'no_eva' *)
      Have: forall i_3 : Z. let a_2 = shift_sint8(src_0, i_3) in
          ((i_3 <= i_1) -> ((0 <= i_3) -> (Mchar_2[a_2] = Mchar_0[a_2]))).
      (* Else *)
      Have: i_1 <= 0.
      Have: Mchar_2[a <- Mchar_2[a_1]] = Mchar_1.
    }
  }
}
Prove: L_memcmp(Mchar_0, Mchar_1, dest_0, src_0, n) = 0.

------------------------------------------------------------

Goal Post-condition 'result_ptr' in 'memmove':
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 95):
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = shift_sint8(src_0, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_2, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(dest_0, src_0) -> (addr_lt(src_0, shift_sint8(dest_0, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(src_0, dest_0) -> (addr_le(dest_0, shift_sint8(src_0, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = 1))))).
  (* Then *)
  Have: memoverlap_0 <= 0.
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(dest_0, i_1)] = Mchar_0[shift_sint8(src_0, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_3 = shift_sint8(src_0, i_1) in ((i <= i_1) ->
      ((i_1 < n) -> (a_1[a_3] = Mchar_0[a_3]))).
  (* Then *)
  Have: i < n.
}
Prove: to_uint64(1 + i) <= n.

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 95):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 96):
Let x = to_uint64(1 + i).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_2, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = 1))))).
  (* Then *)
  Have: memoverlap_0 <= 0.
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_1[shift_sint8(d, i_2)] = Mchar_0[shift_sint8(s, i_2)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. let a_3 = shift_sint8(s, i_2) in ((i <= i_2) ->
      ((i_2 < n) -> (a_1[a_3] = Mchar_0[a_3]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
}
Prove: a_1[shift_sint8(d, i) <- a_1[shift_sint8(s, i)]][shift_sint8(d, i_1)] =
    Mchar_0[shift_sint8(s, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 96):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 97):
Let x = to_uint64(1 + i).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = a_1[shift_sint8(d, i) <- a_1[shift_sint8(s, i)]].
Let a_3 = shift_sint8(s, 0).
Let a_4 = shift_sint8(s, i_1).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Goal *)
  When: (i_1 < n) /\ (x <= i_1).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_3, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = 1))))).
  (* Then *)
  Have: memoverlap_0 <= 0.
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_1[shift_sint8(d, i_2)] = Mchar_0[shift_sint8(s, i_2)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. let a_5 = shift_sint8(s, i_2) in ((i <= i_2) ->
      ((i_2 < n) -> (a_1[a_5] = Mchar_0[a_5]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x) ->
      (a_2[shift_sint8(d, i_2)] = Mchar_0[shift_sint8(s, i_2)]))).
}
Prove: a_2[a_4] = Mchar_0[a_4].

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 97):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 107):
Let a = shift_sint8(dest_0, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let x = to_uint64(n - 1).
Let a_2 = shift_sint8(src_0, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_2, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(dest_0, src_0) -> (addr_lt(src_0, shift_sint8(dest_0, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(src_0, dest_0) -> (addr_le(dest_0, shift_sint8(src_0, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
  (* Invariant 'no_eva' *)
  Have: x < n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x < i_1) ->
      (Mchar_0[shift_sint8(src_0, i_1)] = Mchar_0[shift_sint8(dest_0, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i < i_1) -> ((i_1 < n) ->
      (a_1[shift_sint8(dest_0, i_1)] = Mchar_0[shift_sint8(src_0, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_3 = shift_sint8(src_0, i_1) in ((i_1 <= i) ->
      ((0 <= i_1) -> (a_1[a_3] = Mchar_0[a_3]))).
  (* Then *)
  Have: 0 < i.
}
Prove: to_uint64(i - 1) < n.

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 107):
Let a = shift_sint8(d, 0).
Let a_1 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_1, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_1, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_1, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
}
Prove: to_uint64(n - 1) < n.

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 108):
Let x = to_uint64(i - 1).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let x_1 = to_uint64(n - 1).
Let a_2 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Goal *)
  When: (i_1 < n) /\ (x < i_1).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_2, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_2, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
  (* Invariant 'no_eva' *)
  Have: x_1 < n.
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 < i_2) ->
      (Mchar_0[shift_sint8(s, i_2)] = Mchar_0[shift_sint8(d, i_2)]))).
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((i < i_2) -> ((i_2 < n) ->
      (a_1[shift_sint8(d, i_2)] = Mchar_0[shift_sint8(s, i_2)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. let a_3 = shift_sint8(s, i_2) in ((i_2 <= i) ->
      ((0 <= i_2) -> (a_1[a_3] = Mchar_0[a_3]))).
  (* Then *)
  Have: 0 < i.
  (* Invariant 'no_eva' *)
  Have: x < n.
}
Prove: a_1[shift_sint8(d, i) <- a_1[shift_sint8(s, i)]][shift_sint8(d, i_1)] =
    Mchar_0[shift_sint8(s, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 108):
Let x = to_uint64(n - 1).
Let a = shift_sint8(dest_0, 0).
Let a_1 = shift_sint8(src_0, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(n).
  (* Heap *)
  Type: (region(dest_0.base) <= 0) /\ (region(src_0.base) <= 0) /\
      linked(Malloc_0) /\ sconst(Mchar_0).
  (* Goal *)
  When: (i < n) /\ (x < i).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, dest_0, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, src_0, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_1, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(dest_0, src_0) -> (addr_lt(src_0, shift_sint8(dest_0, n)) ->
       ((!separated(a, n, a_1, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(src_0, dest_0) -> (addr_le(dest_0, shift_sint8(src_0, n)) ->
       ((!separated(a, n, a_1, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
  (* Invariant 'no_eva' *)
  Have: x < n.
}
Prove: Mchar_0[shift_sint8(src_0, i)] = Mchar_0[shift_sint8(dest_0, i)].

------------------------------------------------------------

Goal Preservation of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 109):
Let x = to_uint64(i - 1).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = a_1[shift_sint8(d, i) <- a_1[shift_sint8(s, i)]].
Let x_1 = to_uint64(n - 1).
Let a_3 = shift_sint8(s, 0).
Let a_4 = shift_sint8(s, i_1).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_3, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
  (* Invariant 'no_eva' *)
  Have: x_1 < n.
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 < i_2) ->
      (Mchar_0[shift_sint8(s, i_2)] = Mchar_0[shift_sint8(d, i_2)]))).
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((i < i_2) -> ((i_2 < n) ->
      (a_1[shift_sint8(d, i_2)] = Mchar_0[shift_sint8(s, i_2)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. let a_5 = shift_sint8(s, i_2) in ((i_2 <= i) ->
      ((0 <= i_2) -> (a_1[a_5] = Mchar_0[a_5]))).
  (* Then *)
  Have: 0 < i.
  (* Invariant 'no_eva' *)
  Have: x < n.
  (* Invariant 'no_eva' *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x < i_2) ->
      (a_2[shift_sint8(d, i_2)] = Mchar_0[shift_sint8(s, i_2)]))).
}
Prove: a_2[a_4] = Mchar_0[a_4].

------------------------------------------------------------

Goal Establishment of Invariant 'no_eva' (file FRAMAC_SHARE/libc/string.c, line 109):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 98) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 98) (2/3):
Effect at line 101
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 98) (3/3):
Effect at line 102
Let x = to_uint64(1 + i).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = shift_sint8(d, i).
Let a_3 = a_1[a_2 <- a_1[shift_sint8(s, i)]].
Let a_4 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_2, 1).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_4, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_4, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_4, n)) -> (memoverlap_0 = 1))))).
  (* Then *)
  Have: memoverlap_0 <= 0.
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_5 = shift_sint8(s, i_1) in ((i <= i_1) ->
      ((i_1 < n) -> (a_1[a_5] = Mchar_0[a_5]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) ->
      (a_3[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_5 = shift_sint8(s, i_1) in ((i_1 < n) ->
      ((x <= i_1) -> (a_3[a_5] = Mchar_0[a_5]))).
}
Prove: included(a_2, 1, a, n).

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 110) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 110) (2/3):
Effect at line 113
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file FRAMAC_SHARE/libc/string.c, line 110) (3/3):
Effect at line 114
Let x = to_uint64(i - 1).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = shift_sint8(d, i).
Let a_3 = a_1[a_2 <- a_1[shift_sint8(s, i)]].
Let x_1 = to_uint64(n - 1).
Let a_4 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_2, 1).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_4, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_4, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_4, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
  (* Invariant 'no_eva' *)
  Have: x_1 < n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 < i_1) ->
      (Mchar_0[shift_sint8(s, i_1)] = Mchar_0[shift_sint8(d, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i < i_1) -> ((i_1 < n) ->
      (a_1[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_5 = shift_sint8(s, i_1) in ((i_1 <= i) ->
      ((0 <= i_1) -> (a_1[a_5] = Mchar_0[a_5]))).
  (* Then *)
  Have: 0 < i.
  (* Invariant 'no_eva' *)
  Have: x < n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x < i_1) ->
      (a_3[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_5 = shift_sint8(s, i_1) in ((0 <= i_1) ->
      ((i_1 <= x) -> (a_3[a_5] = Mchar_0[a_5]))).
}
Prove: included(a_2, 1, a, n).

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove':
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (1/7):
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (2/7):
Effect at line 90
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (3/7):
Call Result at line 93
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (4/7):
Effect at line 101
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (5/7):
Effect at line 113
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (6/7):
Effect at line 115
Prove: true.

------------------------------------------------------------

Goal Assigns (file FRAMAC_SHARE/libc/string.h, line 122) in 'memmove' (7/7):
Effect at line 117
Prove: true.

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file FRAMAC_SHARE/libc/string.c, line 101):
Let x = to_uint64(1 + i).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = a_1[shift_sint8(d, i) <- a_1[shift_sint8(s, i)]].
Let a_3 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_3, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = 1))))).
  (* Then *)
  Have: memoverlap_0 <= 0.
  (* Invariant 'no_eva' *)
  Have: 0 <= n.
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_4 = shift_sint8(s, i_1) in ((i <= i_1) ->
      ((i_1 < n) -> (a_1[a_4] = Mchar_0[a_4]))).
  (* Then *)
  Have: i < n.
  (* Invariant 'no_eva' *)
  Have: x <= n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) ->
      (a_2[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_4 = shift_sint8(s, i_1) in ((i_1 < n) ->
      ((x <= i_1) -> (a_2[a_4] = Mchar_0[a_4]))).
}
Prove: i < x.

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file FRAMAC_SHARE/libc/string.c, line 101):
Prove: true.

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file FRAMAC_SHARE/libc/string.c, line 113):
Let x = to_uint64(i - 1).
Let a = shift_sint8(d, 0).
Let a_1 = havoc(Mchar_undef_0, Mchar_0, a, n).
Let a_2 = a_1[shift_sint8(d, i) <- a_1[shift_sint8(s, i)]].
Let x_1 = to_uint64(n - 1).
Let a_3 = shift_sint8(s, 0).
Assume {
  Type: is_sint32(memoverlap_0) /\ is_uint64(i) /\ is_uint64(n).
  (* Heap *)
  Type: (region(d.base) <= 0) /\ (region(s.base) <= 0) /\ linked(Malloc_0) /\
      sconst(Mchar_0).
  (* Pre-condition 'valid_dest' *)
  Have: P_valid_or_empty(Malloc_0, d, n).
  (* Pre-condition 'valid_src' *)
  Have: P_valid_read_or_empty(Malloc_0, s, n).
  (* Else *)
  Have: n != 0.
  (* Call 'memoverlap' *)
  Have: ((separated(a, n, a_3, n) -> (memoverlap_0 = 0))) /\
      ((addr_le(d, s) -> (addr_lt(s, shift_sint8(d, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = (-1)))))) /\
      ((addr_lt(s, d) -> (addr_le(d, shift_sint8(s, n)) ->
       ((!separated(a, n, a_3, n)) -> (memoverlap_0 = 1))))).
  (* Else *)
  Have: 0 < memoverlap_0.
  (* Invariant 'no_eva' *)
  Have: x_1 < n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 < i_1) ->
      (Mchar_0[shift_sint8(s, i_1)] = Mchar_0[shift_sint8(d, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i < i_1) -> ((i_1 < n) ->
      (a_1[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_4 = shift_sint8(s, i_1) in ((i_1 <= i) ->
      ((0 <= i_1) -> (a_1[a_4] = Mchar_0[a_4]))).
  (* Then *)
  Have: 0 < i.
  (* Invariant 'no_eva' *)
  Have: x < n.
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x < i_1) ->
      (a_2[shift_sint8(d, i_1)] = Mchar_0[shift_sint8(s, i_1)]))).
  (* Invariant 'no_eva' *)
  Have: forall i_1 : Z. let a_4 = shift_sint8(s, i_1) in ((0 <= i_1) ->
      ((i_1 <= x) -> (a_2[a_4] = Mchar_0[a_4]))).
}
Prove: x < i.

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file FRAMAC_SHARE/libc/string.c, line 113):
Prove: true.

------------------------------------------------------------
