# frama-c -wp [...]
[kernel] Parsing copy.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function copy
------------------------------------------------------------

Goal Post-condition (file copy.i, line 5) in 'copy':
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let a_3 = havoc(Mint_undef_0, Mint_0, a_1, i).
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Invariant 'Range' *)
  Have: 0 <= n.
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_2[shift_sint32(b, i_2)] = a_2[shift_sint32(a, i_2)]))).
  (* Else *)
  Have: n <= i.
}
Prove: a_3[shift_sint32(b, i_1)] = a_3[shift_sint32(a, i_1)].

------------------------------------------------------------

Goal Preservation of Invariant 'Copy' (file copy.i, line 11):
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let a_3 = a_2[shift_sint32(a, i) <- a_2[shift_sint32(b, i)]].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Invariant 'Range' *)
  Have: 0 <= n.
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_2[shift_sint32(b, i_2)] = a_2[shift_sint32(a, i_2)]))).
  (* Then *)
  Have: i < n.
  (* Assertion 'A' *)
  Have: forall i_2 : Z. let a_4 = shift_sint32(a, i_2) in ((0 <= i_2) ->
      ((i_2 < i) -> (a_3[a_4] = a_2[a_4]))).
  (* Assertion 'B' *)
  Have: forall i_2 : Z. let a_4 = shift_sint32(b, i_2) in ((0 <= i_2) ->
      ((i_2 < i) -> (a_3[a_4] = a_2[a_4]))).
  (* Invariant 'Range' *)
  Have: (-1) <= i.
}
Prove: a_3[shift_sint32(b, i_1)] = a_3[shift_sint32(a, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant 'Copy' (file copy.i, line 11):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'Range' (file copy.i, line 10):
Prove: true.

------------------------------------------------------------

Goal Establishment of Invariant 'Range' (file copy.i, line 10):
Prove: true.

------------------------------------------------------------

Goal Assertion 'A' (file copy.i, line 17):
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let a_3 = shift_sint32(a, i_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i).
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Invariant 'Range' *)
  Have: 0 <= n.
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_2[shift_sint32(b, i_2)] = a_2[shift_sint32(a, i_2)]))).
  (* Then *)
  Have: i < n.
}
Prove: a_2[shift_sint32(a, i) <- a_2[shift_sint32(b, i)]][a_3] = a_2[a_3].

------------------------------------------------------------

Goal Assertion 'B' (file copy.i, line 18):
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let a_3 = a_2[shift_sint32(a, i) <- a_2[shift_sint32(b, i)]].
Let a_4 = shift_sint32(b, i_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i).
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Invariant 'Range' *)
  Have: 0 <= n.
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (a_2[shift_sint32(b, i_2)] = a_2[shift_sint32(a, i_2)]))).
  (* Then *)
  Have: i < n.
  (* Assertion 'A' *)
  Have: forall i_2 : Z. let a_5 = shift_sint32(a, i_2) in ((0 <= i_2) ->
      ((i_2 < i) -> (a_3[a_5] = a_2[a_5]))).
}
Prove: a_3[a_4] = a_2[a_4].

------------------------------------------------------------

Goal Loop assigns (file copy.i, line 12) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file copy.i, line 12) (2/3):
Effect at line 14
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file copy.i, line 12) (3/3):
Effect at line 16
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let x = i - 1.
Let a_3 = shift_sint32(a, x).
Let a_4 = a_2[a_3 <- a_2[shift_sint32(b, x)]].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_3, 1).
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Invariant 'Range' *)
  Have: 0 <= n.
  (* Invariant 'Range' *)
  Have: (0 < i) /\ (i <= (1 + n)).
  (* Invariant 'Copy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      (a_2[shift_sint32(b, i_1)] = a_2[shift_sint32(a, i_1)]))).
  (* Then *)
  Have: i <= n.
  (* Assertion 'A' *)
  Have: forall i_1 : Z. let a_5 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      (((2 + i_1) <= i) -> (a_4[a_5] = a_2[a_5]))).
  (* Assertion 'B' *)
  Have: forall i_1 : Z. let a_5 = shift_sint32(b, i_1) in ((0 <= i_1) ->
      (((2 + i_1) <= i) -> (a_4[a_5] = a_2[a_5]))).
  (* Invariant 'Copy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_4[shift_sint32(b, i_1)] = a_4[shift_sint32(a, i_1)]))).
}
Prove: included(a_3, 1, a_1, n).

------------------------------------------------------------

Goal Assigns (file copy.i, line 6) in 'copy':
Effect at line 14
Prove: true.

------------------------------------------------------------
