# frama-c -wp [...]
[kernel] Parsing alias_escapes_hypotheses.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function f1
------------------------------------------------------------

Goal Assigns nothing in 'f1' (1/2):
Effect at line 14
Prove: false.

------------------------------------------------------------

Goal Assigns nothing in 'f1' (2/2):
Effect at line 15
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f1 with behavior wp_typed
------------------------------------------------------------

Goal Post-condition for 'wp_typed' (file alias_escapes_hypotheses.i, line 13) in 'f1':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f2
------------------------------------------------------------

Goal Assigns nothing in 'f2':
Effect at line 20
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f3
------------------------------------------------------------

Goal Assigns nothing in 'f3':
Effect at line 25
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f3 with behavior wp_typed
------------------------------------------------------------

Goal Post-condition for 'wp_typed' (file alias_escapes_hypotheses.i, line 24) in 'f3':
Prove: false.

------------------------------------------------------------
------------------------------------------------------------
  Function fp1
------------------------------------------------------------

Goal Assigns (file alias_escapes_hypotheses.i, line 28) in 'fp1' (1/2):
Effect at line 30
Prove: false.

------------------------------------------------------------

Goal Assigns (file alias_escapes_hypotheses.i, line 28) in 'fp1' (2/2):
Effect at line 31
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function fp1 with behavior wp_typed
------------------------------------------------------------

Goal Post-condition for 'wp_typed' (file alias_escapes_hypotheses.i, line 29) in 'fp1':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function fp2
------------------------------------------------------------

Goal Assigns (file alias_escapes_hypotheses.i, line 34) in 'fp2':
Effect at line 36
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function fp3
------------------------------------------------------------

Goal Assigns (file alias_escapes_hypotheses.i, line 39) in 'fp3':
Effect at line 41
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function fp3 with behavior wp_typed
------------------------------------------------------------

Goal Post-condition for 'wp_typed' (file alias_escapes_hypotheses.i, line 40) in 'fp3':
Assume { (* Heap *) Type: region(p.base) <= 0. }
Prove: global(P_x_46) != p.

------------------------------------------------------------
/* Generated by Frama-C */
int a;
/*@ assigns \result;
    assigns \result \from \nothing;
    
    behavior wp_typed:
      ensures \separated(\result, &a);
 */
int *f1(void)
{
  int *__retres;
  a = 42;
  __retres = (int *)0;
  return __retres;
}

/*@ assigns \result;
    assigns \result \from &a; */
int *f2(void)
{
  int *__retres;
  __retres = & a;
  return __retres;
}

/*@ assigns \result;
    assigns \result \from \nothing;
    
    behavior wp_typed:
      ensures \separated(\result, &x);
 */
int *f3(int x)
{
  int *__retres;
  __retres = & x;
  return __retres;
}

/*@ assigns *p;
    assigns *p \from \nothing;
    
    behavior wp_typed:
      requires \separated(p, &a);
      ensures \separated(p, &a);
 */
void fp1(int **p)
{
  a = 42;
  *p = (int *)0;
  return;
}

/*@ assigns *p;
    assigns *p \from &a; */
void fp2(int **p)
{
  *p = & a;
  return;
}

/*@ assigns *p;
    assigns *p \from \nothing;
    
    behavior wp_typed:
      ensures \separated(p, &x);
 */
void fp3(int **p, int x)
{
  *p = & x;
  return;
}


