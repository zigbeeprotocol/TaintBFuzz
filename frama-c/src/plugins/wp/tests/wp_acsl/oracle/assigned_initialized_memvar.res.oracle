# frama-c -wp [...]
[kernel] Parsing assigned_initialized_memvar.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function array
------------------------------------------------------------

Goal Check 'FAILS' (file assigned_initialized_memvar.i, line 76):
Assume {
  Have: 0 <= i.
  Have: i <= 9.
  Type: is_sint32(i_1) /\ is_sint32(i_2).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 10) /\
      (((0 < i_1) ->
       (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (v_1[i_3]=true)))))).
  (* Else *)
  Have: 10 <= i_1.
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= 10).
  (* Else *)
  Have: 10 <= i_2.
}
Prove: (v[i]=true).

------------------------------------------------------------

Goal Loop assigns 'CHECK':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function comp
------------------------------------------------------------

Goal Check 'FAILS' (file assigned_initialized_memvar.i, line 131):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 10) /\
      (((0 < i) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 10).
  (* Else *)
  Have: 10 <= i_1.
}
Prove: ((Init_s_0.Init_F1_S_i)=true) /\
    (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
     ((Init_s_0.Init_F1_S_a)[i_2]=true)))).

------------------------------------------------------------

Goal Loop assigns 'CHECK':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function descr
------------------------------------------------------------

Goal Preservation of Invariant 'CHECK' (file assigned_initialized_memvar.i, line 105):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 10) /\
      (((0 < i) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i.
  (* Invariant 'CHECK' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) -> (v[i_2]=true))).
  (* Loop assigns 'CHECK' *)
  Have: ((s.F1_S_i) = 0) /\
      (forall i_2 : Z. ((i_2 != 0) -> ((i_2 != 2) -> ((i_2 != 4) ->
       ((0 <= i_2) -> ((i_2 <= 9) -> ((s.F1_S_a)[i_2] = v_1[i_2]))))))).
  (* Invariant 'CHECK' *)
  Have: ((Init_s_1.Init_F1_S_i)=true) /\
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
       ((Init_s_1.Init_F1_S_a)[i_2]=true)))).
  (* Then *)
  Have: i_1 <= 9.
  If i_1 = 0
  Then {
    Have: Init_s_1 = Init_s_2.
    Have: ({ Init_s_2 with Init_F1_S_a = (Init_s_2.Init_F1_S_a)[0 <- true] }) =
        Init_s_0.
  }
  Else {
    Have: (Init_s_1 = Init_s_3) /\ (s = s_1).
    If i_1 = 2
    Then {
      Have: (Init_s_3 = Init_s_4) /\ (s_1 = s_2).
      Have: ({ Init_s_4 with Init_F1_S_a = (Init_s_4.Init_F1_S_a)[2 <- true]
               }) = Init_s_0.
    }
    Else {
      Have: (Init_s_3 = Init_s_5) /\ (s_1 = s_3).
      If i_1 = 4
      Then {
        Have: Init_s_5 = Init_s_6.
        Have: ({ Init_s_6 with
                 Init_F1_S_a = (Init_s_6.Init_F1_S_a)[4 <- true] }) =
            Init_s_0.
      }
      Else { Have: Init_s_5 = Init_s_0. }
    }
  }
}
Prove: ((Init_s_0.Init_F1_S_i)=true) /\
    (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
     ((Init_s_0.Init_F1_S_a)[i_2]=true)))).

------------------------------------------------------------

Goal Establishment of Invariant 'CHECK' (file assigned_initialized_memvar.i, line 105):
Assume {
  Have: 0 <= i.
  Have: i <= 9.
  Type: is_sint32(i_1).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 10) /\
      (((0 < i_1) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i_1.
}
Prove: (v[i]=true).

------------------------------------------------------------

Goal Check 'CHECK' (file assigned_initialized_memvar.i, line 111):
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (1/5):
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (2/5):
Effect at line 108
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3).
  (* Goal *)
  When: (0 <= i_4) /\ (i_4 <= 9) /\ ((i_4 = 0) \/ (i_4 = 2) \/ (i_4 = 4)) /\
      ((i_1 = 0) \/ (i_1 = 2) \/ (i_1 = 4)).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= 10) /\
      (((0 < i_2) ->
       (forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> (v[i_5]=true)))))).
  (* Else *)
  Have: 10 <= i_2.
  (* Invariant 'CHECK' *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= 9) -> (v[i_5]=true))).
  (* Loop assigns 'CHECK' *)
  Have: ((s.F1_S_i) = 0) /\
      (forall i_5 : Z. ((i_5 != 0) -> ((i_5 != 2) -> ((i_5 != 4) ->
       ((0 <= i_5) -> ((i_5 <= 9) -> ((s.F1_S_a)[i_5] = v_1[i_5]))))))).
  (* Then *)
  Have: i_3 <= 9.
  If i_3 = 0
  Else {
    Have: s = s_1.
    If i_3 = 2
    Then { Have: s_1 = s_2. }
    Else { Have: s_1 = s_3. }
  }
}
Prove: ((i != 0) /\ (i != 2) /\ (i != 4)) \/
    (exists i_5 : Z. (i_5 <= i_1) /\ (i_1 <= i_5) /\
     ((i_5 = 0) \/ (i_5 = 2) \/ (i_5 = 4))).

------------------------------------------------------------

Goal Loop assigns 'CHECK' (3/5):
Effect at line 109
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (4/5):
Effect at line 109
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (5/5):
Effect at line 109
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function field
------------------------------------------------------------

Goal Check 'FAILS' (file assigned_initialized_memvar.i, line 57):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 10) /\
      (((0 < i) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i.
  (* Else *)
  Have: 10 <= i_1.
}
Prove: ((Init_s_0.Init_F1_S_i)=true) /\
    (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
     ((Init_s_0.Init_F1_S_a)[i_2]=true)))).

------------------------------------------------------------

Goal Loop assigns 'CHECK':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function index
------------------------------------------------------------

Goal Check 'FAILS' (file assigned_initialized_memvar.i, line 92):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 10) /\
      (((0 < i) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i.
  (* Else *)
  Have: 10 <= i_1.
}
Prove: ((Init_s_0.Init_F1_S_i)=true) /\
    (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
     ((Init_s_0.Init_F1_S_a)[i_2]=true)))).

------------------------------------------------------------

Goal Loop assigns 'CHECK' (1/2):
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (2/2):
Effect at line 90
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function initialize
------------------------------------------------------------

Goal Preservation of Invariant 'CHECK' (file assigned_initialized_memvar.i, line 17):
Assume {
  Type: is_sint32(i) /\ is_sint32(1 + i).
  (* Invariant 'CHECK' *)
  Have: (0 <= i) /\ (i <= 10) /\
      (((0 < i) ->
       (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (v[i_1]=true)))))).
  (* Then *)
  Have: i <= 9.
}
Prove: ((-1) <= i) /\
    (forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
     (v[i <- true][i_1]=true)))).

------------------------------------------------------------

Goal Establishment of Invariant 'CHECK' (file assigned_initialized_memvar.i, line 17):
Prove: true.

------------------------------------------------------------

Goal Check 'CHECK' (file assigned_initialized_memvar.i, line 22):
Assume {
  Have: 0 <= i.
  Have: i <= 9.
  Type: is_sint32(i_1).
  (* Invariant 'CHECK' *)
  Have: (0 <= i_1) /\ (i_1 <= 10) /\
      (((0 < i_1) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i_1.
}
Prove: (v[i]=true).

------------------------------------------------------------

Goal Loop assigns 'CHECK':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function range
------------------------------------------------------------

Goal Preservation of Invariant 'CHECK' (file assigned_initialized_memvar.i, line 35):
Let a = Init_s_0.Init_F1_S_a.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i).
  (* Residual *)
  When: i <= 4.
  (* Residual *)
  When: 0 < i.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 10) /\
      (((0 < i_1) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i_1.
  (* Invariant 'CHECK' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) -> (v[i_2]=true))).
  (* Loop assigns 'CHECK' *)
  Have: ((s.F1_S_i) = 0) /\
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
       (((i_2 <= 0) \/ (5 <= i_2)) -> ((s.F1_S_a)[i_2] = v_1[i_2]))))).
  (* Invariant 'CHECK' *)
  Have: ((Init_s_0.Init_F1_S_i)=true) /\
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) -> (a[i_2]=true)))).
  (* Then *)
  Have: i <= 9.
}
Prove: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 9) ->
    (a[i <- true][i_2]=true))).

------------------------------------------------------------

Goal Establishment of Invariant 'CHECK' (file assigned_initialized_memvar.i, line 35):
Assume {
  Have: 0 <= i.
  Have: i <= 9.
  Type: is_sint32(i_1).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 10) /\
      (((0 < i_1) ->
       (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (v[i_2]=true)))))).
  (* Else *)
  Have: 10 <= i_1.
}
Prove: (v[i]=true).

------------------------------------------------------------

Goal Check 'CHECK' (file assigned_initialized_memvar.i, line 41):
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (1/2):
Prove: true.

------------------------------------------------------------

Goal Loop assigns 'CHECK' (2/2):
Effect at line 39
Prove: true.

------------------------------------------------------------
