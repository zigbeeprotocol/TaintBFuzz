# frama-c -wp -wp-model 'Typed (Ref)' [...]
[kernel] Parsing funvar_inv.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition 'P_startof' in 'f':
Let a = global(G_G_20).
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(v) /\ is_sint32(Mint_0[shift_sint32(a, 1)]).
  (* Goal *)
  When: Mint_0[a_1] = 0.
  (* Initializer *)
  Init: Mint_0[global(L_i_27)] = 0.
  If v <= 3
  Then { (* Else *) Have: Mint_0[shift_sint32(a, v)] = 0. }
  If 4 <= v
  Then { Have: global(L_i_27) = f. }
  Else { Have: shift_sint32(a, v) = f. }
}
Prove: a_1 = f.

------------------------------------------------------------

Goal Post-condition 'P_addr' in 'f':
Let a = global(G_G_20).
Let x = Mint_0[shift_sint32(a, 0)].
Let a_1 = shift_sint32(a, 1).
Assume {
  Type: is_sint32(v) /\ is_sint32(x).
  (* Goal *)
  When: (x != 0) /\ (Mint_0[a_1] = 0).
  (* Initializer *)
  Init: Mint_0[global(L_i_27)] = 0.
  If v <= 3
  Then { (* Else *) Have: Mint_0[shift_sint32(a, v)] = 0. }
  If 4 <= v
  Then { Have: global(L_i_27) = f. }
  Else { Have: shift_sint32(a, v) = f. }
}
Prove: a_1 = f.

------------------------------------------------------------

Goal Loop assigns 'qed_ok,index':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f2
------------------------------------------------------------

Goal Post-condition 'P_startof_shift' in 'f2':
Let a = global(G_G_20).
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(v) /\ is_sint32(Mint_0[shift_sint32(a, 1)]).
  (* Goal *)
  When: Mint_0[a_1] = 0.
  (* Initializer *)
  Init: Mint_0[global(L_i_32)] = 0.
  If v <= 3
  Then { (* Else *) Have: Mint_0[shift_sint32(a, v)] = 0. }
  If 4 <= v
  Then { Have: global(L_i_32) = f2_0. }
  Else { Have: shift_sint32(a, v) = f2_0. }
}
Prove: a_1 = f2_0.

------------------------------------------------------------

Goal Post-condition 'P_addr_shift' in 'f2':
Let a = global(G_G_20).
Let x = Mint_0[shift_sint32(a, 0)].
Let a_1 = shift_sint32(a, 1).
Assume {
  Type: is_sint32(v) /\ is_sint32(x).
  (* Goal *)
  When: (x != 0) /\ (Mint_0[a_1] = 0).
  (* Initializer *)
  Init: Mint_0[global(L_i_32)] = 0.
  If v <= 3
  Then { (* Else *) Have: Mint_0[shift_sint32(a, v)] = 0. }
  If 4 <= v
  Then { Have: global(L_i_32) = f2_0. }
  Else { Have: shift_sint32(a, v) = f2_0. }
}
Prove: a_1 = f2_0.

------------------------------------------------------------

Goal Loop assigns 'qed_ok,index':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function g
------------------------------------------------------------

Goal Post-condition 'P_addr_startof_shift' in 'g':
Let a = global(G_G_20).
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(v) /\ is_sint32(Mint_0[shift_sint32(a, 1)]).
  (* Goal *)
  When: Mint_0[a_1] = 0.
  (* Initializer *)
  Init: Mint_0[global(L_i_37)] = 0.
  If v <= 3
  Then { (* Else *) Have: Mint_0[shift_sint32(a, v)] = 0. }
  If 4 <= v
  Then { Have: global(L_i_37) = g. }
  Else { Have: shift_sint32(a, v) = g. }
}
Prove: a_1 = g.

------------------------------------------------------------

Goal Post-condition 'P_addr_addr_shift' in 'g':
Let a = global(G_G_20).
Let x = Mint_0[shift_sint32(a, 0)].
Let a_1 = shift_sint32(a, 1).
Assume {
  Type: is_sint32(v) /\ is_sint32(x).
  (* Goal *)
  When: (x != 0) /\ (Mint_0[a_1] = 0).
  (* Initializer *)
  Init: Mint_0[global(L_i_37)] = 0.
  If v <= 3
  Then { (* Else *) Have: Mint_0[shift_sint32(a, v)] = 0. }
  If 4 <= v
  Then { Have: global(L_i_37) = g. }
  Else { Have: shift_sint32(a, v) = g. }
}
Prove: a_1 = g.

------------------------------------------------------------

Goal Loop assigns 'qed_ok':
Prove: true.

------------------------------------------------------------
