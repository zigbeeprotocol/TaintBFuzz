# frama-c -wp [...]
[kernel] Parsing float_const.i (no preprocessing)
[kernel:parser:decimal-float] float_const.i:10: Warning: 
  Floating-point constant 0.1f is not represented exactly. Will use 0x1.99999a0000000p-4.
[kernel:parser:decimal-float] float_const.i:19: Warning: 
  Floating-point constant 0.1 is not represented exactly. Will use 0x1.999999999999ap-4.
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp:print-generated] 
  theory WP
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool *)
    
    (* use int.Int *)
    
    (* use int.ComputerDivision *)
    
    (* use real.RealInfix *)
    
    (* use frama_c_wp.qed.Qed *)
    
    (* use map.Map *)
    
    (* use real.Abs *)
    
    (* use frama_c_wp.cmath.Cmath *)
    
    (* use real.Square *)
    
    (* use frama_c_wp.cmath.Square1 *)
    
    (* use frama_c_wp.cfloat.Cfloat *)
    
    goal wp_goal :
      forall f:t.
       let r = of_f32 f in
       eq_f32 f (0x1.99999Ap-4:t) -> of_f32 (to_f32 (of_f64 (to_f64 r))) = r
  end
[wp:print-generated] 
  theory WP1
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool *)
    
    (* use int.Int *)
    
    (* use int.ComputerDivision *)
    
    (* use real.RealInfix *)
    
    (* use frama_c_wp.qed.Qed *)
    
    (* use map.Map *)
    
    (* use real.Abs *)
    
    (* use frama_c_wp.cmath.Cmath *)
    
    (* use real.Square *)
    
    (* use frama_c_wp.cmath.Square1 *)
    
    (* use frama_c_wp.cfloat.Cfloat *)
    
    goal wp_goal :
      forall f:t.
       eq_f32 f (0x1.99999Ap-4:t) ->
       not of_f32 f = (3602879701896397.0 / 36028797018963968.0)
  end
[wp:print-generated] 
  theory WP2
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool *)
    
    (* use int.Int *)
    
    (* use int.ComputerDivision *)
    
    (* use real.RealInfix *)
    
    (* use frama_c_wp.qed.Qed *)
    
    (* use map.Map *)
    
    (* use real.Abs *)
    
    (* use frama_c_wp.cmath.Cmath *)
    
    (* use real.Square *)
    
    (* use frama_c_wp.cmath.Square1 *)
    
    (* use frama_c_wp.cfloat.Cfloat *)
    
    goal wp_goal :
      forall f:t.
       eq_f32 f (0x1.99999Ap-4:t) -> of_f32 f = (13421773.0 / 134217728.0)
  end
[wp:print-generated] 
  theory WP3
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool *)
    
    (* use int.Int *)
    
    (* use int.ComputerDivision *)
    
    (* use real.RealInfix *)
    
    (* use frama_c_wp.qed.Qed *)
    
    (* use map.Map *)
    
    (* use real.Abs *)
    
    (* use frama_c_wp.cmath.Cmath *)
    
    (* use real.Square *)
    
    (* use frama_c_wp.cmath.Square1 *)
    
    (* use frama_c_wp.cfloat.Cfloat *)
    
    goal wp_goal :
      forall f:t. eq_f32 f (0x1.99999Ap-4:t) -> not of_f32 f = (1.0 / 10.0)
  end
[wp:print-generated] 
  theory WP4
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool1 *)
    
    (* use int.Int1 *)
    
    (* use int.ComputerDivision1 *)
    
    (* use real.RealInfix1 *)
    
    (* use frama_c_wp.qed.Qed1 *)
    
    (* use map.Map1 *)
    
    (* use real.Abs1 *)
    
    (* use frama_c_wp.cmath.Cmath1 *)
    
    (* use real.Square2 *)
    
    (* use frama_c_wp.cmath.Square3 *)
    
    (* use frama_c_wp.cfloat.Cfloat1 *)
    
    goal wp_goal :
      forall f:t1.
       let r = of_f321 (to_f321 (of_f641 f)) in
       eq_f64 f (0x1.999999999999Ap-4:t1) -> of_f641 (to_f641 r) = r
  end
[wp:print-generated] 
  theory WP5
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool1 *)
    
    (* use int.Int1 *)
    
    (* use int.ComputerDivision1 *)
    
    (* use real.RealInfix1 *)
    
    (* use frama_c_wp.qed.Qed1 *)
    
    (* use map.Map1 *)
    
    (* use real.Abs1 *)
    
    (* use frama_c_wp.cmath.Cmath1 *)
    
    (* use real.Square2 *)
    
    (* use frama_c_wp.cmath.Square3 *)
    
    (* use frama_c_wp.cfloat.Cfloat1 *)
    
    goal wp_goal :
      forall f:t1.
       eq_f64 f (0x1.999999999999Ap-4:t1) ->
       not of_f641 f = (13421773.0 /' 134217728.0)
  end
[wp:print-generated] 
  theory WP6
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool1 *)
    
    (* use int.Int1 *)
    
    (* use int.ComputerDivision1 *)
    
    (* use real.RealInfix1 *)
    
    (* use frama_c_wp.qed.Qed1 *)
    
    (* use map.Map1 *)
    
    (* use real.Abs1 *)
    
    (* use frama_c_wp.cmath.Cmath1 *)
    
    (* use real.Square2 *)
    
    (* use frama_c_wp.cmath.Square3 *)
    
    (* use frama_c_wp.cfloat.Cfloat1 *)
    
    goal wp_goal :
      forall f:t1.
       eq_f64 f (0x1.999999999999Ap-4:t1) ->
       of_f641 f = (3602879701896397.0 /' 36028797018963968.0)
  end
[wp:print-generated] 
  theory WP7
    (* use why3.BuiltIn.BuiltIn *)
    
    (* use bool.Bool1 *)
    
    (* use int.Int1 *)
    
    (* use int.ComputerDivision1 *)
    
    (* use real.RealInfix1 *)
    
    (* use frama_c_wp.qed.Qed1 *)
    
    (* use map.Map1 *)
    
    (* use real.Abs1 *)
    
    (* use frama_c_wp.cmath.Cmath1 *)
    
    (* use real.Square2 *)
    
    (* use frama_c_wp.cmath.Square3 *)
    
    (* use frama_c_wp.cfloat.Cfloat1 *)
    
    goal wp_goal :
      forall f:t1.
       eq_f64 f (0x1.999999999999Ap-4:t1) -> not of_f641 f = (1.0 /' 10.0)
  end
[wp] 8 goals generated
------------------------------------------------------------
  Function double_convertible
------------------------------------------------------------

Goal Check (file float_const.i, line 20):
Assume {
  (* Then *)
  Have: eq_f64(d, to_f64((3602879701896397.0/36028797018963968))).
}
Prove: of_f64(d) != (1.0/10).

------------------------------------------------------------

Goal Check (file float_const.i, line 21):
Assume {
  (* Then *)
  Have: eq_f64(d, to_f64((3602879701896397.0/36028797018963968))).
}
Prove: of_f64(d) = (3602879701896397.0/36028797018963968).

------------------------------------------------------------

Goal Check (file float_const.i, line 22):
Assume {
  (* Then *)
  Have: eq_f64(d, to_f64((3602879701896397.0/36028797018963968))).
}
Prove: of_f64(d) != (13421773.0/134217728).

------------------------------------------------------------

Goal Check (file float_const.i, line 23):
Let r = of_f32(to_f32(of_f64(d))).
Assume {
  (* Then *)
  Have: eq_f64(d, to_f64((3602879701896397.0/36028797018963968))).
}
Prove: of_f64(to_f64(r)) = r.

------------------------------------------------------------
------------------------------------------------------------
  Function float_convertible
------------------------------------------------------------

Goal Check (file float_const.i, line 11):
Assume { (* Then *) Have: eq_f32(f, to_f32((13421773.0/134217728))). }
Prove: of_f32(f) != (1.0/10).

------------------------------------------------------------

Goal Check (file float_const.i, line 12):
Assume { (* Then *) Have: eq_f32(f, to_f32((13421773.0/134217728))). }
Prove: of_f32(f) = (13421773.0/134217728).

------------------------------------------------------------

Goal Check (file float_const.i, line 13):
Assume { (* Then *) Have: eq_f32(f, to_f32((13421773.0/134217728))). }
Prove: of_f32(f) != (3602879701896397.0/36028797018963968).

------------------------------------------------------------

Goal Check (file float_const.i, line 14):
Let r = of_f32(f).
Assume { (* Then *) Have: eq_f32(f, to_f32((13421773.0/134217728))). }
Prove: of_f32(to_f32(of_f64(to_f64(r)))) = r.

------------------------------------------------------------
