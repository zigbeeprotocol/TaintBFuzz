# frama-c -wp [...]
[kernel] Parsing looplabels.i (no preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function copy
------------------------------------------------------------

Goal Post-condition (file looplabels.i, line 13) in 'copy':
Let a_1 = shift_sint32(b, 0).
Let a_2 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_2, n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Pre-condition *)
  Have: separated(a_2, n, a_1, n).
  (* Invariant *)
  Have: P_IsEqual(Mint_0, a, b, 0).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: P_IsEqual(havoc(Mint_undef_0, Mint_0, a_1, n), a, b, i).
  (* Else *)
  Have: n <= i.
}
Prove: P_IsEqual(havoc(Mint_undef_0, Mint_0, a_1, i), a, b, i).

------------------------------------------------------------

Goal Preservation of Invariant (file looplabels.i, line 18):
Prove: true.

------------------------------------------------------------

Goal Establishment of Invariant (file looplabels.i, line 18):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant (file looplabels.i, line 19):
Let a_1 = shift_sint32(b, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let a_3 = shift_sint32(a, 0).
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_3, n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Pre-condition *)
  Have: separated(a_3, n, a_1, n).
  (* Invariant *)
  Have: P_IsEqual(Mint_0, a, b, 0).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: P_IsEqual(a_2, a, b, i).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: P_IsEqual(a_2[shift_sint32(b, i) <- a_2[shift_sint32(a, i)]], a, b, x).

------------------------------------------------------------

Goal Establishment of Invariant (file looplabels.i, line 19):
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(b, 0).
Assume {
  Type: is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_2, n).
  (* Pre-condition *)
  Have: separated(a_1, n, a_2, n).
}
Prove: P_IsEqual(Mint_0, a, b, 0).

------------------------------------------------------------

Goal Loop assigns (file looplabels.i, line 20) (1/2):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file looplabels.i, line 20) (2/2):
Effect at line 23
Let a_1 = shift_sint32(b, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let x = i - 1.
Let a_3 = shift_sint32(b, x).
Let a_4 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_3, 1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_4, n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Pre-condition *)
  Have: separated(a_4, n, a_1, n).
  (* Invariant *)
  Have: P_IsEqual(Mint_0, a, b, 0).
  (* Invariant *)
  Have: (0 < i) /\ (i <= (1 + n)).
  (* Invariant *)
  Have: P_IsEqual(a_2, a, b, x).
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: P_IsEqual(a_2[a_3 <- a_2[shift_sint32(a, x)]], a, b, i).
}
Prove: included(a_3, 1, a_1, n).

------------------------------------------------------------

Goal Assigns (file looplabels.i, line 14) in 'copy':
Effect at line 22
Prove: true.

------------------------------------------------------------
