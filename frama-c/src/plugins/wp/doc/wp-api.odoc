This is the documentation index for Frama-C/WP plug-in API.  The main entry
point of the plug-in is module {!Wp.VC}, which provides third party developers
with a programmatic access to WP command line features.  The complete list of
available API is listed in module {!Wp}, although a more comprehensive
organization is described below.

{2 Managing Proof Obligations}
{%html: <hr/> %}

The Wp plug-in main feature consists in generating verification conditions, also
called proof-obligations, for proving ACSL properties and contracts {i via} provers.

 - {!Wp.VC} {b main} entry point: generates proof obligations and run the provers.
 - {!Wp.VCS} module defines types related to proof obligations and provers.

{3 First Order Logic}

Proof obligations are first-order logic formulae with built-in theories.  All
terms and predicates are always simplified on-the-fly thanks to our Qed library.
The Qed library itself is not available from this API, but only a dedicated
instance to C/ACSL is provided.

 - {!Wp.Lang} defines the language of WP's logic.
 - {!Wp.Lang.F} term and predicate constructors and utilities.
 - {!Wp.Repr} term and predicate internal representation.
 - {!Wp.Definitions} holds logic definitions and axiomatic, on a per-model basis.
 - {!Wp.LogicBuiltins} manages ACSL built-ins and external WP drivers.
 - {!Wp.Conditions} proof-obligation representation into structured logical {i sequents}.

{3 Interactive Prover Extensions}

Using Frama-C Graphical User Interface, it is possible to transform the proof
obligations generated by WP before sending them to external provers by applying
{i tactics}. The plug-in provides the user with built-in transformations, but a
plug-in developer can extend the system with custom ones.

To install a new tactic, simply register an instance of [tactical] or [heuristic]
class via the API below. Beware that developing new tactics is error-prone and can break
proof soundness. Instead, developing heuristics upon built-in tactics only is {i always} safe.

Custom code shall be loaded from OCaml scripts via the Frama-C kernel
{%html:<tt>-load-module</tt>%} command line option.

 - {!Wp.Tactical} sequent transformation tactics.
 - {!Wp.Strategy} heuristics to infer tactics from sequents.
 - {!Wp.Auto} built-in tactics and heuristics to be used in third-party extensions.

{3 Pretty-Printers}

Pretty-printing proof obligations artificats requires a highly extensible machinery.
The following modules provides default visitors for pretty-printing :

 - {!Wp.Plang} pretty-printers for logic terms and predicates.
 - {!Wp.Pcond} pretty-printers for proof obligation {i sequents}.
 - {!Wp.Pcfg} reconstruction of ACSL memory updates from {i sequents}, used by [Wp.Pcond].

{2 Symbolic Compiler}
{%html: <hr/> %}

{3 Simple Values}

 - {!Wp.Ctypes} is dedicated to translation of C types into logic ones.
 - {!Wp.Cint} compiles C and ACSL integer arithmetic to logic.
 - {!Wp.Cfloat} compiles C and ACSL floating-point arithmetic to logic.
 - {!Wp.Vset} compiles ACSL sets and ranges.
 - {!Wp.Cstring} compiles C string literals.
 - {!Wp.Cvalues} representation of C l-values and C/ACSL values.

{3 Code & ACSL Compilers}

 - {!Wp.CodeSemantics} compilation of C expressions.
 - {!Wp.LogicSemantics} compilation of ACSL terms and predicates.
 - {!Wp.LogicCompiler} compilation of ACSL definitions and axiomatics.
 - {!Wp.CfgCompiler} low-level control-flow compilation machinery.
 - {!Wp.StmtSemantics} high-level statement and instruction compilers.

{3 Memory Models}

 - {!Wp.Memory} defines the high-level of Memory models.
 - {!Wp.Model} manages the different memory models used by WP.
 - {!Wp.Separation} defines separation hypotheses for each memory model.
 - {!Wp.MemVar} Hoare memory model.
 - {!Wp.MemTyped} Typed aliasing memory model.
 - {!Wp.Factory} Memory models factory.

{3 Side Effects Management}

 - {!Wp.Clabels} is dedicated to management of ACSL labels.
 - {!Wp.NormAtLabels} normalizes ACSL labels in ACSL contracts.
 - {!Wp.Sigma} manages memory model's compiling environments.
 - {!Wp.Passive} handles SSA-form in compiling environments, also known as {i passive form}.

{3 Weakest-Preconditions Calculus Machinery}

 - {!Wp.Context} global environment of the compiler (models, options, fresh variable pools, etc.).
 - {!Wp.Warning} roll-back environment to handle gracefully not-implemented features.
 - {!Wp.WpPropId} internal representation of ACSL properties and proof obligation targets.
 - {!Wp.Mcfg} proof obligation generator signature.
 - {!Wp.Splitter} manages the parallel proof obligation backward computations.
 - {!Wp.Mstate} allows pretty-printing memory effects into C-like assignments.

{%html: <p/> <hr/> %}
Â© Copyright 2016 CEA - LIST
