[kernel] Parsing metavariables-right.i (no preprocessing)
[kernel] Parsing TMPDIR/aorai_metavariables-right_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    a = 0,
    aorai_reject = 1,
    b = 2,
    c = 3,
    d = 4,
    e = 5,
    f_0 = 6,
    g_0 = 7,
    h_0 = 8,
    i_0 = 9
};
enum aorai_ListOper {
    op_f = 4,
    op_g = 3,
    op_h = 2,
    op_i = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ check lemma i_0_deterministic_trans{L}: \true;
 */
/*@ check lemma h_0_deterministic_trans{L}: \true;
 */
/*@ check lemma g_0_deterministic_trans{L}: \true;
 */
/*@ check lemma f_0_deterministic_trans{L}: \true;
 */
/*@ check lemma d_deterministic_trans{L}: \true;
 */
/*@ check lemma c_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_reject_deterministic_trans{L}: \true;
 */
/*@ check lemma a_deterministic_trans{L}: \true;
 */
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@
check lemma b_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_g ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧
     \at(aorai_CurOperation,L) ≡ op_f ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called);
 */
/*@ ghost int aorai_CurStates = a; */
/*@ ghost int aorai_x = 0; */
/*@
check lemma e_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_main ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
     \at(aorai_CurOperation,L) ≡ op_h ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧ \at(aorai_x,L) > 0);
 */
/*@ ghost int aorai_y = 0; */
/*@ ghost
  /@ requires aorai_CurStates ≡ b;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_x, aorai_y, aorai_CurOpStatus, aorai_CurOperation,
             aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_in_0:
       assumes aorai_CurStates ≡ b;
       ensures aorai_CurStates ≡ c;
       ensures aorai_x ≡ \old(x);
       ensures aorai_y ≡ aorai_x;
     
     behavior buch_state_c_out:
       assumes aorai_CurStates ≢ b;
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
     
     behavior aorai_y_unchanged:
       assumes aorai_CurStates ≢ b;
       ensures aorai_y ≡ \old(aorai_y);
     
     behavior aorai_x_unchanged:
       assumes aorai_CurStates ≢ b;
       ensures aorai_x ≡ \old(aorai_x);
   @/
  void f_pre_func(int x)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    if (2 == aorai_CurStates) {
      aorai_CurStates = c;
      aorai_x = x;
      aorai_y = aorai_x;
    }
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ c;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_in:
       assumes aorai_CurStates ≡ c;
       ensures aorai_CurStates ≡ e;
     
     behavior buch_state_e_out:
       assumes aorai_CurStates ≢ c;
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void f_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    if (3 == aorai_CurStates) aorai_CurStates = e;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ b;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ e;
      ensures
        \at(aorai_CurStates ≡ b,Pre) ∧ aorai_CurStates ≡ e ⇒
        aorai_y ≡ \at(aorai_x,Pre) + 0;
      ensures
        \at(aorai_CurStates ≡ b,Pre) ∧ aorai_CurStates ≡ e ⇒
        aorai_x ≡ \at(x,Pre) + 0;
 */
void f(int x)
{
  /*@ ghost f_pre_func(x); */
  /*@ ghost f_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ b;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_g;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_in:
       assumes aorai_CurStates ≡ b;
       ensures aorai_CurStates ≡ d;
     
     behavior buch_state_d_out:
       assumes aorai_CurStates ≢ b;
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void g_pre_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_g;
    if (2 == aorai_CurStates) aorai_CurStates = d;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ d;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_g;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_in:
       assumes aorai_CurStates ≡ d;
       ensures aorai_CurStates ≡ g_0;
     
     behavior buch_state_g_0_out:
       assumes aorai_CurStates ≢ d;
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void g_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_g;
    if (4 == aorai_CurStates) aorai_CurStates = g_0;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ b;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ g_0;
 */
void g(void)
{
  /*@ ghost g_pre_func(); */
  /*@ ghost g_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ e;
     requires aorai_CurStates ≡ e ⇒ aorai_x > 0;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_h;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_in:
       assumes aorai_CurStates ≡ e ∧ aorai_x > 0;
       ensures aorai_CurStates ≡ f_0;
     
     behavior buch_state_f_0_out:
       assumes aorai_CurStates ≢ e ∨ ¬(aorai_x > 0);
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void h_pre_func(int x)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_h;
    if (5 == aorai_CurStates) 
      if (aorai_x > 0) aorai_CurStates = f_0;
      else aorai_CurStates = aorai_reject;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ f_0;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_h;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_in:
       assumes aorai_CurStates ≡ f_0;
       ensures aorai_CurStates ≡ g_0;
     
     behavior buch_state_g_0_out:
       assumes aorai_CurStates ≢ f_0;
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void h_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_h;
    if (6 == aorai_CurStates) aorai_CurStates = g_0;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ e;
    requires aorai_CurStates ≡ e ⇒ aorai_x > 0;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ g_0;
 */
void h(int x)
{
  /*@ ghost h_pre_func(x); */
  /*@ ghost h_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ g_0;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_i;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_in:
       assumes aorai_CurStates ≡ g_0;
       ensures aorai_CurStates ≡ h_0;
     
     behavior buch_state_h_0_out:
       assumes aorai_CurStates ≢ g_0;
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void i_pre_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_i;
    if (7 == aorai_CurStates) aorai_CurStates = h_0;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ h_0;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_i;
     assigns aorai_y, aorai_x, aorai_CurOpStatus, aorai_CurOperation,
             aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_in_0:
       assumes aorai_CurStates ≡ h_0;
       ensures aorai_CurStates ≡ e;
       ensures aorai_y ≡ 0;
       ensures aorai_x ≡ 1;
     
     behavior buch_state_e_out:
       assumes aorai_CurStates ≢ h_0;
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
     
     behavior aorai_y_unchanged_0:
       assumes aorai_CurStates ≢ h_0;
       ensures aorai_y ≡ \old(aorai_y);
     
     behavior aorai_x_unchanged_0:
       assumes aorai_CurStates ≢ h_0;
       ensures aorai_x ≡ \old(aorai_x);
   @/
  void i_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_i;
    if (8 == aorai_CurStates) {
      aorai_CurStates = e;
      aorai_y = 0;
      aorai_x = 1;
    }
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ g_0;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ e;
      ensures
        \at(aorai_CurStates ≡ g_0,Pre) ∧ aorai_CurStates ≡ e ⇒
        aorai_y ≡ 0;
      ensures
        \at(aorai_CurStates ≡ g_0,Pre) ∧ aorai_CurStates ≡ e ⇒
        aorai_x ≡ \at(1,Pre) + 0;
 */
void i(void)
{
  /*@ ghost i_pre_func(); */
  /*@ ghost i_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ a;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_in:
       assumes aorai_CurStates ≡ a;
       ensures aorai_CurStates ≡ b;
     
     behavior buch_state_b_out:
       assumes aorai_CurStates ≢ a;
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_out:
       ensures aorai_CurStates ≢ i_0;
   @/
  void main_pre_func(int t)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    if (0 == aorai_CurStates) aorai_CurStates = b;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ e;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_a_out:
       ensures aorai_CurStates ≢ a;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_d_out:
       ensures aorai_CurStates ≢ d;
     
     behavior buch_state_e_out:
       ensures aorai_CurStates ≢ e;
     
     behavior buch_state_f_0_out:
       ensures aorai_CurStates ≢ f_0;
     
     behavior buch_state_g_0_out:
       ensures aorai_CurStates ≢ g_0;
     
     behavior buch_state_h_0_out:
       ensures aorai_CurStates ≢ h_0;
     
     behavior buch_state_i_0_in:
       assumes aorai_CurStates ≡ e;
       ensures aorai_CurStates ≡ i_0;
     
     behavior buch_state_i_0_out:
       assumes aorai_CurStates ≢ e;
       ensures aorai_CurStates ≢ i_0;
   @/
  void main_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    if (5 == aorai_CurStates) aorai_CurStates = i_0;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ a;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ i_0;
      ensures
        \at(aorai_CurStates ≡ a,Pre) ∧ aorai_CurStates ≡ i_0 ⇒
        aorai_y ≡ 0 ∨ aorai_y ≡ \at(aorai_x,Pre) + 0;
      ensures
        \at(aorai_CurStates ≡ a,Pre) ∧ aorai_CurStates ≡ i_0 ⇒
        aorai_x ≡ \at(1,Pre) + 0 ∨ aorai_x ≡ \at((int)42,Pre) + 0;
 */
void main(int t)
{
  /*@ ghost int aorai_Loop_Init_15; */
  /*@ ghost main_pre_func(t); */
  if (t) f(42);
  else {
    g();
    goto L;
  }
  int x = 0;
  /*@ ghost aorai_Loop_Init_15 = 1; */
  aorai_loop_15:
  /*@ loop invariant Aorai: aorai_CurStates ≢ a;
      loop invariant Aorai: aorai_CurStates ≢ aorai_reject;
      loop invariant Aorai: aorai_CurStates ≢ b;
      loop invariant Aorai: aorai_CurStates ≢ c;
      loop invariant Aorai: aorai_CurStates ≢ d;
      loop invariant Aorai: aorai_CurStates ≡ e;
      loop invariant Aorai: aorai_CurStates ≢ f_0;
      loop invariant Aorai: aorai_CurStates ≢ g_0;
      loop invariant Aorai: aorai_CurStates ≢ h_0;
      loop invariant Aorai: aorai_CurStates ≢ i_0;
      loop invariant
        Aorai:
          \at(aorai_CurStates ≡ e,aorai_loop_15) ∧ aorai_CurStates ≡ e ⇒
          aorai_y ≡ 0;
      loop invariant
        Aorai:
          \at(aorai_CurStates ≡ e,aorai_loop_15) ∧ aorai_CurStates ≡ e ⇒
          aorai_x ≡ \at(1,Pre) + 0;
  */
  while (x < 100) {
    /*@ ghost aorai_Loop_Init_15 = 0; */
    h(x);
    L: i();
    x ++;
  }
  /*@ ghost main_post_func(); */
  return;
}


