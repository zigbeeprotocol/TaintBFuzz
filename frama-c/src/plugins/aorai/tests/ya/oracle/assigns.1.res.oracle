[kernel] Parsing assigns.c (with preprocessing)
[kernel] Parsing TMPDIR/aorai_assigns_1.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    S1 = 0,
    S2 = 1,
    S_in_f = 2,
    Sf = 3,
    aorai_reject = 4,
    in_main = 5
};
enum aorai_ListOper {
    op_f = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ check lemma in_main_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_reject_deterministic_trans{L}: \true;
 */
/*@ check lemma Sf_deterministic_trans{L}: \true;
 */
/*@ check lemma S_in_f_deterministic_trans{L}: \true;
 */
/*@ check lemma S2_deterministic_trans{L}: \true;
 */
/*@ check lemma S1_deterministic_trans{L}: \true;
 */
int X;
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@ ghost int aorai_CurStates = S1; */
/*@ ghost
  /@ requires aorai_CurStates ≡ Sf;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_S1_out:
       ensures aorai_CurStates ≢ S1;
     
     behavior buch_state_S2_out:
       ensures aorai_CurStates ≢ S2;
     
     behavior buch_state_S_in_f_in:
       assumes aorai_CurStates ≡ Sf;
       ensures aorai_CurStates ≡ S_in_f;
     
     behavior buch_state_S_in_f_out:
       assumes aorai_CurStates ≢ Sf;
       ensures aorai_CurStates ≢ S_in_f;
     
     behavior buch_state_Sf_out:
       ensures aorai_CurStates ≢ Sf;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_in_main_out:
       ensures aorai_CurStates ≢ in_main;
   @/
  void f_pre_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    if (3 == aorai_CurStates) aorai_CurStates = S_in_f;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ S_in_f;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_S1_out:
       ensures aorai_CurStates ≢ S1;
     
     behavior buch_state_S2_out:
       ensures aorai_CurStates ≢ S2;
     
     behavior buch_state_S_in_f_out:
       ensures aorai_CurStates ≢ S_in_f;
     
     behavior buch_state_Sf_out:
       ensures aorai_CurStates ≢ Sf;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_in_main_in:
       assumes aorai_CurStates ≡ S_in_f;
       ensures aorai_CurStates ≡ in_main;
     
     behavior buch_state_in_main_out:
       assumes aorai_CurStates ≢ S_in_f;
       ensures aorai_CurStates ≢ in_main;
   @/
  void f_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    if (2 == aorai_CurStates) aorai_CurStates = in_main;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ Sf;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ in_main;
 */
void f(void)
{
  /*@ ghost f_pre_func(); */
  X ++;
  /*@ ghost f_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ S1;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_S1_out:
       ensures aorai_CurStates ≢ S1;
     
     behavior buch_state_S2_out:
       ensures aorai_CurStates ≢ S2;
     
     behavior buch_state_S_in_f_out:
       ensures aorai_CurStates ≢ S_in_f;
     
     behavior buch_state_Sf_in:
       assumes aorai_CurStates ≡ S1;
       ensures aorai_CurStates ≡ Sf;
     
     behavior buch_state_Sf_out:
       assumes aorai_CurStates ≢ S1;
       ensures aorai_CurStates ≢ Sf;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_in_main_out:
       ensures aorai_CurStates ≢ in_main;
   @/
  void main_pre_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    if (0 == aorai_CurStates) aorai_CurStates = Sf;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ in_main;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_S1_out:
       ensures aorai_CurStates ≢ S1;
     
     behavior buch_state_S2_in:
       assumes aorai_CurStates ≡ in_main;
       ensures aorai_CurStates ≡ S2;
     
     behavior buch_state_S2_out:
       assumes aorai_CurStates ≢ in_main;
       ensures aorai_CurStates ≢ S2;
     
     behavior buch_state_S_in_f_out:
       ensures aorai_CurStates ≢ S_in_f;
     
     behavior buch_state_Sf_out:
       ensures aorai_CurStates ≢ Sf;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_in_main_out:
       ensures aorai_CurStates ≢ in_main;
   @/
  void main_post_func(int res)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    if (5 == aorai_CurStates) aorai_CurStates = S2;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ S1;
    assigns X, aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
    
    behavior foo:
      assigns X, aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ S2;
 */
int main(void)
{
  /*@ ghost main_pre_func(); */
  /*@ assigns X; */
  X ++;
  /*@ assigns X, aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates; */
  f();
  /*@ ghost main_post_func(X); */
  return X;
}


