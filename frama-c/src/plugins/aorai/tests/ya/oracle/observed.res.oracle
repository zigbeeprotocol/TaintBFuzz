[kernel] Parsing observed.i (no preprocessing)
[kernel] Parsing TMPDIR/aorai_observed_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_ListOper {
    op_f = 1,
    op_h = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@ ghost int aorai_intermediate_state = 0; */
/*@ ghost int aorai_intermediate_state_0 = 0; */
/*@ ghost int final = 0; */
/*@ ghost int first_step = 0; */
/*@ ghost int init = 1; */
/*@ ghost
  /@ requires
       1 ≡ init ∧ 0 ≡ aorai_intermediate_state ∧
       0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ final ∧ 0 ≡ first_step;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_intermediate_state,
             aorai_intermediate_state_0, final, first_step, init;
     
     behavior buch_state_aorai_intermediate_state_in:
       assumes 1 ≡ init;
       ensures 1 ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_out:
       assumes 0 ≡ init;
       ensures 0 ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures 0 ≡ aorai_intermediate_state_0;
     
     behavior buch_state_final_out:
       ensures 0 ≡ final;
     
     behavior buch_state_first_step_out:
       ensures 0 ≡ first_step;
     
     behavior buch_state_init_out:
       ensures 0 ≡ init;
   @/
  void f_pre_func(void)
  {
    int aorai_intermediate_state_tmp;
    int aorai_intermediate_state_0_tmp;
    int final_tmp;
    int first_step_tmp;
    int init_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    aorai_intermediate_state_tmp = aorai_intermediate_state;
    aorai_intermediate_state_0_tmp = aorai_intermediate_state_0;
    final_tmp = final;
    first_step_tmp = first_step;
    init_tmp = init;
    init_tmp = 0;
    first_step_tmp = 0;
    final_tmp = 0;
    aorai_intermediate_state_0_tmp = 0;
    if (init == 1) aorai_intermediate_state_tmp = 1;
    else aorai_intermediate_state_tmp = 0;
    aorai_intermediate_state = aorai_intermediate_state_tmp;
    aorai_intermediate_state_0 = aorai_intermediate_state_0_tmp;
    final = final_tmp;
    first_step = first_step_tmp;
    init = init_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires
       1 ≡ aorai_intermediate_state ∧
       0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ final ∧
       0 ≡ first_step ∧ 0 ≡ init;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_intermediate_state,
             aorai_intermediate_state_0, final, first_step, init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures 0 ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures 0 ≡ aorai_intermediate_state_0;
     
     behavior buch_state_final_out:
       ensures 0 ≡ final;
     
     behavior buch_state_first_step_in:
       assumes 1 ≡ aorai_intermediate_state;
       ensures 1 ≡ first_step;
     
     behavior buch_state_first_step_out:
       assumes 0 ≡ aorai_intermediate_state;
       ensures 0 ≡ first_step;
     
     behavior buch_state_init_out:
       ensures 0 ≡ init;
   @/
  void f_post_func(void)
  {
    int aorai_intermediate_state_tmp;
    int aorai_intermediate_state_0_tmp;
    int final_tmp;
    int first_step_tmp;
    int init_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    aorai_intermediate_state_tmp = aorai_intermediate_state;
    aorai_intermediate_state_0_tmp = aorai_intermediate_state_0;
    final_tmp = final;
    first_step_tmp = first_step;
    init_tmp = init;
    init_tmp = 0;
    if (aorai_intermediate_state == 1) first_step_tmp = 1;
    else first_step_tmp = 0;
    final_tmp = 0;
    aorai_intermediate_state_0_tmp = 0;
    aorai_intermediate_state_tmp = 0;
    aorai_intermediate_state = aorai_intermediate_state_tmp;
    aorai_intermediate_state_0 = aorai_intermediate_state_0_tmp;
    final = final_tmp;
    first_step = first_step_tmp;
    init = init_tmp;
    return;
  }

*/

/*@ requires
      1 ≡ init ∧ 0 ≡ aorai_intermediate_state ∧
      0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ final ∧ 0 ≡ first_step;
    
    behavior Buchi_property_behavior:
      ensures
        0 ≡ aorai_intermediate_state ∧
        0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ final ∧ 0 ≡ init;
      ensures 1 ≡ first_step;
 */
void f(void)
{
  /*@ ghost f_pre_func(); */
  /*@ ghost f_post_func(); */
  return;
}

/*@ requires 1 ≡ first_step ∨ 0 ≡ first_step;
    requires
      1 ≡ aorai_intermediate_state_0 ∨ 0 ≡ aorai_intermediate_state_0;
    
    behavior Buchi_behavior_in_0:
      assumes 1 ≡ aorai_intermediate_state_0;
      ensures 1 ≡ aorai_intermediate_state_0;
    
    behavior Buchi_behavior_in_1:
      assumes 1 ≡ first_step;
      ensures 1 ≡ first_step;
    
    behavior Buchi_behavior_out_0:
      ensures 0 ≡ aorai_intermediate_state;
    
    behavior Buchi_behavior_out_1:
      assumes 0 ≡ aorai_intermediate_state_0;
      ensures 0 ≡ aorai_intermediate_state_0;
    
    behavior Buchi_behavior_out_2:
      ensures 0 ≡ final;
    
    behavior Buchi_behavior_out_3:
      assumes 0 ≡ first_step;
      ensures 0 ≡ first_step;
    
    behavior Buchi_behavior_out_4:
      ensures 0 ≡ init;
 */
void g(void)
{
  /*@ ghost int aorai_Loop_Init_4; */
  int i = 0;
  /*@ ghost aorai_Loop_Init_4 = 1; */
  aorai_loop_4:
  /*@ loop invariant Aorai: 0 ≡ aorai_intermediate_state;
      loop invariant
        Aorai:
          1 ≡ aorai_intermediate_state_0 ∨
          0 ≡ aorai_intermediate_state_0;
      loop invariant Aorai: 0 ≡ final;
      loop invariant Aorai: 1 ≡ first_step ∨ 0 ≡ first_step;
      loop invariant Aorai: 0 ≡ init;
      loop invariant
        Aorai: 1 ≡ aorai_intermediate_state_0 ∨ 1 ≡ first_step;
      loop invariant
        Aorai:
          aorai_Loop_Init_4 ≢ 0 ⇒
          \at(0 ≡ first_step,Pre) ⇒ 0 ≡ first_step;
      loop invariant
        Aorai:
          aorai_Loop_Init_4 ≢ 0 ⇒
          \at(0 ≡ aorai_intermediate_state_0,Pre) ⇒
          0 ≡ aorai_intermediate_state_0;
      loop invariant
        Aorai:
          aorai_Loop_Init_4 ≡ 0 ⇒
          \at(0 ≡ first_step,aorai_loop_4) ⇒ 0 ≡ first_step;
      loop invariant
        Aorai:
          aorai_Loop_Init_4 ≡ 0 ⇒
          \at(0 ≡ aorai_intermediate_state_0,aorai_loop_4) ⇒
          0 ≡ aorai_intermediate_state_0;
  */
  while (i < 1) {
    /*@ ghost aorai_Loop_Init_4 = 0; */
    i ++;
  }
  return;
}

/*@ ghost
  /@ requires
       1 ≡ first_step ∧ 0 ≡ aorai_intermediate_state ∧
       0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ final ∧ 0 ≡ init;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_h;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_intermediate_state,
             aorai_intermediate_state_0, final, first_step, init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures 0 ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_in:
       assumes 1 ≡ first_step;
       ensures 1 ≡ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       assumes 0 ≡ first_step;
       ensures 0 ≡ aorai_intermediate_state_0;
     
     behavior buch_state_final_out:
       ensures 0 ≡ final;
     
     behavior buch_state_first_step_out:
       ensures 0 ≡ first_step;
     
     behavior buch_state_init_out:
       ensures 0 ≡ init;
   @/
  void h_pre_func(void)
  {
    int aorai_intermediate_state_tmp;
    int aorai_intermediate_state_0_tmp;
    int final_tmp;
    int first_step_tmp;
    int init_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_h;
    aorai_intermediate_state_tmp = aorai_intermediate_state;
    aorai_intermediate_state_0_tmp = aorai_intermediate_state_0;
    final_tmp = final;
    first_step_tmp = first_step;
    init_tmp = init;
    init_tmp = 0;
    first_step_tmp = 0;
    final_tmp = 0;
    if (first_step == 1) aorai_intermediate_state_0_tmp = 1;
    else aorai_intermediate_state_0_tmp = 0;
    aorai_intermediate_state_tmp = 0;
    aorai_intermediate_state = aorai_intermediate_state_tmp;
    aorai_intermediate_state_0 = aorai_intermediate_state_0_tmp;
    final = final_tmp;
    first_step = first_step_tmp;
    init = init_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires
       1 ≡ aorai_intermediate_state_0 ∧
       0 ≡ aorai_intermediate_state ∧ 0 ≡ final ∧
       0 ≡ first_step ∧ 0 ≡ init;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_h;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_intermediate_state,
             aorai_intermediate_state_0, final, first_step, init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures 0 ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures 0 ≡ aorai_intermediate_state_0;
     
     behavior buch_state_final_in:
       assumes 1 ≡ aorai_intermediate_state_0;
       ensures 1 ≡ final;
     
     behavior buch_state_final_out:
       assumes 0 ≡ aorai_intermediate_state_0;
       ensures 0 ≡ final;
     
     behavior buch_state_first_step_out:
       ensures 0 ≡ first_step;
     
     behavior buch_state_init_out:
       ensures 0 ≡ init;
   @/
  void h_post_func(void)
  {
    int aorai_intermediate_state_tmp;
    int aorai_intermediate_state_0_tmp;
    int final_tmp;
    int first_step_tmp;
    int init_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_h;
    aorai_intermediate_state_tmp = aorai_intermediate_state;
    aorai_intermediate_state_0_tmp = aorai_intermediate_state_0;
    final_tmp = final;
    first_step_tmp = first_step;
    init_tmp = init;
    init_tmp = 0;
    first_step_tmp = 0;
    if (aorai_intermediate_state_0 == 1) final_tmp = 1; else final_tmp = 0;
    aorai_intermediate_state_0_tmp = 0;
    aorai_intermediate_state_tmp = 0;
    aorai_intermediate_state = aorai_intermediate_state_tmp;
    aorai_intermediate_state_0 = aorai_intermediate_state_0_tmp;
    final = final_tmp;
    first_step = first_step_tmp;
    init = init_tmp;
    return;
  }

*/

/*@ requires
      1 ≡ first_step ∧ 0 ≡ aorai_intermediate_state ∧
      0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ final ∧ 0 ≡ init;
    
    behavior Buchi_property_behavior:
      ensures
        0 ≡ aorai_intermediate_state ∧
        0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ first_step ∧ 0 ≡ init;
      ensures 1 ≡ final;
 */
void h(void)
{
  /*@ ghost h_pre_func(); */
  g();
  g();
  /*@ ghost h_post_func(); */
  return;
}

/*@ behavior Buchi_property_behavior:
      ensures
        0 ≡ aorai_intermediate_state ∧
        0 ≡ aorai_intermediate_state_0 ∧ 0 ≡ first_step ∧ 0 ≡ init;
      ensures 1 ≡ final;
 */
int main(void)
{
  int __retres;
  f();
  g();
  h();
  __retres = 0;
  return __retres;
}


