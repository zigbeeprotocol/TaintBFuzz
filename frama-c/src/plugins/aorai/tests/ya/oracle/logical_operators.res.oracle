[kernel] Parsing logical_operators.i (no preprocessing)
[kernel] Parsing TMPDIR/aorai_logical_operators_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_ListOper {
    op_f = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@ ghost int I = 1; */
/*@ ghost
  /@ requires 1 ≡ I;
     requires 1 ≡ I ⇒ x ≡ 1 ∨ x ≢ 1;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, I;
     
     behavior buch_state_I_in:
       assumes 1 ≡ I ∧ (x ≡ 1 ∨ x ≢ 1);
       ensures 1 ≡ I;
     
     behavior buch_state_I_out:
       assumes 0 ≡ I ∨ (¬(x ≡ 1) ∧ ¬(x ≢ 1));
       ensures 0 ≡ I;
   @/
  void f_pre_func(int x)
  {
    int I_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    I_tmp = I;
    if (I == 1) {
      if (x != 1) I_tmp = 1; else goto __aorai_label;
    }
    else {
      __aorai_label: ;
      if (I == 1) 
        if (x == 1) I_tmp = 1; else I_tmp = 0;
      else I_tmp = 0;
    }
    I = I_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires 1 ≡ I;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, I;
     
     behavior buch_state_I_in:
       assumes 1 ≡ I;
       ensures 1 ≡ I;
     
     behavior buch_state_I_out:
       assumes 0 ≡ I;
       ensures 0 ≡ I;
   @/
  void f_post_func(void)
  {
    int I_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    I_tmp = I;
    if (I == 1) I_tmp = 1; else I_tmp = 0;
    I = I_tmp;
    return;
  }

*/

/*@ requires 1 ≡ I;
    requires 1 ≡ I ⇒ x ≡ 1 ∨ x ≢ 1;
    
    behavior Buchi_property_behavior:
      ensures \true;
      ensures 1 ≡ I;
 */
void f(int x)
{
  /*@ ghost f_pre_func(x); */
  /*@ ghost f_post_func(); */
  return;
}

/*@ ghost
  /@ requires 1 ≡ I;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, I;
     
     behavior buch_state_I_in:
       assumes 1 ≡ I;
       ensures 1 ≡ I;
     
     behavior buch_state_I_out:
       assumes 0 ≡ I;
       ensures 0 ≡ I;
   @/
  void main_pre_func(int x)
  {
    int I_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    I_tmp = I;
    if (I == 1) I_tmp = 1; else I_tmp = 0;
    I = I_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires 1 ≡ I;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, I;
     
     behavior buch_state_I_in:
       assumes 1 ≡ I;
       ensures 1 ≡ I;
     
     behavior buch_state_I_out:
       assumes 0 ≡ I;
       ensures 0 ≡ I;
   @/
  void main_post_func(void)
  {
    int I_tmp;
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    I_tmp = I;
    if (I == 1) I_tmp = 1; else I_tmp = 0;
    I = I_tmp;
    return;
  }

*/

/*@ requires 1 ≡ I;
    
    behavior Buchi_property_behavior:
      ensures \true;
      ensures 1 ≡ I;
 */
void main(int x)
{
  /*@ ghost main_pre_func(x); */
  f(x);
  /*@ ghost main_post_func(); */
  return;
}


