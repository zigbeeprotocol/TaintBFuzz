[kernel] Parsing declared_function.i (no preprocessing)
[kernel] Parsing TMPDIR/aorai_declared_function_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    I = 0,
    aorai_reject = 1
};
enum aorai_ListOper {
    op_f = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ check lemma aorai_reject_deterministic_trans{L}: \true;
 */
int f(void);

/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@
check lemma I_deterministic_trans{L}:
  (∀ int __retres_f;
     ¬(\at(aorai_CurOperation,L) ≡ op_f ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
        __retres_f ≡ 0 ∧
        (¬(\at(aorai_CurOperation,L) ≡ op_f ∧
            \at(aorai_CurOpStatus,L) ≡ aorai_Terminated) ∨
         (\at(aorai_CurOperation,L) ≡ op_f ∧
          \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
          __retres_f ≢ 1 + 2 ∧ __retres_f ≢ 0)))) ∧
  (∀ int __retres_f;
     ¬(\at(aorai_CurOperation,L) ≡ op_f ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
        __retres_f ≡ 1 + 2 ∧
        (¬(\at(aorai_CurOperation,L) ≡ op_f ∧
            \at(aorai_CurOpStatus,L) ≡ aorai_Terminated) ∨
         (\at(aorai_CurOperation,L) ≡ op_f ∧
          \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
          __retres_f ≢ 1 + 2 ∧ __retres_f ≢ 0)))) ∧
  (∀ int __retres_f;
     ¬(\at(aorai_CurOperation,L) ≡ op_f ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
        __retres_f ≡ 1 + 2 ∧ \at(aorai_CurOperation,L) ≡ op_f ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧ __retres_f ≡ 0));
 */
/*@ ghost int aorai_CurStates = I; */
/*@ ghost
  /@ requires aorai_CurStates ≡ I;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_I_in:
       assumes aorai_CurStates ≡ I;
       ensures aorai_CurStates ≡ I;
     
     behavior buch_state_I_out:
       assumes aorai_CurStates ≢ I;
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void main_pre_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    if (0 == aorai_CurStates) aorai_CurStates = I;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ I;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_I_in:
       assumes aorai_CurStates ≡ I;
       ensures aorai_CurStates ≡ I;
     
     behavior buch_state_I_out:
       assumes aorai_CurStates ≢ I;
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void main_post_func(void)
  {
    /@ slevel full; @/
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    if (0 == aorai_CurStates) aorai_CurStates = I;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ I;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ I;
 */
void main(void)
{
  /*@ ghost main_pre_func(); */
  f();
  /*@ ghost main_post_func(); */
  return;
}


