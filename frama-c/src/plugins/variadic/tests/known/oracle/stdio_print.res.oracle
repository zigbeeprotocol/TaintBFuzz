[variadic] FRAMAC_SHARE/libc/stdio.h:207: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:209: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:211: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:212: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:213: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:215: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:217: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:548: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:608: 
  Declaration of variadic function asprintf.
[variadic] stdio_print.c:9: Warning: 
  Call to function fprintf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_print.c:9: 
  Translating call to fprintf to a call to the specialized version fprintf_va_1.
[variadic] stdio_print.c:10: Warning: 
  Call to function printf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_print.c:10: 
  Translating call to printf to a call to the specialized version printf_va_1.
[variadic] stdio_print.c:11: Warning: 
  Call to function snprintf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_print.c:11: 
  Translating call to snprintf to a call to the specialized version snprintf_va_1.
[variadic] stdio_print.c:12: Warning: 
  Call to function sprintf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_print.c:12: 
  Translating call to sprintf to a call to the specialized version sprintf_va_1.
[variadic] stdio_print.c:13: Warning: 
  Call to function dprintf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_print.c:13: 
  Translating call to dprintf to a call to the specialized version dprintf_va_1.
[variadic] stdio_print.c:15: 
  Translating call to fprintf to a call to the specialized version fprintf_va_2.
[variadic] stdio_print.c:16: 
  Translating call to printf to a call to the specialized version printf_va_2.
[variadic] stdio_print.c:17: 
  Translating call to snprintf to a call to the specialized version snprintf_va_2.
[variadic] stdio_print.c:18: 
  Translating call to sprintf to a call to the specialized version sprintf_va_2.
[variadic] stdio_print.c:19: 
  Translating call to dprintf to a call to the specialized version dprintf_va_2.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:alarm] stdio_print.c:9: Warning: 
  accessing uninitialized left-value. assert \initialized(&format);
[eva] done for function main
[eva] stdio_print.c:9: assertion 'Eva,initialization' got final status invalid.
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  NON TERMINATING FUNCTION
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: *(param1 + (0 ..))), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param2, *(param1 + (0 ..)),
            param0;
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format,
                 int param0, char *param1, int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: *(param1 + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, *(param1 + (0 ..)), param0;
 */
int printf_va_1(char const * restrict format, int param0, char *param1,
                int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))),
            (indirect: param2), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), param2,
            *(param1 + (0 ..)), param0;
 */
int snprintf_va_1(char * restrict s, size_t n, char const * restrict format,
                  int param0, char *param1, int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: *(param1 + (0 ..))), (indirect: param0);
    assigns *(s + (0 ..))
      \from (indirect: *(format + (0 ..))), param2, *(param1 + (0 ..)),
            param0;
 */
int sprintf_va_1(char * restrict s, char const * restrict format, int param0,
                 char *param1, int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result;
    assigns \result
      \from (indirect: fd), (indirect: *(format + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
 */
int dprintf_va_1(int fd, char const * restrict format, int param0,
                 char *param1, char *param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: *(param1 + (0 ..))), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param2, *(param1 + (0 ..)),
            param0;
 */
int fprintf_va_2(FILE * restrict stream, char const * restrict format,
                 int param0, char *param1, int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: *(param1 + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, *(param1 + (0 ..)), param0;
 */
int printf_va_2(char const * restrict format, int param0, char *param1,
                int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))),
            (indirect: param2), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), param2,
            *(param1 + (0 ..)), param0;
 */
int snprintf_va_2(char * restrict s, size_t n, char const * restrict format,
                  int param0, char *param1, int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: *(param1 + (0 ..))), (indirect: param0);
    assigns *(s + (0 ..))
      \from (indirect: *(format + (0 ..))), param2, *(param1 + (0 ..)),
            param0;
 */
int sprintf_va_2(char * restrict s, char const * restrict format, int param0,
                 char *param1, int param2);

/*@ requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result;
    assigns \result
      \from (indirect: fd), (indirect: *(format + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
 */
int dprintf_va_2(int fd, char const * restrict format, int param0,
                 char *param1, char *param2);

int main(void)
{
  int __retres;
  FILE *stream;
  char *format;
  char *str;
  size_t size;
  /*@ assert Eva: initialization: \initialized(&format); */
  fprintf(stream,(char const *)format,1,(char *)"2",3); /* fprintf_va_1 */
  printf((char const *)format,1,(char *)"2",3); /* printf_va_1 */
  snprintf(str,size,(char const *)format,1,(char *)"2",3); /* snprintf_va_1 */
  sprintf(str,(char const *)format,1,(char *)"2",3); /* sprintf_va_1 */
  dprintf(1,(char const *)format,1,(char *)"3",(char *)"4"); /* dprintf_va_1 */
  fprintf(stream,"%d %s %d",1,(char *)"2",3); /* fprintf_va_2 */
  printf("%d %s %d",1,(char *)"2",3); /* printf_va_2 */
  snprintf(str,size,"%d %s %d",1,(char *)"2",3); /* snprintf_va_2 */
  sprintf(str,"%d %s %d",1,(char *)"2",3); /* sprintf_va_2 */
  dprintf(1,"%d %s %s",1,(char *)"3",(char *)"4"); /* dprintf_va_2 */
  __retres = 0;
  return __retres;
}


