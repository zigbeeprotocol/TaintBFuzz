[variadic] FRAMAC_SHARE/libc/stdio.h:207: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:209: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:211: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:212: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:213: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:215: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:217: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:548: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:608: 
  Declaration of variadic function asprintf.
[variadic] stdio_scan.c:10: Warning: 
  Call to function fscanf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_scan.c:10: 
  Translating call to fscanf to a call to the specialized version fscanf_va_1.
[variadic] stdio_scan.c:11: Warning: 
  Call to function scanf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_scan.c:11: 
  Translating call to scanf to a call to the specialized version scanf_va_1.
[variadic] stdio_scan.c:12: Warning: 
  Call to function sscanf with non-static format argument: assuming that parameters are coherent with the format, and that no %n specifiers are present in the actual string.
[variadic] stdio_scan.c:12: 
  Translating call to sscanf to a call to the specialized version sscanf_va_1.
[variadic] stdio_scan.c:14: 
  Translating call to fscanf to a call to the specialized version fscanf_va_2.
[variadic] stdio_scan.c:15: 
  Translating call to scanf to a call to the specialized version scanf_va_2.
[variadic] stdio_scan.c:16: 
  Translating call to sscanf to a call to the specialized version sscanf_va_2.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:alarm] stdio_scan.c:10: Warning: 
  accessing uninitialized left-value. assert \initialized(&s);
[eva] done for function main
[eva] stdio_scan.c:10: assertion 'Eva,initialization' got final status invalid.
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  NON TERMINATING FUNCTION
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
/*@ requires \valid(param0);
    requires \valid(param1);
    requires \valid(param2);
    requires valid_read_string(format);
    ensures \initialized(param0);
    ensures \initialized(param1);
    ensures \initialized(param2);
    assigns \result, stream->__fc_FILE_data, *param2, *param1, *param0;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param1
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fscanf_va_1(FILE * restrict stream, char const * restrict format,
                int *param0, char *param1, int *param2);

/*@ requires \valid(param0);
    requires \valid(param1);
    requires \valid(param2);
    requires valid_read_string(format);
    ensures \initialized(param0);
    ensures \initialized(param1);
    ensures \initialized(param2);
    assigns \result, __fc_stdin->__fc_FILE_data, *param2, *param1, *param0;
    assigns \result
      \from (indirect: __fc_stdin->__fc_FILE_id),
            (indirect: __fc_stdin->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdin->__fc_FILE_data
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param1
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int scanf_va_1(char const * restrict format, int *param0, char *param1,
               int *param2);

/*@ requires \valid(param0);
    requires \valid(param1);
    requires \valid(param2);
    requires valid_read_string(format);
    requires valid_read_string(s);
    ensures \initialized(param0);
    ensures \initialized(param1);
    ensures \initialized(param2);
    assigns \result, *param2, *param1, *param0;
    assigns \result
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
    assigns *param1
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
 */
int sscanf_va_1(char const * restrict s, char const * restrict format,
                int *param0, char *param1, int *param2);

/*@ requires \valid(param0);
    requires \valid(param2);
    requires valid_read_string(format);
    ensures \initialized(param0);
    ensures \initialized(param2);
    assigns \result, stream->__fc_FILE_data, *param2, *(param1 + (0 ..)),
            *param0;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *(param1 + (0 ..))
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fscanf_va_2(FILE * restrict stream, char const * restrict format,
                int *param0, char *param1, int *param2);

/*@ requires \valid(param0);
    requires \valid(param2);
    requires valid_read_string(format);
    ensures \initialized(param0);
    ensures \initialized(param2);
    assigns \result, __fc_stdin->__fc_FILE_data, *param2, *(param1 + (0 ..)),
            *param0;
    assigns \result
      \from (indirect: __fc_stdin->__fc_FILE_id),
            (indirect: __fc_stdin->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdin->__fc_FILE_data
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *(param1 + (0 ..))
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int scanf_va_2(char const * restrict format, int *param0, char *param1,
               int *param2);

/*@ requires \valid(param0);
    requires \valid(param2);
    requires valid_read_string(format);
    requires valid_read_string(s);
    ensures \initialized(param0);
    ensures \initialized(param2);
    assigns \result, *param2, *(param1 + (0 ..)), *param0;
    assigns \result
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
    assigns *(param1 + (0 ..))
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: *(s + (0 ..))), (indirect: *(format + (0 ..)));
 */
int sscanf_va_2(char const * restrict s, char const * restrict format,
                int *param0, char *param1, int *param2);

int main(void)
{
  int __retres;
  FILE *stream;
  char *format;
  char *str;
  int i;
  int j;
  char *s;
  /*@ assert Eva: initialization: \initialized(&s); */
  fscanf(stream,(char const *)format,& i,s,& j); /* fscanf_va_1 */
  scanf((char const *)format,& i,s,& j); /* scanf_va_1 */
  sscanf((char const *)str,(char const *)format,& i,s,& j); /* sscanf_va_1 */
  fscanf(stream,"%d %s %d",& i,s,& j); /* fscanf_va_2 */
  scanf("%d %s %d",& i,s,& j); /* scanf_va_2 */
  sscanf((char const *)str,"%d %s %d",& i,s,& j); /* sscanf_va_2 */
  __retres = 0;
  return __retres;
}


