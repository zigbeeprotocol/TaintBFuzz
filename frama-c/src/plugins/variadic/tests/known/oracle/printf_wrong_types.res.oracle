[variadic] FRAMAC_SHARE/libc/stdio.h:207: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:209: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:211: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:212: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:213: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:215: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:217: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:548: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:608: 
  Declaration of variadic function asprintf.
[variadic] printf_wrong_types.c:18: 
  Translating call to printf to a call to the specialized version printf_va_1.
[variadic] printf_wrong_types.c:19: 
  Translating call to printf to a call to the specialized version printf_va_2.
[variadic:typing] printf_wrong_types.c:19: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned int to int.
[variadic] printf_wrong_types.c:20: 
  Translating call to printf to a call to the specialized version printf_va_3.
[variadic:typing] printf_wrong_types.c:20: Warning: 
  Incorrect type for argument 2. The argument will be cast from int to unsigned int.
[variadic] printf_wrong_types.c:21: 
  Translating call to printf to a call to the specialized version printf_va_4.
[variadic:typing] printf_wrong_types.c:21: Warning: 
  Incorrect type for argument 2. The argument will be cast from int to long.
[variadic] printf_wrong_types.c:22: 
  Translating call to printf to a call to the specialized version printf_va_5.
[variadic:typing] printf_wrong_types.c:22: Warning: 
  Incorrect type for argument 2. The argument will be cast from long to int.
[variadic] printf_wrong_types.c:23: 
  Translating call to printf to a call to the specialized version printf_va_6.
[variadic:typing] printf_wrong_types.c:23: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned int to unsigned long.
[variadic] printf_wrong_types.c:24: 
  Translating call to printf to a call to the specialized version printf_va_7.
[variadic:typing] printf_wrong_types.c:24: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned long to unsigned int.
[variadic] printf_wrong_types.c:25: 
  Translating call to printf to a call to the specialized version printf_va_8.
[variadic:typing] printf_wrong_types.c:25: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned int to void *.
[variadic] printf_wrong_types.c:26: 
  Translating call to printf to a call to the specialized version printf_va_9.
[variadic] printf_wrong_types.c:27: 
  Translating call to printf to a call to the specialized version printf_va_10.
[variadic:typing] printf_wrong_types.c:27: Warning: 
  Incorrect type for argument 2. The argument will be cast from long double to double.
[variadic] printf_wrong_types.c:28: 
  Translating call to printf to a call to the specialized version printf_va_11.
[variadic:typing] printf_wrong_types.c:28: Warning: 
  Incorrect type for argument 2. The argument will be cast from long double to double.
[variadic] printf_wrong_types.c:29: 
  Translating call to printf to a call to the specialized version printf_va_12.
[variadic:typing] printf_wrong_types.c:29: Warning: 
  Incorrect type for argument 2. The argument will be cast from double to long double.
[variadic] printf_wrong_types.c:30: 
  Translating call to printf to a call to the specialized version printf_va_13.
[variadic:typing] printf_wrong_types.c:30: Warning: 
  Incorrect type for argument 2. The argument will be cast from int to char *.
[variadic] printf_wrong_types.c:31: 
  Translating call to printf to a call to the specialized version printf_va_14.
[variadic:typing] printf_wrong_types.c:31: Warning: 
  Incorrect type for argument 2. The argument will be cast from char * to int.
[variadic] printf_wrong_types.c:35: 
  Translating call to printf to a call to the specialized version printf_va_15.
[variadic:typing] printf_wrong_types.c:35: Warning: 
  Possible portability issues with enum type for argument 2 (use -variadic-no-strict to avoid this warning).
[variadic] printf_wrong_types.c:36: 
  Translating call to printf to a call to the specialized version printf_va_16.
[variadic:typing] printf_wrong_types.c:36: Warning: 
  Incorrect type for argument 2. The argument will be cast from RC (unsigned int) to int.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] using specification for function printf_va_1
[eva] using specification for function printf_va_2
[eva] using specification for function printf_va_3
[eva] using specification for function printf_va_4
[eva] using specification for function printf_va_5
[eva] using specification for function printf_va_6
[eva] using specification for function printf_va_7
[eva] using specification for function printf_va_8
[eva] using specification for function printf_va_9
[eva] using specification for function printf_va_10
[eva] using specification for function printf_va_11
[eva] using specification for function printf_va_12
[eva] using specification for function printf_va_13
[eva:alarm] printf_wrong_types.c:30: Warning: 
  function printf_va_13: precondition valid_read_string(param0) got status invalid.
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  NON TERMINATING FUNCTION
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
enum __anonenum_RC_1 {
    OK = 0,
    ERROR = 1
};
typedef enum __anonenum_RC_1 RC;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_6(char const * restrict format, unsigned long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_8(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_9(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_11(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_12(char const * restrict format, long double param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_13(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_14(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_15(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_16(char const * restrict format, int param0);

int main(void)
{
  int __retres;
  int i = 42;
  unsigned int ui = (unsigned int)42;
  long li = (long)42;
  unsigned long uli = (unsigned long)42;
  char c = (char)'4';
  float f = 42.0f;
  long double ld = 42.0l;
  char *string = (char *)"42";
  printf("%hhd",(int)c); /* printf_va_1 */
  printf("%d",(int)ui); /* printf_va_2 */
  printf("%x",(unsigned int)i); /* printf_va_3 */
  printf("%ld",(long)i); /* printf_va_4 */
  printf("%d",(int)li); /* printf_va_5 */
  printf("%lu",(unsigned long)ui); /* printf_va_6 */
  printf("%u",(unsigned int)uli); /* printf_va_7 */
  printf("%p",(void *)ui); /* printf_va_8 */
  printf("%f",(double)f); /* printf_va_9 */
  printf("%f",(double)ld); /* printf_va_10 */
  printf("%lf",(double)ld); /* printf_va_11 */
  printf("%Lf",(long double)((double)f)); /* printf_va_12 */
  printf("%s",(char *)i); /* printf_va_13 */
  printf("%d",(int)string); /* printf_va_14 */
  RC rc = OK;
  printf("%u",rc); /* printf_va_15 */
  printf("%d",(int)rc); /* printf_va_16 */
  __retres = 0;
  return __retres;
}


[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[kernel:annot:missing-spec] printf_wrong_types.c:18: Warning: 
  Neither code nor specification for function printf, generating default assigns from the prototype
[eva] using specification for function printf
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  i ∈ {42}
  ui ∈ {42}
  li ∈ {42}
  uli ∈ {42}
  c ∈ {52}
  f ∈ {42.}
  ld ∈ {42.}
  string ∈ {{ "42" }}
  rc ∈ {0}
  __retres ∈ {0}
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
enum __anonenum_RC_1 {
    OK = 0,
    ERROR = 1
};
typedef enum __anonenum_RC_1 RC;
int main(void)
{
  int __retres;
  int i = 42;
  unsigned int ui = (unsigned int)42;
  long li = (long)42;
  unsigned long uli = (unsigned long)42;
  char c = (char)'4';
  float f = 42.0f;
  long double ld = 42.0l;
  char *string = (char *)"42";
  printf("%hhd",(int)c);
  printf("%d",ui);
  printf("%x",i);
  printf("%ld",i);
  printf("%d",li);
  printf("%lu",ui);
  printf("%u",uli);
  printf("%p",ui);
  printf("%f",(double)f);
  printf("%f",ld);
  printf("%lf",ld);
  printf("%Lf",(double)f);
  printf("%s",i);
  printf("%d",string);
  RC rc = OK;
  printf("%u",rc);
  printf("%d",rc);
  __retres = 0;
  return __retres;
}


[variadic] FRAMAC_SHARE/libc/stdio.h:207: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:209: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:211: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:212: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:213: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:215: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:217: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:548: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:608: 
  Declaration of variadic function asprintf.
[variadic] printf_wrong_types.c:18: 
  Translating call to printf to a call to the specialized version printf_va_1.
[variadic] printf_wrong_types.c:19: 
  Translating call to printf to a call to the specialized version printf_va_2.
[variadic:typing] printf_wrong_types.c:19: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned int to int.
[variadic] printf_wrong_types.c:20: 
  Translating call to printf to a call to the specialized version printf_va_3.
[variadic:typing] printf_wrong_types.c:20: Warning: 
  Incorrect type for argument 2. The argument will be cast from int to unsigned int.
[variadic] printf_wrong_types.c:21: 
  Translating call to printf to a call to the specialized version printf_va_4.
[variadic:typing] printf_wrong_types.c:21: Warning: 
  Incorrect type for argument 2. The argument will be cast from int to long.
[variadic] printf_wrong_types.c:22: 
  Translating call to printf to a call to the specialized version printf_va_5.
[variadic:typing] printf_wrong_types.c:22: Warning: 
  Incorrect type for argument 2. The argument will be cast from long to int.
[variadic] printf_wrong_types.c:23: 
  Translating call to printf to a call to the specialized version printf_va_6.
[variadic:typing] printf_wrong_types.c:23: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned int to unsigned long.
[variadic] printf_wrong_types.c:24: 
  Translating call to printf to a call to the specialized version printf_va_7.
[variadic:typing] printf_wrong_types.c:24: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned long to unsigned int.
[variadic] printf_wrong_types.c:25: 
  Translating call to printf to a call to the specialized version printf_va_8.
[variadic:typing] printf_wrong_types.c:25: Warning: 
  Incorrect type for argument 2. The argument will be cast from unsigned int to void *.
[variadic] printf_wrong_types.c:26: 
  Translating call to printf to a call to the specialized version printf_va_9.
[variadic] printf_wrong_types.c:27: 
  Translating call to printf to a call to the specialized version printf_va_10.
[variadic:typing] printf_wrong_types.c:27: Warning: 
  Incorrect type for argument 2. The argument will be cast from long double to double.
[variadic] printf_wrong_types.c:28: 
  Translating call to printf to a call to the specialized version printf_va_11.
[variadic:typing] printf_wrong_types.c:28: Warning: 
  Incorrect type for argument 2. The argument will be cast from long double to double.
[variadic] printf_wrong_types.c:29: 
  Translating call to printf to a call to the specialized version printf_va_12.
[variadic:typing] printf_wrong_types.c:29: Warning: 
  Incorrect type for argument 2. The argument will be cast from double to long double.
[variadic] printf_wrong_types.c:30: 
  Translating call to printf to a call to the specialized version printf_va_13.
[variadic:typing] printf_wrong_types.c:30: Warning: 
  Incorrect type for argument 2. The argument will be cast from int to char *.
[variadic] printf_wrong_types.c:31: 
  Translating call to printf to a call to the specialized version printf_va_14.
[variadic:typing] printf_wrong_types.c:31: Warning: 
  Incorrect type for argument 2. The argument will be cast from char * to int.
[variadic] printf_wrong_types.c:35: 
  Translating call to printf to a call to the specialized version printf_va_15.
[variadic] printf_wrong_types.c:36: 
  Translating call to printf to a call to the specialized version printf_va_16.
[variadic:typing] printf_wrong_types.c:36: Warning: 
  Incorrect type for argument 2. The argument will be cast from RC (unsigned int) to int.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] using specification for function printf_va_1
[eva] using specification for function printf_va_2
[eva] using specification for function printf_va_3
[eva] using specification for function printf_va_4
[eva] using specification for function printf_va_5
[eva] using specification for function printf_va_6
[eva] using specification for function printf_va_7
[eva] using specification for function printf_va_8
[eva] using specification for function printf_va_9
[eva] using specification for function printf_va_10
[eva] using specification for function printf_va_11
[eva] using specification for function printf_va_12
[eva] using specification for function printf_va_13
[eva:alarm] printf_wrong_types.c:30: Warning: 
  function printf_va_13: precondition valid_read_string(param0) got status invalid.
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  NON TERMINATING FUNCTION
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
enum __anonenum_RC_1 {
    OK = 0,
    ERROR = 1
};
typedef enum __anonenum_RC_1 RC;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_6(char const * restrict format, unsigned long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_8(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_9(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_11(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_12(char const * restrict format, long double param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_13(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_14(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_15(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_16(char const * restrict format, int param0);

int main(void)
{
  int __retres;
  int i = 42;
  unsigned int ui = (unsigned int)42;
  long li = (long)42;
  unsigned long uli = (unsigned long)42;
  char c = (char)'4';
  float f = 42.0f;
  long double ld = 42.0l;
  char *string = (char *)"42";
  printf("%hhd",(int)c); /* printf_va_1 */
  printf("%d",(int)ui); /* printf_va_2 */
  printf("%x",(unsigned int)i); /* printf_va_3 */
  printf("%ld",(long)i); /* printf_va_4 */
  printf("%d",(int)li); /* printf_va_5 */
  printf("%lu",(unsigned long)ui); /* printf_va_6 */
  printf("%u",(unsigned int)uli); /* printf_va_7 */
  printf("%p",(void *)ui); /* printf_va_8 */
  printf("%f",(double)f); /* printf_va_9 */
  printf("%f",(double)ld); /* printf_va_10 */
  printf("%lf",(double)ld); /* printf_va_11 */
  printf("%Lf",(long double)((double)f)); /* printf_va_12 */
  printf("%s",(char *)i); /* printf_va_13 */
  printf("%d",(int)string); /* printf_va_14 */
  RC rc = OK;
  printf("%u",rc); /* printf_va_15 */
  printf("%d",(int)rc); /* printf_va_16 */
  __retres = 0;
  return __retres;
}


