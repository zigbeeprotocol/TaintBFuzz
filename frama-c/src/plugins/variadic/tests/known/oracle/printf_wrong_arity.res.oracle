[variadic] FRAMAC_SHARE/libc/stdio.h:207: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:209: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:211: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:212: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:213: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:215: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:217: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:548: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:608: 
  Declaration of variadic function asprintf.
[variadic] printf_wrong_arity.c:8: 
  Translating call to printf to a call to the specialized version printf_va_1.
[variadic:typing] printf_wrong_arity.c:8: Warning: 
  Too many arguments: expected 2, given 3. Superfluous arguments will be removed.
[variadic] printf_wrong_arity.c:9: 
  Translating call to printf to a call to the specialized version printf_va_2.
[variadic:typing] printf_wrong_arity.c:9: Warning: 
  Not enough arguments: expected 3, given 2.
[variadic] printf_wrong_arity.c:9: 
  Fallback translation of call printf to a call to the specialized version printf_va_2_fallback_1.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] using specification for function printf_va_1
[kernel:annot:missing-spec] printf_wrong_arity.c:9: Warning: 
  Neither code nor specification for function printf_va_2_fallback_1, generating default assigns from the prototype
[eva] using specification for function printf_va_2_fallback_1
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  __fc_initial_stdout.__fc_FILE_id ∈ {1}
                     .__fc_FILE_data ∈ [--..--]
  __retres ∈ {0}
/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.c"
#include "stdio.h"
#include "stdlib.h"
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_2(char const * restrict format, int param0, int param1);

/*@ assigns \result;
    assigns \result \from *(format + (0 ..)), param0; */
int printf_va_2_fallback_1(char const * restrict format, int param0);

int main(void)
{
  int __retres;
  {
    int tmp = 2;
    printf("%d",1); /* printf_va_1 */
  }
  printf("%d %d",1); /* printf_va_2_fallback_1 */
  __retres = 0;
  return __retres;
}


