[variadic] FRAMAC_SHARE/libc/stdio.h:207: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:209: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:211: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:212: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:213: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:215: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:217: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:548: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:608: 
  Declaration of variadic function asprintf.
[variadic] printf_wrong_pointers.c:14: 
  Translating call to printf to a call to the specialized version printf_va_1.
[variadic] printf_wrong_pointers.c:15: 
  Translating call to printf to a call to the specialized version printf_va_2.
[variadic] printf_wrong_pointers.c:16: 
  Translating call to printf to a call to the specialized version printf_va_3.
[variadic] printf_wrong_pointers.c:17: 
  Translating call to printf to a call to the specialized version printf_va_4.
[variadic] printf_wrong_pointers.c:18: 
  Translating call to printf to a call to the specialized version printf_va_5.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] using specification for function printf_va_1
[eva:alarm] printf_wrong_pointers.c:14: Warning: 
  function printf_va_1: precondition \valid(param0) got status invalid.
[eva] using specification for function printf_va_2
[eva] using specification for function printf_va_3
[eva:alarm] printf_wrong_pointers.c:16: Warning: 
  function printf_va_3: precondition \valid(param0) got status invalid.
[eva] using specification for function printf_va_4
[eva] using specification for function printf_va_5
[eva:alarm] printf_wrong_pointers.c:18: Warning: 
  function printf_va_5: precondition valid_read_wstring(param0) got status invalid.
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  ui ∈ {42}
  string ∈ {{ "foo" }}
  wstring ∈ {{ L"bar" }}
  nondet ∈ [--..--]
  __retres ∈ {0}
  S___fc_stdout[0..1] ∈ [--..--]
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
/*@ requires \valid(param0);
    requires valid_read_string(format);
    ensures \initialized(param0);
    assigns \result, __fc_stdout->__fc_FILE_data, *param0;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format, int *param0);

/*@ requires \valid(param0);
    requires valid_read_string(format);
    ensures \initialized(param0);
    assigns \result, __fc_stdout->__fc_FILE_data, *param0;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_2(char const * restrict format, int *param0);

/*@ requires \valid(param0);
    requires valid_read_string(format);
    ensures \initialized(param0);
    assigns \result, __fc_stdout->__fc_FILE_data, *param0;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_3(char const * restrict format, signed char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_4(char const * restrict format, char *param0);

/*@ requires valid_read_wstring(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_5(char const * restrict format, wchar_t *param0);

int main(void)
{
  int __retres;
  short tt;
  unsigned int ui = (unsigned int)42;
  char *string = (char *)"foo";
  wchar_t *wstring = L"b" "a" "r" ;
  int volatile nondet = 0;
  switch (nondet) {
    case 0: printf("%n",(int *)(& tt)); /* printf_va_1 */
    case 1: printf("%n",(int *)(& ui)); /* printf_va_2 */
    case 2: printf("%hhn",(signed char *)string); /* printf_va_3 */
    case 3: printf("%s",(char *)wstring); /* printf_va_4 */
    case 4: printf("%ls",(wchar_t *)string); /* printf_va_5 */
  }
  __retres = 0;
  return __retres;
}


