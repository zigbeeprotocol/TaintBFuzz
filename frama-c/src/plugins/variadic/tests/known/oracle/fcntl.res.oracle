[variadic] FRAMAC_SHARE/libc/fcntl.h:121: 
  Declaration of variadic function fcntl.
[variadic] FRAMAC_SHARE/libc/fcntl.h:124: Declaration of variadic function open.
[variadic] FRAMAC_SHARE/libc/fcntl.h:131: 
  Declaration of variadic function openat.
[variadic] fcntl.c:8: 
  Translating call to the specialized version fcntl(int, int).
[variadic] fcntl.c:9: 
  Translating call to the specialized version fcntl(int, int, int).
[variadic] fcntl.c:10: 
  Translating call to the specialized version fcntl(int, int, struct flock *).
[variadic:prototype] fcntl.c:16: Warning: 
  No matching prototype found for this call to fcntl.
  Expected candidates:
         fcntl(int, int)
         fcntl(int, int, int)
         fcntl(int, int, struct flock *)
  Given arguments:
         fcntl(int, int, int, int)
[variadic] fcntl.c:16: 
  Fallback translation of call fcntl to a call to the specialized version fcntl_fallback_1.
[variadic] fcntl.c:20: 
  Translating call to the specialized version fcntl(int, int).
[variadic] fcntl.c:24: 
  Translating call to the specialized version fcntl(int, int, struct flock *).
[variadic:prototype] fcntl.c:28: Warning: 
  No matching prototype found for this call to fcntl.
  Expected candidates:
         fcntl(int, int)
         fcntl(int, int, int)
         fcntl(int, int, struct flock *)
  Given arguments:
         fcntl(int, int, double)
[variadic] fcntl.c:28: 
  Fallback translation of call fcntl to a call to the specialized version fcntl_fallback_2.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] using specification for function __va_fcntl_void
[eva] using specification for function __va_fcntl_int
[eva] using specification for function __va_fcntl_flock
[kernel:annot:missing-spec] fcntl.c:16: Warning: 
  Neither code nor specification for function fcntl_fallback_1, generating default assigns from the prototype
[eva] using specification for function fcntl_fallback_1
[eva:alarm] fcntl.c:20: Warning: 
  function __va_fcntl_void: precondition 'cmd_has_void_arg' got status invalid.
[eva:alarm] fcntl.c:24: Warning: 
  function __va_fcntl_flock: precondition 'cmd_as_flock_arg' got status invalid.
[kernel:annot:missing-spec] fcntl.c:28: Warning: 
  Neither code nor specification for function fcntl_fallback_2, generating default assigns from the prototype
[eva] using specification for function fcntl_fallback_2
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  fl ∈ [--..--] or UNINITIALIZED
  choice ∈ [--..--]
  flags ∈ [--..--]
  __retres ∈ {0}
/* Generated by Frama-C */
#include "fcntl.h"
/*@ assigns \result;
    assigns \result \from fd, cmd, param0, param1; */
int fcntl_fallback_1(int fd, int cmd, int param0, int param1);

/*@ assigns \result;
    assigns \result \from fd, cmd, param0; */
int fcntl_fallback_2(int fd, int cmd, double param0);

int main(void)
{
  int __retres;
  struct flock fl;
  int volatile choice = 0;
  int flags = __va_fcntl_void(0,1);
  fcntl(0,2,flags); /* __va_fcntl_int */
  fcntl(0,5,& fl); /* __va_fcntl_flock */
  switch (choice) {
    case 1: fcntl(0,2,flags,5); /* fcntl_fallback_1 */
    case 2: fcntl(0,2); /* __va_fcntl_void */
    case 3: fcntl(0,2,& fl); /* __va_fcntl_flock */
    case 4: fcntl(0,2,0.5); /* fcntl_fallback_2 */
  }
  __retres = 0;
  return __retres;
}


