[variadic] multi.i:1: Declaration of variadic function f.
[variadic] multi.i:12: Declaration of variadic function g.
[variadic] multi.i:9: Generic translation of call to variadic function.
[variadic] multi.i:18: Generic translation of call to variadic function.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[kernel] multi.i:18: Warning: 
  No code nor implicit assigns clause for function g, generating default assigns from the prototype
[eva] using specification for function g
[kernel] multi.i:9: Warning: 
  No code nor implicit assigns clause for function f, generating default assigns from the prototype
[eva] using specification for function f
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function call1:
  
[eva:final-states] Values at end of function call2:
  
[eva:final-states] Values at end of function main:
  
/* Generated by Frama-C */
/*@ assigns \result;
    assigns \result \from a, __x1, c;
    
    behavior bhv1:
      requires c > 0;
      requires a ≤ 42;
      ensures \result > 0;
 */
int f(int const a, int __x1, int c, void * const *__va_params);

int call1(void)
{
  int tmp;
  {
    int __va_arg0 = 4;
    int __va_arg1 = 5;
    int __va_arg2 = 6;
    void *__va_args[3] = {& __va_arg0, & __va_arg1, & __va_arg2};
    tmp = f(1,2,3,(void * const *)(__va_args));
  }
  return tmp;
}

/*@ assigns \nothing;
    
    behavior bhv2:
      requires b ≤ 0; */
void g(int b, int c, void * const *__va_params);

void call2(void)
{
  {
    int __va_arg0 = 4;
    void *__va_args[1] = {& __va_arg0};
    g(-2,3,(void * const *)(__va_args));
  }
  return;
}

int main(void)
{
  int tmp;
  call2();
  tmp = call1();
  return tmp;
}


