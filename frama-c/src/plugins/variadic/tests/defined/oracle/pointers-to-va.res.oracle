[variadic] pointers-to-va.c:6: Declaration of variadic function f.
[variadic] pointers-to-va.c:17: Declaration of variadic function g.
[variadic] pointers-to-va.c:31: 
  Generic translation of call to variadic function.
[variadic] pointers-to-va.c:32: 
  Generic translation of call to variadic function.
[variadic] pointers-to-va.c:33: 
  Generic translation of call to variadic function.
[variadic] pointers-to-va.c:34: 
  Generic translation of call to variadic function.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function f:
  global ∈ {1; 4; 42}
  i ∈ {1; 3}
  list ∈ {{ &__va_args[1] ; &__va_args_9[3] ; &__va_args_23[3] }}
[eva:final-states] Values at end of function g:
  global ∈ {24}
  i ∈ {2}
  list ∈ {{ &__va_args_15[2] }}
[eva:final-states] Values at end of function main:
  global ∈ {42}
  p ∈ {{ &f }}
/* Generated by Frama-C */
#include "stdarg.h"
int global = 0;
/*@ requires n ≥ 0; */
void f(int n, void * const *__va_params)
{
  int i;
  va_list list;
  list = __va_params;
  i = 0;
  while (i < n) {
    {
      int tmp;
      tmp = *((int *)*list);
      list ++;
      global += tmp;
    }
    i ++;
  }
  return;
}

/*@ requires n ≥ 0; */
void g(int n, void * const *__va_params)
{
  int i;
  va_list list;
  list = __va_params;
  i = 0;
  while (i < n) {
    {
      int tmp;
      tmp = *((int *)*list);
      list ++;
      global *= tmp;
    }
    i ++;
  }
  return;
}

void (*applications[2])(int n, void * const *__va_params) = {& f, & g};
int main(void)
{
  void (*p)(int n, void * const *__va_params) = & f;
  {
    int __va_arg0 = 1;
    void *__va_args[1] = {& __va_arg0};
    f(1,(void * const *)(__va_args));
  }
  {
    int __va_arg0_5 = 0;
    int __va_arg1 = 1;
    int __va_arg2 = 2;
    void *__va_args_9[3] = {& __va_arg0_5, & __va_arg1, & __va_arg2};
    (*p)(3,(void * const *)(__va_args_9));
  }
  {
    int __va_arg0_11 = 2;
    int __va_arg1_13 = 3;
    void *__va_args_15[2] = {& __va_arg0_11, & __va_arg1_13};
    (*(applications[1]))(2,(void * const *)(__va_args_15));
  }
  {
    int __va_arg0_17 = 4;
    int __va_arg1_19 = 5;
    int __va_arg2_21 = 9;
    void *__va_args_23[3] = {& __va_arg0_17, & __va_arg1_19, & __va_arg2_21};
    (*(applications[0]))(3,(void * const *)(__va_args_23));
  }
  return global;
}


