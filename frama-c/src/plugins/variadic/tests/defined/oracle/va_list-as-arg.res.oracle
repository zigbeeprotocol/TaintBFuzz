[variadic] va_list-as-arg.c:15: Declaration of variadic function sum.
[variadic] va_list-as-arg.c:25: 
  Generic translation of call to variadic function.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function vsum:
  list ∈ {{ &__va_args[8] }}
  i ∈ {4}
  ret ∈ {42.}
[eva:final-states] Values at end of function sum:
  tmp ∈ {42}
  list ∈ {{ &__va_args[0] }}
  __retres ∈ {42.}
[eva:final-states] Values at end of function main:
  __retres ∈ {42}
/* Generated by Frama-C */
#include "stdarg.h"
float vsum(int n, va_list list)
{
  int i;
  float ret = (float)0.0;
  i = 0;
  while (i < n) {
    {
      int tmp_1;
      tmp_1 = *((int *)*list);
      list ++;
      if (tmp_1) {
        double tmp;
        tmp = *((double *)*list);
        list ++;
        ret = (float)((double)ret + tmp);
      }
      else {
        int tmp_0;
        tmp_0 = *((int *)*list);
        list ++;
        ret += (float)tmp_0;
      }
    }
    i ++;
  }
  return ret;
}

float sum(int n, void * const *__va_params)
{
  float __retres;
  int tmp;
  va_list list;
  float tmp_0;
  list = __va_params;
  tmp_0 = vsum(n,list);
  tmp = (int)tmp_0;
  __retres = (float)tmp;
  return __retres;
}

int main(void)
{
  int __retres;
  float tmp;
  {
    int __va_arg0 = 1;
    double __va_arg1 = 3.5;
    int __va_arg2 = 0;
    int __va_arg3 = 14;
    int __va_arg4 = 1;
    double __va_arg5 = 3.5;
    int __va_arg6 = 0;
    int __va_arg7 = 21;
    void *__va_args[8] =
      {& __va_arg0,
       & __va_arg1,
       & __va_arg2,
       & __va_arg3,
       & __va_arg4,
       & __va_arg5,
       & __va_arg6,
       & __va_arg7};
    tmp = sum(4,(void * const *)(__va_args));
  }
  __retres = (int)tmp;
  return __retres;
}


