[variadic] struct.c:18: Declaration of variadic function inter.
[variadic] struct.c:41: Generic translation of call to variadic function.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function max:
  
[eva:final-states] Values at end of function min:
  
[eva:final-states] Values at end of function inter:
  ret.left ∈ {10}
     .top ∈ {30}
     .right ∈ {20}
     .bottom ∈ {60}
  tmp.left ∈ {0}
     .top ∈ {30}
     .right ∈ {20}
     .bottom ∈ {60}
  i ∈ {2}
  list ∈ {{ &__va_args[1] }}
[eva:final-states] Values at end of function main:
  r.left ∈ {10}
   .top ∈ {30}
   .right ∈ {20}
   .bottom ∈ {60}
  r1{.left; .top} ∈ {10}
    .right ∈ {50}
    .bottom ∈ {70}
  r2.left ∈ {0}
    .top ∈ {30}
    .right ∈ {20}
    .bottom ∈ {60}
  __retres ∈ {0}
/* Generated by Frama-C */
#include "stdarg.h"
struct __anonstruct_rect_1 {
   int left ;
   int top ;
   int right ;
   int bottom ;
};
typedef struct __anonstruct_rect_1 rect;
int min(int a, int b)
{
  int tmp;
  if (a < b) tmp = a; else tmp = b;
  return tmp;
}

int max(int a, int b)
{
  int tmp;
  if (a > b) tmp = a; else tmp = b;
  return tmp;
}

rect inter(int n, rect first, void * const *__va_params)
{
  rect tmp;
  va_list list;
  rect ret = first;
  int i = 0;
  list = __va_params;
  i = 1;
  while (i < n) {
    tmp = *((rect *)*list);
    list ++;
    ret.left = max(ret.left,tmp.left);
    ret.top = max(ret.top,tmp.top);
    ret.right = min(ret.right,tmp.right);
    ret.bottom = min(ret.bottom,tmp.bottom);
    i ++;
  }
  return ret;
}

int main(void)
{
  int __retres;
  rect r;
  rect r1 = {.left = 10, .top = 10, .right = 50, .bottom = 70};
  rect r2 = {.left = 0, .top = 30, .right = 20, .bottom = 60};
  {
    rect __va_arg0 = r2;
    void *__va_args[1] = {& __va_arg0};
    r = inter(2,r1,(void * const *)(__va_args));
  }
  __retres = 0;
  return __retres;
}


