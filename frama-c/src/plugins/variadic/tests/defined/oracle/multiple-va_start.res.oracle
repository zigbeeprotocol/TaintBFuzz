[variadic] multiple-va_start.c:9: Declaration of variadic function pack.
[variadic] multiple-va_start.c:32: 
  Generic translation of call to variadic function.
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva] multiple-va_start.c:20: allocating variable __malloc_pack_l20
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function pack:
  __fc_heap_status ∈ [--..--]
  ret ∈ {{ &__malloc_pack_l20[0] }}
  size ∈ {6}
  i ∈ {6}
  list ∈ {{ &__va_args[6] }}
  __malloc_pack_l20[0..5] ∈ {42}
                   [6] ∈ {0}
[eva:final-states] Values at end of function main:
  __fc_heap_status ∈ [--..--]
  p ∈ {{ &__malloc_pack_l20[0] }}
  __va_arg0 ∈ {42}
  __va_arg1 ∈ {42}
  __va_arg2 ∈ {42}
  __va_arg3 ∈ {42}
  __va_arg4 ∈ {42}
  __va_arg5 ∈ {0}
  __va_args[0] ∈ {{ (void *)&__va_arg0 }}
           [1] ∈ {{ (void *)&__va_arg1 }}
           [2] ∈ {{ (void *)&__va_arg2 }}
           [3] ∈ {{ (void *)&__va_arg3 }}
           [4] ∈ {{ (void *)&__va_arg4 }}
           [5] ∈ {{ (void *)&__va_arg5 }}
  __retres ∈ {42}
  __malloc_pack_l20[0..5] ∈ {42}
                   [6] ∈ {0}
/* Generated by Frama-C */
#include "stdarg.h"
#include "stdlib.h"
int *pack(int first, void * const *__va_params)
{
  int *ret;
  int size;
  int i;
  va_list list;
  list = __va_params;
  size = 1;
  while (1) {
    int tmp;
    tmp = *((int *)*list);
    list ++;
    if (! tmp) break;
    size ++;
  }
  ret = (int *)malloc(sizeof(int) * (unsigned long)(size + 1));
  *(ret + 0) = first;
  list = __va_params;
  i = 0;
  while (i < size) {
    *(ret + (i + 1)) = *((int *)*list);
    list ++;
    i ++;
  }
  return ret;
}

int main(void)
{
  int __retres;
  int __va_arg0 = 42;
  int __va_arg1 = 42;
  int __va_arg2 = 42;
  int __va_arg3 = 42;
  int __va_arg4 = 42;
  int __va_arg5 = 0;
  void *__va_args[6] =
    {& __va_arg0,
     & __va_arg1,
     & __va_arg2,
     & __va_arg3,
     & __va_arg4,
     & __va_arg5};
  int *p = pack(42,(void * const *)(__va_args));
  __retres = *(p + 0);
  return __retres;
}


