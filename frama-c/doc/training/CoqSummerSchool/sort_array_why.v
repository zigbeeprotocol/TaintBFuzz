(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export jessie_why.

(*Why type*) Definition char_P: Set.
Admitted.

(*Why type*) Definition int32: Set.
Admitted.

(*Why type*) Definition int8: Set.
Admitted.

(*Why type*) Definition int_P: Set.
Admitted.

(*Why type*) Definition padding: Set.
Admitted.

(*Why type*) Definition void_P: Set.
Admitted.

(*Why logic*) Definition bitvector_of_char_P : (pointer char_P) -> bitvector.
Admitted.

(*Why logic*) Definition char_P_of_bitvector : bitvector -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_char_P_of_char_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_char_P (char_P_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_int32 : int32 -> bitvector.
Admitted.

(*Why logic*) Definition int32_of_bitvector : bitvector -> int32.
Admitted.

(*Why axiom*) Lemma bitvector_of_int32_of_int32_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int32 (int32_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_int8 : int8 -> bitvector.
Admitted.

(*Why logic*) Definition int8_of_bitvector : bitvector -> int8.
Admitted.

(*Why axiom*) Lemma bitvector_of_int8_of_int8_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int8 (int8_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_int_P : (pointer int_P) -> bitvector.
Admitted.

(*Why logic*) Definition int_P_of_bitvector : bitvector -> (pointer int_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_int_P_of_int_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int_P (int_P_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_void_P : (pointer void_P) -> bitvector.
Admitted.

(*Why logic*) Definition void_P_of_bitvector : bitvector -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_void_P_of_void_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_void_P (void_P_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition char_P_tag : (tag_id char_P).
Admitted.

(*Why axiom*) Lemma char_P_int : (int_of_tag char_P_tag) = 1.
Admitted.

(*Why axiom*) Lemma char_P_of_bitvector_of_bitvector_of_char_P :
  (forall (x:(pointer char_P)),
   (char_P_of_bitvector (bitvector_of_char_P x)) = x).
Admitted.

(*Why logic*) Definition char_P_of_pointer_address :
  (pointer unit) -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma char_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer char_P)),
   p = (char_P_of_pointer_address (pointer_address p))).
Admitted.

(*Why axiom*) Lemma char_P_parenttag_bottom :
  (parenttag char_P_tag (@bottom_tag char_P)).
Admitted.

(*Why axiom*) Lemma char_P_tags :
  (forall (x:(pointer char_P)),
   (forall (char_P_tag_table:(tag_table char_P)),
    (instanceof char_P_tag_table x char_P_tag))).
Admitted.

(*Why logic*) Definition integer_of_int32 : int32 -> Z.
Admitted.

(*Why predicate*) Definition eq_int32  (x:int32) (y:int32)
  := (integer_of_int32 x) = (integer_of_int32 y).

(*Why logic*) Definition integer_of_int8 : int8 -> Z.
Admitted.

(*Why predicate*) Definition eq_int8  (x:int8) (y:int8)
  := (integer_of_int8 x) = (integer_of_int8 y).

(*Why logic*) Definition int32_of_integer : Z -> int32.
Admitted.

(*Why axiom*) Lemma int32_coerce :
  (forall (x:Z),
   ((-2147483648) <= x /\ x <= 2147483647 ->
    (integer_of_int32 (int32_of_integer x)) = x)).
Admitted.

(*Why axiom*) Lemma int32_of_bitvector_of_bitvector_of_int32 :
  (forall (x:int32), (eq_int32 (int32_of_bitvector (bitvector_of_int32 x)) x)).
Admitted.

(*Why axiom*) Lemma int32_range :
  (forall (x:int32), (-2147483648) <= (integer_of_int32 x) /\
   (integer_of_int32 x) <= 2147483647).
Admitted.

(*Why logic*) Definition int8_of_integer : Z -> int8.
Admitted.

(*Why axiom*) Lemma int8_coerce :
  (forall (x:Z),
   ((-128) <= x /\ x <= 127 -> (integer_of_int8 (int8_of_integer x)) = x)).
Admitted.

(*Why axiom*) Lemma int8_of_bitvector_of_bitvector_of_int8 :
  (forall (x:int8), (eq_int8 (int8_of_bitvector (bitvector_of_int8 x)) x)).
Admitted.

(*Why axiom*) Lemma int8_range :
  (forall (x:int8), (-128) <= (integer_of_int8 x) /\ (integer_of_int8 x) <=
   127).
Admitted.

(*Why logic*) Definition int_P_tag : (tag_id int_P).
Admitted.

(*Why axiom*) Lemma int_P_int : (int_of_tag int_P_tag) = 1.
Admitted.

(*Why axiom*) Lemma int_P_of_bitvector_of_bitvector_of_int_P :
  (forall (x:(pointer int_P)),
   (int_P_of_bitvector (bitvector_of_int_P x)) = x).
Admitted.

(*Why logic*) Definition int_P_of_pointer_address :
  (pointer unit) -> (pointer int_P).
Admitted.

(*Why axiom*) Lemma int_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer int_P)),
   p = (int_P_of_pointer_address (pointer_address p))).
Admitted.

(*Why axiom*) Lemma int_P_parenttag_bottom :
  (parenttag int_P_tag (@bottom_tag int_P)).
Admitted.

(*Why axiom*) Lemma int_P_tags :
  (forall (x:(pointer int_P)),
   (forall (int_P_tag_table:(tag_table int_P)),
    (instanceof int_P_tag_table x int_P_tag))).
Admitted.

(*Why predicate*) Definition left_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_int_P  (p:(pointer int_P)) (a:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a.

(*Why predicate*) Definition swap  (arr_0:(pointer int_P)) (i_0:Z) (j_0:Z) (int_P_int_M_arr_0_2_at_L2:(memory int_P int32)) (int_P_int_M_arr_0_2_at_L1:(memory int_P int32))
  := (integer_of_int32 (select int_P_int_M_arr_0_2_at_L1 (shift arr_0 i_0))) =
     (integer_of_int32 (select int_P_int_M_arr_0_2_at_L2 (shift arr_0 j_0))) /\
     (integer_of_int32 (select int_P_int_M_arr_0_2_at_L1 (shift arr_0 j_0))) =
     (integer_of_int32 (select int_P_int_M_arr_0_2_at_L2 (shift arr_0 i_0))) /\
     (forall (k:Z),
      (k <> i_0 /\ k <> j_0 ->
       (integer_of_int32 (select int_P_int_M_arr_0_2_at_L1 (shift arr_0 k))) =
       (integer_of_int32 (select int_P_int_M_arr_0_2_at_L2 (shift arr_0 k))))).

(*Why inductive*) Inductive permut  : (pointer int_P) -> Z
  -> (memory int_P int32) -> (memory int_P int32) -> Prop 
  := | perm_refl : (forall (int_P_int_M_arr_1_3_at_L:(memory int_P int32)),
                    (forall (arr_2_0:(pointer int_P)),
                     (forall (length_1_0:Z),
                      (permut
                       arr_2_0 length_1_0 int_P_int_M_arr_1_3_at_L int_P_int_M_arr_1_3_at_L))))
     
     | perm_swap : (forall (int_P_int_M_arr_1_3_at_L2:(memory int_P int32)),
                    (forall (int_P_int_M_arr_1_3_at_L1:(memory int_P int32)),
                     (forall (arr_3:(pointer int_P)),
                      (forall (length_2:Z),
                       (forall (i_1_0:Z),
                        (forall (j_1_0:Z),
                         (0 <= i_1_0 /\ i_1_0 < length_2 /\ 0 <= j_1_0 /\
                          j_1_0 < length_2 ->
                          ((swap
                            arr_3 i_1_0 j_1_0 int_P_int_M_arr_1_3_at_L2 int_P_int_M_arr_1_3_at_L1) ->
                           (permut
                            arr_3 length_2 int_P_int_M_arr_1_3_at_L2 int_P_int_M_arr_1_3_at_L1)))))))))
     
     | perm_trans : (forall (int_P_int_M_arr_1_3_at_L3:(memory int_P int32)),
                     (forall (int_P_int_M_arr_1_3_at_L2:(memory int_P int32)),
                      (forall (int_P_int_M_arr_1_3_at_L1:(memory int_P int32)),
                       (forall (arr_4:(pointer int_P)),
                        (forall (length_3:Z),
                         ((permut
                           arr_4 length_3 int_P_int_M_arr_1_3_at_L2 int_P_int_M_arr_1_3_at_L1) ->
                          ((permut
                            arr_4 length_3 int_P_int_M_arr_1_3_at_L3 int_P_int_M_arr_1_3_at_L2) ->
                           (permut
                            arr_4 length_3 int_P_int_M_arr_1_3_at_L3 int_P_int_M_arr_1_3_at_L1))))))))
     .

(* Why obligation from file "sort_array_proved.jc", line 74, characters 0-426: *)
(*Why goal*) Lemma permut_one_step : 
  (forall (int_P_int_M_arr_5_10_at_L3:(memory int_P int32)),
   (forall (int_P_int_M_arr_5_10_at_L2:(memory int_P int32)),
    (forall (int_P_int_M_arr_5_10_at_L1:(memory int_P int32)),
     (forall (arr_5:(pointer int_P)),
      (forall (length_4:Z),
       (forall (i_2:Z),
        (forall (j_2:Z),
         (0 <= i_2 /\ i_2 < length_4 /\ 0 <= j_2 /\ j_2 < length_4 ->
          ((permut
            arr_5 length_4 int_P_int_M_arr_5_10_at_L2 int_P_int_M_arr_5_10_at_L1) ->
           ((swap
             arr_5 i_2 j_2 int_P_int_M_arr_5_10_at_L3 int_P_int_M_arr_5_10_at_L2) ->
            (permut
             arr_5 length_4 int_P_int_M_arr_5_10_at_L3 int_P_int_M_arr_5_10_at_L1))))))))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Admitted.

(*Why axiom*) Lemma permut_one_step_as_axiom :
  (forall (int_P_int_M_arr_5_10_at_L3:(memory int_P int32)),
   (forall (int_P_int_M_arr_5_10_at_L2:(memory int_P int32)),
    (forall (int_P_int_M_arr_5_10_at_L1:(memory int_P int32)),
     (forall (arr_5:(pointer int_P)),
      (forall (length_4:Z),
       (forall (i_2:Z),
        (forall (j_2:Z),
         (0 <= i_2 /\ i_2 < length_4 /\ 0 <= j_2 /\ j_2 < length_4 ->
          ((permut
            arr_5 length_4 int_P_int_M_arr_5_10_at_L2 int_P_int_M_arr_5_10_at_L1) ->
           ((swap
             arr_5 i_2 j_2 int_P_int_M_arr_5_10_at_L3 int_P_int_M_arr_5_10_at_L2) ->
            (permut
             arr_5 length_4 int_P_int_M_arr_5_10_at_L3 int_P_int_M_arr_5_10_at_L1))))))))))).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_char_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (char_P_of_pointer_address p))).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_int_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (int_P_of_pointer_address p))).
Admitted.

(*Why logic*) Definition void_P_of_pointer_address :
  (pointer unit) -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_void_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (void_P_of_pointer_address p))).
Admitted.

(*Why predicate*) Definition right_valid_struct_char_P  (p:(pointer char_P)) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_int_P  (p:(pointer int_P)) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_void_P  (p:(pointer void_P)) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition sorted  (arr:(pointer int_P)) (length:Z) (int_P_int_M_arr_1_at_L:(memory int_P int32))
  := (forall (i_1:Z),
      (forall (j_1:Z),
       (0 <= i_1 /\ i_1 <= j_1 /\ j_1 < length ->
        (integer_of_int32 (select int_P_int_M_arr_1_at_L (shift arr i_1))) <=
        (integer_of_int32 (select int_P_int_M_arr_1_at_L (shift arr j_1)))))).

(* Why obligation from file "sort_array_proved.jc", line 88, characters 0-378: *)
(*Why goal*) Lemma sorted_swap : 
  (forall (int_P_int_M_arr_6_11_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_6_11_at_L1:(memory int_P int32)),
    (forall (arr_6:(pointer int_P)),
     (forall (length_5:Z),
      (forall (ind:Z),
       (length_5 <= ind /\
        (sorted arr_6 length_5 int_P_int_M_arr_6_11_at_L1) /\
        (swap
         arr_6 length_5 ind int_P_int_M_arr_6_11_at_L2 int_P_int_M_arr_6_11_at_L1) /\
        (integer_of_int32
         (select int_P_int_M_arr_6_11_at_L2 (shift arr_6 (length_5 - 1)))) <=
        (integer_of_int32
         (select int_P_int_M_arr_6_11_at_L2 (shift arr_6 length_5))) ->
        (sorted arr_6 (length_5 + 1) int_P_int_M_arr_6_11_at_L2))))))).
Proof.
Admitted.

(*Why axiom*) Lemma sorted_swap_as_axiom :
  (forall (int_P_int_M_arr_6_11_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_6_11_at_L1:(memory int_P int32)),
    (forall (arr_6:(pointer int_P)),
     (forall (length_5:Z),
      (forall (ind:Z),
       (length_5 <= ind /\
        (sorted arr_6 length_5 int_P_int_M_arr_6_11_at_L1) /\
        (swap
         arr_6 length_5 ind int_P_int_M_arr_6_11_at_L2 int_P_int_M_arr_6_11_at_L1) /\
        (integer_of_int32
         (select int_P_int_M_arr_6_11_at_L2 (shift arr_6 (length_5 - 1)))) <=
        (integer_of_int32
         (select int_P_int_M_arr_6_11_at_L2 (shift arr_6 length_5))) ->
        (sorted arr_6 (length_5 + 1) int_P_int_M_arr_6_11_at_L2))))))).
Admitted.

(*Why predicate*) Definition strict_valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) = a /\
     (offset_max int_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) = a /\
     (offset_max int_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_char_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_int_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_void_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a /\
     (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a /\
     (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why logic*) Definition void_P_tag : (tag_id void_P).
Admitted.

(*Why axiom*) Lemma void_P_int : (int_of_tag void_P_tag) = 1.
Admitted.

(*Why axiom*) Lemma void_P_of_bitvector_of_bitvector_of_void_P :
  (forall (x:(pointer void_P)),
   (void_P_of_bitvector (bitvector_of_void_P x)) = x).
Admitted.

(*Why axiom*) Lemma void_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer void_P)),
   p = (void_P_of_pointer_address (pointer_address p))).
Admitted.

(*Why axiom*) Lemma void_P_parenttag_bottom :
  (parenttag void_P_tag (@bottom_tag void_P)).
Admitted.

(*Why axiom*) Lemma void_P_tags :
  (forall (x:(pointer void_P)),
   (forall (void_P_tag_table:(tag_table void_P)),
    (instanceof void_P_tag_table x void_P_tag))).
Admitted.

(* Why obligation from file "sort_array_proved.c", line 46, characters 10-67: *)
(*Why goal*) Lemma index_min_ensures_default_po_1 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_6: (integer_of_int32 low) >= (integer_of_int32 high)),
  forall (__retres: int32),
  forall (HW_7: __retres = low),
  forall (why__return: int32),
  forall (HW_8: why__return = __retres),
  (* JC_14 *)
  (* JC_11 *)
  (* JC_11 *)
  (forall (j_4:Z),
   ((integer_of_int32 low) <= j_4 /\ j_4 < (integer_of_int32 high) ->
    (integer_of_int32
     (select int_P_int_M_a_4 (shift a (integer_of_int32 why__return)))) <=
    (integer_of_int32 (select int_P_int_M_a_4 (shift a j_4))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "sort_array_proved.c", line 47, characters 10-24: *)
(*Why goal*) Lemma index_min_ensures_default_po_2 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_6: (integer_of_int32 low) >= (integer_of_int32 high)),
  forall (__retres: int32),
  forall (HW_7: __retres = low),
  forall (why__return: int32),
  forall (HW_8: why__return = __retres),
  (* JC_14 *)
  (* JC_12 *)
  (* JC_12 *) (integer_of_int32 low) <= (integer_of_int32 why__return).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "sort_array_proved.c", line 47, characters 17-31: *)
(*Why goal*) Lemma index_min_ensures_default_po_3 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_6: (integer_of_int32 low) >= (integer_of_int32 high)),
  forall (__retres: int32),
  forall (HW_7: __retres = low),
  forall (why__return: int32),
  forall (HW_8: why__return = __retres),
  (* JC_14 *)
  (* JC_13 *)
  (* JC_13 *) (integer_of_int32 why__return) < (integer_of_int32 high).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "sort_array_proved.c", line 56, characters 21-71: *)
(*Why goal*) Lemma index_min_ensures_default_po_4 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  (* JC_39 *)
  (* JC_39 *)
  (forall (j_3:Z),
   ((integer_of_int32 low) <= j_3 /\ j_3 < (integer_of_int32 i_0_0) ->
    (integer_of_int32
     (select int_P_int_M_a_4 (shift a (integer_of_int32 idx)))) <=
    (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))).
Proof.
intuition.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 55, characters 21-31: *)
(*Why goal*) Lemma index_min_ensures_default_po_5 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  (* JC_42 *)
  (* JC_40 *) (* JC_40 *) (integer_of_int32 low) <= (integer_of_int32 idx).
Proof.
intuition.
(* FILL PROOF HERE *)
Admitted.

(* Why obligation from file "sort_array_proved.c", line 55, characters 28-38: *)
(*Why goal*) Lemma index_min_ensures_default_po_6 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  (* JC_42 *)
  (* JC_41 *) (* JC_41 *) (integer_of_int32 idx) < (integer_of_int32 high).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 54, characters 21-29: *)
(*Why goal*) Lemma index_min_ensures_default_po_7 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  (* JC_45 *)
  (* JC_43 *) (* JC_43 *) (integer_of_int32 low) <= (integer_of_int32 i_0_0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 54, characters 28-37: *)
(*Why goal*) Lemma index_min_ensures_default_po_8 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  (* JC_45 *)
  (* JC_44 *) (* JC_44 *) (integer_of_int32 i_0_0) <= (integer_of_int32 high).
Proof.
intuition.
(* FILL PROOF HERE *)
Admitted.

(* Why obligation from file "sort_array_proved.c", line 56, characters 21-71: *)
(*Why goal*) Lemma index_min_ensures_default_po_9 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_20: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_21: idx1 = i_0_0_0),
  forall (result2: int32),
  forall (HW_22: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_23: i_0_0_1 = result2),
  (* JC_39 *)
  (* JC_39 *)
  (forall (j_3:Z),
   ((integer_of_int32 low) <= j_3 /\ j_3 < (integer_of_int32 i_0_0_1) ->
    (integer_of_int32
     (select int_P_int_M_a_4 (shift a (integer_of_int32 idx1)))) <=
    (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 55, characters 21-31: *)
(*Why goal*) Lemma index_min_ensures_default_po_10 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_20: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_21: idx1 = i_0_0_0),
  forall (result2: int32),
  forall (HW_22: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_23: i_0_0_1 = result2),
  (* JC_42 *)
  (* JC_40 *) (* JC_40 *) (integer_of_int32 low) <= (integer_of_int32 idx1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 55, characters 28-38: *)
(*Why goal*) Lemma index_min_ensures_default_po_11 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_20: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_21: idx1 = i_0_0_0),
  forall (result2: int32),
  forall (HW_22: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_23: i_0_0_1 = result2),
  (* JC_42 *)
  (* JC_41 *) (* JC_41 *) (integer_of_int32 idx1) < (integer_of_int32 high).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 54, characters 21-29: *)
(*Why goal*) Lemma index_min_ensures_default_po_12 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_20: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_21: idx1 = i_0_0_0),
  forall (result2: int32),
  forall (HW_22: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_23: i_0_0_1 = result2),
  (* JC_45 *)
  (* JC_43 *)
  (* JC_43 *) (integer_of_int32 low) <= (integer_of_int32 i_0_0_1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 54, characters 28-37: *)
(*Why goal*) Lemma index_min_ensures_default_po_13 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_20: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_21: idx1 = i_0_0_0),
  forall (result2: int32),
  forall (HW_22: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_23: i_0_0_1 = result2),
  (* JC_45 *)
  (* JC_44 *)
  (* JC_44 *) (integer_of_int32 i_0_0_1) <= (integer_of_int32 high).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 56, characters 21-71: *)
(*Why goal*) Lemma index_min_ensures_default_po_14 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_25: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  forall (result2: int32),
  forall (HW_26: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_27: i_0_0_1 = result2),
  (* JC_39 *)
  (* JC_39 *)
  (forall (j_3:Z),
   ((integer_of_int32 low) <= j_3 /\ j_3 < (integer_of_int32 i_0_0_1) ->
    (integer_of_int32
     (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
    (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 55, characters 21-31: *)
(*Why goal*) Lemma index_min_ensures_default_po_15 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_25: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  forall (result2: int32),
  forall (HW_26: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_27: i_0_0_1 = result2),
  (* JC_42 *)
  (* JC_40 *) (* JC_40 *) (integer_of_int32 low) <= (integer_of_int32 idx0).
Proof.
Admitted.


(* Why obligation from file "sort_array_proved.c", line 55, characters 28-38: *)
(*Why goal*) Lemma index_min_ensures_default_po_16 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_25: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  forall (result2: int32),
  forall (HW_26: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_27: i_0_0_1 = result2),
  (* JC_42 *)
  (* JC_41 *) (* JC_41 *) (integer_of_int32 idx0) < (integer_of_int32 high).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 54, characters 21-29: *)
(*Why goal*) Lemma index_min_ensures_default_po_17 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_25: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  forall (result2: int32),
  forall (HW_26: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_27: i_0_0_1 = result2),
  (* JC_45 *)
  (* JC_43 *)
  (* JC_43 *) (integer_of_int32 low) <= (integer_of_int32 i_0_0_1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 54, characters 28-37: *)
(*Why goal*) Lemma index_min_ensures_default_po_18 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_17: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (result1: int32),
  forall (HW_19: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_25: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  forall (result2: int32),
  forall (HW_26: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_27: i_0_0_1 = result2),
  (* JC_45 *)
  (* JC_44 *)
  (* JC_44 *) (integer_of_int32 i_0_0_1) <= (integer_of_int32 high).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 46, characters 10-67: *)
(*Why goal*) Lemma index_min_ensures_default_po_19 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_29: (integer_of_int32 i_0_0_0) >= (integer_of_int32 high)),
  forall (__retres: int32),
  forall (HW_30: __retres = idx0),
  forall (why__return: int32),
  forall (HW_31: why__return = __retres),
  (* JC_14 *)
  (* JC_11 *)
  (* JC_11 *)
  (forall (j_4:Z),
   ((integer_of_int32 low) <= j_4 /\ j_4 < (integer_of_int32 high) ->
    (integer_of_int32
     (select int_P_int_M_a_4 (shift a (integer_of_int32 why__return)))) <=
    (integer_of_int32 (select int_P_int_M_a_4 (shift a j_4))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 47, characters 10-24: *)
(*Why goal*) Lemma index_min_ensures_default_po_20 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_29: (integer_of_int32 i_0_0_0) >= (integer_of_int32 high)),
  forall (__retres: int32),
  forall (HW_30: __retres = idx0),
  forall (why__return: int32),
  forall (HW_31: why__return = __retres),
  (* JC_14 *)
  (* JC_12 *)
  (* JC_12 *) (integer_of_int32 low) <= (integer_of_int32 why__return).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 47, characters 17-31: *)
(*Why goal*) Lemma index_min_ensures_default_po_21 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_10: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_11: idx = low),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_15: (* JC_39 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_42 *)
                 ((* JC_40 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_41 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_45 *)
                 ((* JC_43 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_44 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_29: (integer_of_int32 i_0_0_0) >= (integer_of_int32 high)),
  forall (__retres: int32),
  forall (HW_30: __retres = idx0),
  forall (why__return: int32),
  forall (HW_31: why__return = __retres),
  (* JC_14 *)
  (* JC_13 *)
  (* JC_13 *) (integer_of_int32 why__return) < (integer_of_int32 high).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 53, characters 2-5: *)
(*Why goal*) Lemma index_min_safety_po_1 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  (-2147483648) <= ((integer_of_int32 low) + 1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 53, characters 2-5: *)
(*Why goal*) Lemma index_min_safety_po_2 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  ((integer_of_int32 low) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 59, characters 4-6: *)
(*Why goal*) Lemma index_min_safety_po_3 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  (offset_min int_P_a_4_alloc_table a) <= (integer_of_int32 i_0_0_0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 59, characters 4-6: *)
(*Why goal*) Lemma index_min_safety_po_4 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  (integer_of_int32 i_0_0_0) <= (offset_max int_P_a_4_alloc_table a).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 59, characters 4-6: *)
(*Why goal*) Lemma index_min_safety_po_5 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (HW_17: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  (offset_min int_P_a_4_alloc_table a) <= (integer_of_int32 idx0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 59, characters 4-6: *)
(*Why goal*) Lemma index_min_safety_po_6 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (HW_17: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  (integer_of_int32 idx0) <= (offset_max int_P_a_4_alloc_table a).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 61, characters 4-5: *)
(*Why goal*) Lemma index_min_safety_po_7 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (HW_17: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 idx0) /\ (integer_of_int32 idx0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result1: int32),
  forall (HW_20: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_21: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_22: idx1 = i_0_0_0),
  (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 61, characters 4-5: *)
(*Why goal*) Lemma index_min_safety_po_8 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (HW_17: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 idx0) /\ (integer_of_int32 idx0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result1: int32),
  forall (HW_20: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_21: (integer_of_int32 result0) < (integer_of_int32 result1)),
  forall (idx1: int32),
  forall (HW_22: idx1 = i_0_0_0),
  ((integer_of_int32 i_0_0_0) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 61, characters 4-5: *)
(*Why goal*) Lemma index_min_safety_po_9 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (HW_17: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 idx0) /\ (integer_of_int32 idx0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result1: int32),
  forall (HW_20: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_26: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 61, characters 4-5: *)
(*Why goal*) Lemma index_min_safety_po_10 : 
  forall (a: (pointer int_P)),
  forall (low: int32),
  forall (high: int32),
  forall (int_P_a_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_a_4: (memory int_P int32)),
  forall (HW_1: (* JC_9 *)
                ((* JC_6 *) (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 low) /\
                (* JC_7 *) (offset_max int_P_a_4_alloc_table a) >=
                ((integer_of_int32 high) - 1) /\
                (* JC_8 *) (integer_of_int32 low) < (integer_of_int32 high))),
  forall (HW_9: (integer_of_int32 low) < (integer_of_int32 high)),
  forall (idx: int32),
  forall (HW_10: idx = low),
  forall (HW_11: (-2147483648) <= ((integer_of_int32 low) + 1) /\
                 ((integer_of_int32 low) + 1) <= 2147483647),
  forall (result: int32),
  forall (HW_12: (integer_of_int32 result) = ((integer_of_int32 low) + 1)),
  forall (i_0_0: int32),
  forall (HW_13: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (idx0: int32),
  forall (HW_14: (* JC_33 *) True),
  forall (HW_15: (* JC_25 *)
                 (forall (j_3:Z),
                  ((integer_of_int32 low) <= j_3 /\ j_3 <
                   (integer_of_int32 i_0_0_0) ->
                   (integer_of_int32
                    (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))) <=
                   (integer_of_int32 (select int_P_int_M_a_4 (shift a j_3))))) /\
                 (* JC_28 *)
                 ((* JC_26 *) (integer_of_int32 low) <=
                  (integer_of_int32 idx0) /\
                 (* JC_27 *) (integer_of_int32 idx0) <
                 (integer_of_int32 high)) /\
                 (* JC_31 *)
                 ((* JC_29 *) (integer_of_int32 low) <=
                  (integer_of_int32 i_0_0_0) /\
                 (* JC_30 *) (integer_of_int32 i_0_0_0) <=
                 (integer_of_int32 high))),
  forall (HW_16: (integer_of_int32 i_0_0_0) < (integer_of_int32 high)),
  forall (HW_17: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result0: int32),
  forall (HW_18: result0 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (offset_min int_P_a_4_alloc_table a) <=
                 (integer_of_int32 idx0) /\ (integer_of_int32 idx0) <=
                 (offset_max int_P_a_4_alloc_table a)),
  forall (result1: int32),
  forall (HW_20: result1 =
                 (select int_P_int_M_a_4 (shift a (integer_of_int32 idx0)))),
  forall (HW_26: (integer_of_int32 result0) >= (integer_of_int32 result1)),
  ((integer_of_int32 i_0_0_0) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 85, characters 19-77: *)
(*Why goal*) Lemma min_sort_ensures_default_po_1 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  (* JC_111 *)
  (* JC_111 *)
  (forall (j_9:Z),
   (forall (k_0:Z),
    (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1) /\
     (integer_of_int32 i_1_1) <= k_0 /\ k_0 < (integer_of_int32 length_1) ->
     (integer_of_int32 (select int_P_int_M_arr_6 (shift arr_2 j_9))) <=
     (integer_of_int32 (select int_P_int_M_arr_6 (shift arr_2 k_0)))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 84, characters 19-47: *)
(*Why goal*) Lemma min_sort_ensures_default_po_2 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  (* JC_112 *)
  (* JC_112 *)
  (permut
   arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6 int_P_int_M_arr_6).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 83, characters 19-32: *)
(*Why goal*) Lemma min_sort_ensures_default_po_3 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  (* JC_113 *)
  (* JC_113 *) (sorted arr_2 (integer_of_int32 i_1_1) int_P_int_M_arr_6).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 82, characters 21-27: *)
(*Why goal*) Lemma min_sort_ensures_default_po_4 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  (* JC_116 *) (* JC_114 *) (* JC_114 *) 0 <= (integer_of_int32 i_1_1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 82, characters 26-37: *)
(*Why goal*) Lemma min_sort_ensures_default_po_5 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  (* JC_116 *)
  (* JC_115 *)
  (* JC_115 *) (integer_of_int32 i_1_1) <= (integer_of_int32 length_1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 89, characters 15-66: *)
(*Why goal*) Lemma min_sort_ensures_default_po_6 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  (* JC_122 *)
  (* JC_122 *)
  (forall (j_5:Z),
   ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 < (integer_of_int32 length_1) ->
    (integer_of_int32
     (select int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
    (integer_of_int32 (select int_P_int_M_arr_6_0 (shift arr_2 j_5))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 90, characters 15-61: *)
(*Why goal*) Lemma min_sort_ensures_default_po_7 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  (* JC_123 *)
  (* JC_123 *)
  (forall (j_6:Z),
   (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
    (integer_of_int32 (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
    (integer_of_int32
     (select int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 92, characters 15-64: *)
(*Why goal*) Lemma min_sort_ensures_default_po_8 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  (* JC_125 *)
  (* JC_125 *)
  (forall (j_7:Z),
   ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 < (integer_of_int32 length_1) ->
    (integer_of_int32
     (select int_P_int_M_arr_6_1 (shift arr_2 (integer_of_int32 i_1_1_0)))) <=
    (integer_of_int32 (select int_P_int_M_arr_6_1 (shift arr_2 j_7))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 93, characters 15-59: *)
(*Why goal*) Lemma min_sort_ensures_default_po_9 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_18: (* JC_125 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  (* JC_126 *)
  (* JC_126 *)
  (forall (j_8:Z),
   (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
    (integer_of_int32 (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
    (integer_of_int32
     (select int_P_int_M_arr_6_1 (shift arr_2 (integer_of_int32 i_1_1_0)))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 85, characters 19-77: *)
(*Why goal*) Lemma min_sort_ensures_default_po_10 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_18: (* JC_125 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_20: (* JC_126 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  forall (result1: int32),
  forall (HW_21: (integer_of_int32 result1) =
                 ((integer_of_int32 i_1_1_0) + 1)),
  forall (i_1_1_1: int32),
  forall (HW_22: i_1_1_1 = result1),
  (* JC_111 *)
  (* JC_111 *)
  (forall (j_9:Z),
   (forall (k_0:Z),
    (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_1) /\
     (integer_of_int32 i_1_1_1) <= k_0 /\ k_0 <
     (integer_of_int32 length_1) ->
     (integer_of_int32 (select int_P_int_M_arr_6_1 (shift arr_2 j_9))) <=
     (integer_of_int32 (select int_P_int_M_arr_6_1 (shift arr_2 k_0)))))).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 84, characters 19-47: *)
(*Why goal*) Lemma min_sort_ensures_default_po_11 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_18: (* JC_125 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_20: (* JC_126 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  forall (result1: int32),
  forall (HW_21: (integer_of_int32 result1) =
                 ((integer_of_int32 i_1_1_0) + 1)),
  forall (i_1_1_1: int32),
  forall (HW_22: i_1_1_1 = result1),
  (* JC_112 *)
  (* JC_112 *)
  (permut
   arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_1 int_P_int_M_arr_6).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 83, characters 19-32: *)
(*Why goal*) Lemma min_sort_ensures_default_po_12 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_18: (* JC_125 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_20: (* JC_126 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  forall (result1: int32),
  forall (HW_21: (integer_of_int32 result1) =
                 ((integer_of_int32 i_1_1_0) + 1)),
  forall (i_1_1_1: int32),
  forall (HW_22: i_1_1_1 = result1),
  (* JC_113 *)
  (* JC_113 *) (sorted arr_2 (integer_of_int32 i_1_1_1) int_P_int_M_arr_6_1).
Proof.
intuition.
elim (Z_le_lt_eq_dec _ _ H6); intros Hilow.
rewrite HW_22; rewrite HW_21; clear HW_22 i_1_1_1 HW_21 result1.
apply (sorted_swap int_P_int_M_arr_6_1 int_P_int_M_arr_6_0 arr_2  (integer_of_int32 i_1_1_0)
          (integer_of_int32 min)); intuition; auto.
rewrite HW_11; auto.
rewrite HW_22; rewrite HW_21; rewrite <- Hilow; clear HW_22 i_1_1_1 HW_21 result1 Hilow.
simpl.
unfold sorted.
intros i_1 j_1 Hbound; cut (i_1 = 0); auto with zarith.
cut (j_1=0); auto with zarith.
intros Heq1 Heq2; rewrite Heq1; rewrite Heq2; auto with zarith.
Save.

(* Why obligation from file "sort_array_proved.c", line 82, characters 21-27: *)
(*Why goal*) Lemma min_sort_ensures_default_po_13 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_18: (* JC_125 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_20: (* JC_126 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  forall (result1: int32),
  forall (HW_21: (integer_of_int32 result1) =
                 ((integer_of_int32 i_1_1_0) + 1)),
  forall (i_1_1_1: int32),
  forall (HW_22: i_1_1_1 = result1),
  (* JC_116 *) (* JC_114 *) (* JC_114 *) 0 <= (integer_of_int32 i_1_1_1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 82, characters 26-37: *)
(*Why goal*) Lemma min_sort_ensures_default_po_14 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_9: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_13: (* JC_122 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_15: (* JC_123 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_16: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_18: (* JC_125 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_20: (* JC_126 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  forall (result1: int32),
  forall (HW_21: (integer_of_int32 result1) =
                 ((integer_of_int32 i_1_1_0) + 1)),
  forall (i_1_1_1: int32),
  forall (HW_22: i_1_1_1 = result1),
  (* JC_116 *)
  (* JC_115 *)
  (* JC_115 *) (integer_of_int32 i_1_1_1) <= (integer_of_int32 length_1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 78, characters 12-30: *)
(*Why goal*) Lemma min_sort_ensures_default_po_15 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_24: (integer_of_int32 i_1_1_0) >= (integer_of_int32 length_1)),
  (* JC_87 *)
  (* JC_85 *)
  (* JC_85 *) (sorted arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 79, characters 12-40: *)
(*Why goal*) Lemma min_sort_ensures_default_po_16 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_7: (* JC_111 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_112 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_113 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_116 *) ((* JC_114 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_115 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_24: (integer_of_int32 i_1_1_0) >= (integer_of_int32 length_1)),
  (* JC_87 *)
  (* JC_86 *)
  (* JC_86 *)
  (permut
   arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 88, characters 4-7: *)
(*Why goal*) Lemma min_sort_safety_po_1 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  (* JC_4 *)
  (* JC_1 *)
  (* JC_1 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
  (integer_of_int32 i_1_1_0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 88, characters 4-7: *)
(*Why goal*) Lemma min_sort_safety_po_2 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  (* JC_4 *)
  (* JC_2 *)
  (* JC_2 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
  ((integer_of_int32 length_1) - 1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.jc", line 232, characters 29-48: *)
(*Why goal*) Lemma min_sort_safety_po_3 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (HW_9: (* JC_4 *)
                ((* JC_1 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 i_1_1_0) /\
                (* JC_2 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_3 *) (integer_of_int32 i_1_1_0) <
                (integer_of_int32 length_1))),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_12: (* JC_104 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_13: (* JC_105 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  (* JC_53 *)
  (* JC_50 *)
  (* JC_50 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
  (integer_of_int32 i_1_1_0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.jc", line 232, characters 29-48: *)
(*Why goal*) Lemma min_sort_safety_po_4 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (HW_9: (* JC_4 *)
                ((* JC_1 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 i_1_1_0) /\
                (* JC_2 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_3 *) (integer_of_int32 i_1_1_0) <
                (integer_of_int32 length_1))),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_12: (* JC_104 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_13: (* JC_105 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  (* JC_53 *)
  (* JC_51 *)
  (* JC_51 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
  (integer_of_int32 min).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.jc", line 232, characters 29-48: *)
(*Why goal*) Lemma min_sort_safety_po_5 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (HW_9: (* JC_4 *)
                ((* JC_1 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 i_1_1_0) /\
                (* JC_2 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_3 *) (integer_of_int32 i_1_1_0) <
                (integer_of_int32 length_1))),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_12: (* JC_104 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_13: (* JC_105 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  (* JC_53 *)
  (* JC_52 *)
  (* JC_52 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
  (integer_of_int32 min).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 87, characters 6-9: *)
(*Why goal*) Lemma min_sort_safety_po_6 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (HW_9: (* JC_4 *)
                ((* JC_1 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 i_1_1_0) /\
                (* JC_2 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_3 *) (integer_of_int32 i_1_1_0) <
                (integer_of_int32 length_1))),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_12: (* JC_104 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_13: (* JC_105 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (HW_14: (* JC_53 *)
                 ((* JC_49 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                  (integer_of_int32 i_1_1_0) /\
                 (* JC_50 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                 (integer_of_int32 i_1_1_0) /\
                 (* JC_51 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 min) /\
                 (* JC_52 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                 (integer_of_int32 min))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_15: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_16: (* JC_107 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_17: (* JC_108 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  (-2147483648) <= ((integer_of_int32 i_1_1_0) + 1).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 87, characters 6-9: *)
(*Why goal*) Lemma min_sort_safety_po_7 : 
  forall (arr_2: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_6_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_6: (memory int_P int32)),
  forall (HW_1: (* JC_83 *)
                ((* JC_80 *) (offset_min int_P_arr_6_alloc_table arr_2) <= 0 /\
                (* JC_81 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_82 *) (integer_of_int32 length_1) > 0)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1_1: int32),
  forall (HW_5: i_1_1 = result),
  forall (i_1_1_0: int32),
  forall (int_P_int_M_arr_6_0: (memory int_P int32)),
  forall (HW_6: (* JC_100 *) True),
  forall (HW_7: (* JC_93 *)
                (forall (j_9:Z),
                 (forall (k_0:Z),
                  (0 <= j_9 /\ j_9 < (integer_of_int32 i_1_1_0) /\
                   (integer_of_int32 i_1_1_0) <= k_0 /\ k_0 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_9))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 k_0)))))) /\
                (* JC_94 *)
                (permut
                 arr_2 (integer_of_int32 length_1) int_P_int_M_arr_6_0 int_P_int_M_arr_6) /\
                (* JC_95 *)
                (sorted arr_2 (integer_of_int32 i_1_1_0) int_P_int_M_arr_6_0) /\
                (* JC_98 *) ((* JC_96 *) 0 <= (integer_of_int32 i_1_1_0) /\
                (* JC_97 *) (integer_of_int32 i_1_1_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_1_1_0) < (integer_of_int32 length_1)),
  forall (HW_9: (* JC_4 *)
                ((* JC_1 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 i_1_1_0) /\
                (* JC_2 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_3 *) (integer_of_int32 i_1_1_0) <
                (integer_of_int32 length_1))),
  forall (result0: int32),
  forall (HW_10: (true = true ->
                  (* JC_19 *)
                  ((* JC_16 *)
                   (forall (j_4:Z),
                    ((integer_of_int32 i_1_1_0) <= j_4 /\ j_4 <
                     (integer_of_int32 length_1) ->
                     (integer_of_int32
                      (select
                       int_P_int_M_arr_6_0 (shift
                                            arr_2 (integer_of_int32 result0)))) <=
                     (integer_of_int32
                      (select int_P_int_M_arr_6_0 (shift arr_2 j_4))))) /\
                  (* JC_17 *) (integer_of_int32 i_1_1_0) <=
                  (integer_of_int32 result0) /\
                  (* JC_18 *) (integer_of_int32 result0) <
                  (integer_of_int32 length_1)))),
  forall (min: int32),
  forall (HW_11: min = result0),
  forall (HW_12: (* JC_104 *)
                 (forall (j_5:Z),
                  ((integer_of_int32 i_1_1_0) <= j_5 /\ j_5 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_5)))))),
  forall (HW_13: (* JC_105 *)
                 (forall (j_6:Z),
                  (0 <= j_6 /\ j_6 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_0 (shift arr_2 j_6))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_0 (shift arr_2 (integer_of_int32 min))))))),
  forall (HW_14: (* JC_53 *)
                 ((* JC_49 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                  (integer_of_int32 i_1_1_0) /\
                 (* JC_50 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                 (integer_of_int32 i_1_1_0) /\
                 (* JC_51 *) (offset_min int_P_arr_6_alloc_table arr_2) <=
                 (integer_of_int32 min) /\
                 (* JC_52 *) (offset_max int_P_arr_6_alloc_table arr_2) >=
                 (integer_of_int32 min))),
  forall (int_P_int_M_arr_6_1: (memory int_P int32)),
  forall (HW_15: (true = true ->
                  (* JC_66 *)
                  ((* JC_64 *)
                   (swap
                    arr_2 (integer_of_int32 i_1_1_0) (integer_of_int32 min) int_P_int_M_arr_6_1 int_P_int_M_arr_6_0) /\
                  (* JC_65 *)
                  (not_assigns
                   int_P_arr_6_alloc_table int_P_int_M_arr_6_0 int_P_int_M_arr_6_1 (
                   pset_union
                   (pset_range
                    (pset_singleton arr_2) (integer_of_int32 min) (integer_of_int32
                                                                   min)) (
                   pset_range
                   (pset_singleton arr_2) (integer_of_int32 i_1_1_0) (
                   integer_of_int32 i_1_1_0))))))),
  forall (HW_16: (* JC_107 *)
                 (forall (j_7:Z),
                  ((integer_of_int32 i_1_1_0) <= j_7 /\ j_7 <
                   (integer_of_int32 length_1) ->
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0)))) <=
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_7)))))),
  forall (HW_17: (* JC_108 *)
                 (forall (j_8:Z),
                  (0 <= j_8 /\ j_8 < (integer_of_int32 i_1_1_0) ->
                   (integer_of_int32
                    (select int_P_int_M_arr_6_1 (shift arr_2 j_8))) <=
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_6_1 (shift
                                          arr_2 (integer_of_int32 i_1_1_0))))))),
  ((integer_of_int32 i_1_1_0) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 67, characters 10-33: *)
(*Why goal*) Lemma swap_ensures_default_po_1 : 
  forall (arr_0_0: (pointer int_P)),
  forall (i: int32),
  forall (j: int32),
  forall (int_P_arr_0_5_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_5: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_59 *)
                ((* JC_55 *)
                 (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                 (integer_of_int32 i) /\
                (* JC_56 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 i) /\
                (* JC_57 *) (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 j) /\
                (* JC_58 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 j))),
  forall (result: int32),
  forall (HW_3: result =
                (select
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)))),
  forall (t: int32),
  forall (HW_4: t = result),
  forall (result0: int32),
  forall (HW_5: result0 =
                (select
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 j)))),
  forall (int_P_int_M_arr_0_5_0: (memory int_P int32)),
  forall (HW_6: int_P_int_M_arr_0_5_0 =
                (store
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)) result0)),
  forall (int_P_int_M_arr_0_5_1: (memory int_P int32)),
  forall (HW_7: int_P_int_M_arr_0_5_1 =
                (store
                 int_P_int_M_arr_0_5_0 (shift arr_0_0 (integer_of_int32 j)) t)),
  (* JC_63 *)
  (* JC_61 *)
  (* JC_61 *)
  (swap
   arr_0_0 (integer_of_int32 i) (integer_of_int32 j) int_P_int_M_arr_0_5_1 int_P_int_M_arr_0_5).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 70, characters 5-9: *)
(*Why goal*) Lemma swap_ensures_default_po_2 : 
  forall (arr_0_0: (pointer int_P)),
  forall (i: int32),
  forall (j: int32),
  forall (int_P_arr_0_5_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_5: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_59 *)
                ((* JC_55 *)
                 (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                 (integer_of_int32 i) /\
                (* JC_56 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 i) /\
                (* JC_57 *) (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 j) /\
                (* JC_58 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 j))),
  forall (result: int32),
  forall (HW_3: result =
                (select
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)))),
  forall (t: int32),
  forall (HW_4: t = result),
  forall (result0: int32),
  forall (HW_5: result0 =
                (select
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 j)))),
  forall (int_P_int_M_arr_0_5_0: (memory int_P int32)),
  forall (HW_6: int_P_int_M_arr_0_5_0 =
                (store
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)) result0)),
  forall (int_P_int_M_arr_0_5_1: (memory int_P int32)),
  forall (HW_7: int_P_int_M_arr_0_5_1 =
                (store
                 int_P_int_M_arr_0_5_0 (shift arr_0_0 (integer_of_int32 j)) t)),
  (* JC_63 *)
  (* JC_62 *)
  (* JC_62 *)
  (not_assigns
   int_P_arr_0_5_alloc_table int_P_int_M_arr_0_5 int_P_int_M_arr_0_5_1 (
   pset_union
   (pset_range
    (pset_singleton arr_0_0) (integer_of_int32 j) (integer_of_int32 j)) (
   pset_range
   (pset_singleton arr_0_0) (integer_of_int32 i) (integer_of_int32 i)))).
Proof.
intuition.
unfold not_assigns.
intros p Hp.
elim Hp; clear Hp; intros Hvalid Hpset.
rewrite HW_7; rewrite HW_6; clear HW_6 HW_7 int_P_int_M_arr_0_5_1 int_P_int_M_arr_0_5_0.
rewrite (select_store_neq _ _ 
               (store int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i))result0)
               (shift arr_0_0 (integer_of_int32 j)) p t).
rewrite (select_store_neq _ _ int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)) p result0).
trivial.
generalize (in_pset_union _ p 
                      (pset_range (pset_singleton arr_0_0) (integer_of_int32 j) (integer_of_int32 j))
                      (pset_range (pset_singleton arr_0_0) (integer_of_int32 i) (integer_of_int32 i))).
intros Hequiv; elim Hequiv; clear Hequiv. intros Hind1 Hind2.
unfold not; intros Heq.
absurd (in_pset p
          (pset_range (pset_singleton arr_0_0) (integer_of_int32 j)
             (integer_of_int32 j)) \/
        in_pset p
          (pset_range (pset_singleton arr_0_0) (integer_of_int32 i)
             (integer_of_int32 i))).
unfold not; intros Habs. apply Hpset. apply (Hind2 Habs).
right.
rewrite <- Heq.
generalize (in_pset_range _ (shift arr_0_0 (integer_of_int32 i)) (pset_singleton arr_0_0)
(integer_of_int32 i) (integer_of_int32 i));
intros Hequiv; elim Hequiv; clear Hequiv.
intros Hpset1 Hpset2; apply Hpset2.
exists( integer_of_int32 i); exists arr_0_0;intuition; auto with zarith.
generalize (in_pset_singleton _ arr_0_0 arr_0_0); tauto.
generalize (in_pset_union _ p 
                      (pset_range (pset_singleton arr_0_0) (integer_of_int32 j) (integer_of_int32 j))
                      (pset_range (pset_singleton arr_0_0) (integer_of_int32 i) (integer_of_int32 i))).
intros Hequiv; elim Hequiv; clear Hequiv. intros Hind1 Hind2.
unfold not; intros Heq.
absurd (in_pset p
          (pset_range (pset_singleton arr_0_0) (integer_of_int32 j)
             (integer_of_int32 j)) \/
        in_pset p
          (pset_range (pset_singleton arr_0_0) (integer_of_int32 i)
             (integer_of_int32 i))).
unfold not; intros Habs. apply Hpset. apply (Hind2 Habs).
left.
rewrite <- Heq.
generalize (in_pset_range _ (shift arr_0_0 (integer_of_int32 j)) (pset_singleton arr_0_0)
(integer_of_int32 j) (integer_of_int32 j));
intros Hequiv; elim Hequiv; clear Hequiv.
intros Hpset1 Hpset2; apply Hpset2.
exists( integer_of_int32 j); exists arr_0_0;intuition; auto with zarith.
generalize (in_pset_singleton _ arr_0_0 arr_0_0); tauto.
Save.

(* Why obligation from file "sort_array_proved.c", line 71, characters 2-5: *)
(*Why goal*) Lemma swap_safety_po_1 : 
  forall (arr_0_0: (pointer int_P)),
  forall (i: int32),
  forall (j: int32),
  forall (int_P_arr_0_5_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_59 *)
                ((* JC_55 *)
                 (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                 (integer_of_int32 i) /\
                (* JC_56 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 i) /\
                (* JC_57 *) (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 j) /\
                (* JC_58 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 j))),
  (integer_of_int32 i) <= (offset_max int_P_arr_0_5_alloc_table arr_0_0).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 72, characters 2-5: *)
(*Why goal*) Lemma swap_safety_po_2 : 
  forall (arr_0_0: (pointer int_P)),
  forall (i: int32),
  forall (j: int32),
  forall (int_P_arr_0_5_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_5: (memory int_P int32)),
  forall (HW_1: (* JC_59 *)
                ((* JC_55 *)
                 (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                 (integer_of_int32 i) /\
                (* JC_56 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 i) /\
                (* JC_57 *) (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 j) /\
                (* JC_58 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 j))),
  forall (HW_3: (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 i) /\ (integer_of_int32 i) <=
                (offset_max int_P_arr_0_5_alloc_table arr_0_0)),
  forall (result: int32),
  forall (HW_4: result =
                (select
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)))),
  forall (t: int32),
  forall (HW_5: t = result),
  (offset_min int_P_arr_0_5_alloc_table arr_0_0) <= (integer_of_int32 j).
Proof.
Admitted.

(* Why obligation from file "sort_array_proved.c", line 72, characters 2-5: *)
(*Why goal*) Lemma swap_safety_po_3 : 
  forall (arr_0_0: (pointer int_P)),
  forall (i: int32),
  forall (j: int32),
  forall (int_P_arr_0_5_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_5: (memory int_P int32)),
  forall (HW_1: (* JC_59 *)
                ((* JC_55 *)
                 (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                 (integer_of_int32 i) /\
                (* JC_56 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 i) /\
                (* JC_57 *) (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 j) /\
                (* JC_58 *) (offset_max int_P_arr_0_5_alloc_table arr_0_0) >=
                (integer_of_int32 j))),
  forall (HW_3: (offset_min int_P_arr_0_5_alloc_table arr_0_0) <=
                (integer_of_int32 i) /\ (integer_of_int32 i) <=
                (offset_max int_P_arr_0_5_alloc_table arr_0_0)),
  forall (result: int32),
  forall (HW_4: result =
                (select
                 int_P_int_M_arr_0_5 (shift arr_0_0 (integer_of_int32 i)))),
  forall (t: int32),
  forall (HW_5: t = result),
  (integer_of_int32 j) <= (offset_max int_P_arr_0_5_alloc_table arr_0_0).
Proof.
Admitted.
