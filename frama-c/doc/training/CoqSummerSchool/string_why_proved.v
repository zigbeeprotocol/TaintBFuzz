(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export jessie_why.
Dp_timeout 30.
Dp_hint concat_select_bytes.
Dp_hint concat_store_bytes_down.
Dp_hint concat_store_bytes_up.
Dp_hint shift_select_bytes.
Dp_hint shift_store_bytes.
Dp_hint select_store_neq_bytes.
Dp_hint select_store_eq_bytes.
Dp_hint concat_extract_bytes.
Dp_hint concat_replace_bytes_down.
Dp_hint concat_replace_bytes_up.
Dp_hint select_store_neq_union.
Dp_hint select_store_eq_union.
Dp_hint offset_max_bytes_def.
Dp_hint offset_min_bytes_def.
Dp_hint alloc_extends_except_offset_max.
Dp_hint alloc_extends_except_offset_min.
Dp_hint alloc_extends_not_assigns_empty.
Dp_hint alloc_extends_offset_max.
Dp_hint alloc_extends_offset_min.
Dp_hint lsr_of_lsl_identity_on_positive.
Dp_hint lsl_of_lsr_decreases_on_positive.
Dp_hint asr_lsr_same_on_positive.
Dp_hint asr_decreases_on_positive.
Dp_hint asr_positive_on_positive.
Dp_hint lsr_left_positive_decreases.
Dp_hint lsr_left_positive_returns_positive.
Dp_hint lsl_left_positive_monotone.
Dp_hint lsl_left_positive_returns_positive.
Dp_hint bw_and_not_null.
Dp_hint root_subtag.
Dp_hint bottom_tag_axiom.
Dp_hint downcast_instanceof.
Dp_hint subtag_parent.
Dp_hint subtag_refl.
Dp_hint subtag_bool_def.
Dp_hint full_separated_shift4.
Dp_hint full_separated_shift3.
Dp_hint full_separated_shift2.
Dp_hint full_separated_shift1.
Dp_hint not_assigns_trans.
Dp_hint not_assigns_refl.
Dp_hint valid_pset_union.
Dp_hint valid_pset_range.
Dp_hint valid_pset_deref.
Dp_hint valid_pset_singleton.
Dp_hint valid_pset_empty.
Dp_hint in_pset_union.
Dp_hint in_pset_range_right.
Dp_hint in_pset_range_left.
Dp_hint in_pset_range.
Dp_hint in_pset_all.
Dp_hint in_pset_deref.
Dp_hint in_pset_singleton.
Dp_hint in_pset_empty.
Dp_hint pset_included_range_all.
Dp_hint pset_included_range.
Dp_hint pset_included_self.
Dp_hint select_store_neq.
Dp_hint select_store_eq.
Dp_hint sub_pointer_shift_right.
Dp_hint sub_pointer_shift_left.
Dp_hint sub_pointer_zero.
Dp_hint sub_pointer_self.
Dp_hint sub_pointer_shift.
Dp_hint same_block_shift_left.
Dp_hint same_block_shift_right.
Dp_hint neq_pointer_bool_def.
Dp_hint eq_pointer_bool_def.
Dp_hint null_pointer.
Dp_hint null_not_valid.
Dp_hint neq_shift.
Dp_hint offset_min_shift.
Dp_hint offset_max_shift.
Dp_hint shift_shift.
Dp_hint shift_zero.
Dp_hint address_shift_le.
Dp_hint address_shift_lt.
Dp_hint address_positive.
Dp_hint address_null.
Dp_hint address_injective.
Dp_hint log_exp.
Dp_hint abs_real_neg.
Dp_hint abs_real_pos.
Dp_hint real_min_is_some.
Dp_hint real_min_is_le.
Dp_hint real_max_is_some.
Dp_hint real_max_is_ge.
Dp_hint neq_real_bool_axiom.
Dp_hint eq_real_bool_axiom.
Dp_hint ge_real_bool_axiom.
Dp_hint gt_real_bool_axiom.
Dp_hint le_real_bool_axiom.
Dp_hint lt_real_bool_axiom.
Dp_hint int_min_is_some.
Dp_hint int_min_is_le.
Dp_hint int_max_is_some.
Dp_hint int_max_is_ge.
Dp_hint abs_int_neg.
Dp_hint abs_int_pos.
Dp_hint neq_int_bool_axiom.
Dp_hint eq_int_bool_axiom.
Dp_hint ge_int_bool_axiom.
Dp_hint gt_int_bool_axiom.
Dp_hint le_int_bool_axiom.
Dp_hint lt_int_bool_axiom.
Dp_hint ite_false.
Dp_hint ite_true.
Dp_hint bool_not_def.
Dp_hint bool_xor_def.
Dp_hint bool_or_def.
Dp_hint bool_and_def.

(*Why type*) Definition char_P: Set.
Admitted.

(*Why type*) Definition int32: Set.
Admitted.

(*Why type*) Definition int8: Set.
Admitted.

(*Why type*) Definition padding: Set.
Admitted.

(*Why type*) Definition void_P: Set.
Admitted.

(*Why logic*) Definition bitvector_of_char_P : (pointer char_P) -> bitvector.
Admitted.

(*Why logic*) Definition char_P_of_bitvector : bitvector -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_char_P_of_char_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_char_P (char_P_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_char_P_of_char_P_of_bitvector.

(*Why logic*) Definition bitvector_of_int32 : int32 -> bitvector.
Admitted.

(*Why logic*) Definition int32_of_bitvector : bitvector -> int32.
Admitted.

(*Why axiom*) Lemma bitvector_of_int32_of_int32_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int32 (int32_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_int32_of_int32_of_bitvector.

(*Why logic*) Definition bitvector_of_int8 : int8 -> bitvector.
Admitted.

(*Why logic*) Definition int8_of_bitvector : bitvector -> int8.
Admitted.

(*Why axiom*) Lemma bitvector_of_int8_of_int8_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int8 (int8_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_int8_of_int8_of_bitvector.

(*Why logic*) Definition bitvector_of_void_P : (pointer void_P) -> bitvector.
Admitted.

(*Why logic*) Definition void_P_of_bitvector : bitvector -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_void_P_of_void_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_void_P (void_P_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_void_P_of_void_P_of_bitvector.

(*Why logic*) Definition char_P_tag : (tag_id char_P).
Admitted.

(*Why axiom*) Lemma char_P_int : (int_of_tag char_P_tag) = 1.
Admitted.
Dp_hint char_P_int.

(*Why axiom*) Lemma char_P_of_bitvector_of_bitvector_of_char_P :
  (forall (x:(pointer char_P)),
   (char_P_of_bitvector (bitvector_of_char_P x)) = x).
Admitted.
Dp_hint char_P_of_bitvector_of_bitvector_of_char_P.

(*Why logic*) Definition char_P_of_pointer_address :
  (pointer unit) -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma char_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer char_P)),
   p = (char_P_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint char_P_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma char_P_parenttag_bottom :
  (parenttag char_P_tag (@bottom_tag char_P)).
Admitted.
Dp_hint char_P_parenttag_bottom.

(*Why axiom*) Lemma char_P_tags :
  (forall (x:(pointer char_P)),
   (forall (char_P_tag_table:(tag_table char_P)),
    (instanceof char_P_tag_table x char_P_tag))).
Admitted.
Dp_hint char_P_tags.

(*Why logic*) Definition integer_of_int32 : int32 -> Z.
Admitted.

(*Why predicate*) Definition eq_int32  (x:int32) (y:int32)
  := (integer_of_int32 x) = (integer_of_int32 y).

(*Why logic*) Definition integer_of_int8 : int8 -> Z.
Admitted.

(*Why predicate*) Definition eq_int8  (x:int8) (y:int8)
  := (integer_of_int8 x) = (integer_of_int8 y).

(*Why logic*) Definition string_length :
  (pointer char_P) -> (memory char_P int8) -> int32.
Admitted.

(*Why axiom*) Lemma has_length :
  (forall (char_P_char_M_c_1_at_L:(memory char_P int8)),
   (forall (c_1:(pointer char_P)),
    (forall (i:Z),
     (0 <= i ->
      ((integer_of_int8 (select char_P_char_M_c_1_at_L (shift c_1 i))) = 0 /\
       (forall (j_0:Z),
        (0 <= j_0 /\ j_0 < i ->
         (integer_of_int8 (select char_P_char_M_c_1_at_L (shift c_1 j_0))) <>
         0)) <->
       (integer_of_int32 (string_length c_1 char_P_char_M_c_1_at_L)) = i))))).
Admitted.
Dp_hint has_length.

(*Why logic*) Definition int32_of_integer : Z -> int32.
Admitted.

(*Why axiom*) Lemma int32_coerce :
  (forall (x:Z),
   ((-2147483648) <= x /\ x <= 2147483647 ->
    (integer_of_int32 (int32_of_integer x)) = x)).
Admitted.
Dp_hint int32_coerce.

(*Why axiom*) Lemma int32_of_bitvector_of_bitvector_of_int32 :
  (forall (x:int32), (eq_int32 (int32_of_bitvector (bitvector_of_int32 x)) x)).
Admitted.
Dp_hint int32_of_bitvector_of_bitvector_of_int32.

(*Why axiom*) Lemma int32_range :
  (forall (x:int32), (-2147483648) <= (integer_of_int32 x) /\
   (integer_of_int32 x) <= 2147483647).
Admitted.
Dp_hint int32_range.

(*Why logic*) Definition int8_of_integer : Z -> int8.
Admitted.

(*Why axiom*) Lemma int8_coerce :
  (forall (x:Z),
   ((-128) <= x /\ x <= 127 -> (integer_of_int8 (int8_of_integer x)) = x)).
Admitted.
Dp_hint int8_coerce.

(*Why axiom*) Lemma int8_of_bitvector_of_bitvector_of_int8 :
  (forall (x:int8), (eq_int8 (int8_of_bitvector (bitvector_of_int8 x)) x)).
Admitted.
Dp_hint int8_of_bitvector_of_bitvector_of_int8.

(*Why axiom*) Lemma int8_range :
  (forall (x:int8), (-128) <= (integer_of_int8 x) /\ (integer_of_int8 x) <=
   127).
Admitted.
Dp_hint int8_range.

(*Why predicate*) Definition left_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a.

(*Why axiom*) Lemma no_string :
  (forall (char_P_char_M_c_1_at_L:(memory char_P int8)),
   (forall (c_0_0:(pointer char_P)),
    ((forall (j:Z),
      (0 <= j ->
       (integer_of_int8 (select char_P_char_M_c_1_at_L (shift c_0_0 j))) <> 0)) ->
     (integer_of_int32 (string_length c_0_0 char_P_char_M_c_1_at_L)) = (-1)))).
Admitted.
Dp_hint no_string.

(*Why axiom*) Lemma pointer_addr_of_char_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (char_P_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_char_P_of_pointer_address.

(*Why logic*) Definition void_P_of_pointer_address :
  (pointer unit) -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_void_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (void_P_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_void_P_of_pointer_address.

(*Why predicate*) Definition right_valid_struct_char_P  (p:(pointer char_P)) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_void_P  (p:(pointer void_P)) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition strict_valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition valid_string  (c_2:(pointer char_P)) (char_P_c_2_2_alloc_table_at_L:(alloc_table char_P)) (char_P_char_M_c_2_2_at_L:(memory char_P int8))
  := (integer_of_int32 (string_length c_2 char_P_char_M_c_2_2_at_L)) >= 0 /\
     (offset_min char_P_c_2_2_alloc_table_at_L c_2) <= 0 /\
     (offset_max char_P_c_2_2_alloc_table_at_L c_2) >=
     (integer_of_int32 (string_length c_2 char_P_char_M_c_2_2_at_L)).

(* Why obligation from file "string.jc", line 60, characters 0-272: *)
(*Why goal*) Lemma sublength : 
  (forall (char_P_c_4_9_alloc_table_at_L:(alloc_table char_P)),
   (forall (char_P_char_M_c_4_9_at_L:(memory char_P int8)),
    (forall (c_4:(pointer char_P)),
     ((valid_string
       c_4 char_P_c_4_9_alloc_table_at_L char_P_char_M_c_4_9_at_L) ->
      (forall (i_0:Z),
       (0 <= i_0 /\
        (forall (j_2:Z),
         (0 <= j_2 /\ j_2 <= i_0 ->
          (integer_of_int8 (select char_P_char_M_c_4_9_at_L (shift c_4 j_2))) <>
          0)) ->
        i_0 < (integer_of_int32 (string_length c_4 char_P_char_M_c_4_9_at_L)))))))).
Proof.
intros alloc memory c validity i [Hle Hneq0].
unfold valid_string in validity.
destruct validity as [Hlength [ _ _]].
generalize (has_length memory c (integer_of_int32(string_length c memory))).
intros H1; destruct (H1 (Zge_le _ _ Hlength)) as [_ Hnil].
destruct (Z_lt_ge_dec i (integer_of_int32 (string_length c memory))) as [Hlt | Hge]; trivial.
clear H1.
absurd (integer_of_int8 (select memory (shift c (integer_of_int32 (string_length c memory)))) = 0);
auto with zarith.
Save.

(*Why axiom*) Lemma sublength_as_axiom :
  (forall (char_P_c_4_9_alloc_table_at_L:(alloc_table char_P)),
   (forall (char_P_char_M_c_4_9_at_L:(memory char_P int8)),
    (forall (c_4:(pointer char_P)),
     ((valid_string
       c_4 char_P_c_4_9_alloc_table_at_L char_P_char_M_c_4_9_at_L) ->
      (forall (i_0:Z),
       (0 <= i_0 /\
        (forall (j_2:Z),
         (0 <= j_2 /\ j_2 <= i_0 ->
          (integer_of_int8 (select char_P_char_M_c_4_9_at_L (shift c_4 j_2))) <>
          0)) ->
        i_0 < (integer_of_int32 (string_length c_4 char_P_char_M_c_4_9_at_L)))))))).
Admitted.
Dp_hint sublength_as_axiom.

(*Why predicate*) Definition valid_bitvector_struct_char_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_void_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(* Why obligation from file "string.jc", line 53, characters 0-206: *)
(*Why goal*) Lemma valid_string_not_zero : 
  (forall (char_P_c_3_8_alloc_table_at_L:(alloc_table char_P)),
   (forall (char_P_char_M_c_3_8_at_L:(memory char_P int8)),
    (forall (c_3:(pointer char_P)),
     ((valid_string
       c_3 char_P_c_3_8_alloc_table_at_L char_P_char_M_c_3_8_at_L) ->
      (forall (j_1:Z),
       (0 <= j_1 /\ j_1 <
        (integer_of_int32 (string_length c_3 char_P_char_M_c_3_8_at_L)) ->
        (integer_of_int8 (select char_P_char_M_c_3_8_at_L (shift c_3 j_1))) <>
        0)))))).
Proof.
intros alloc memory c validity j Hrange.
unfold valid_string in validity.
destruct validity as [Hlength [ _ _]].
destruct (has_length memory c (integer_of_int32 (string_length c memory)) 
 (Zge_le _ _ Hlength)) as [_ Habs].
destruct (Habs (refl_equal (integer_of_int32 (string_length c memory)))); auto.
Save.

(*Why axiom*) Lemma valid_string_not_zero_as_axiom :
  (forall (char_P_c_3_8_alloc_table_at_L:(alloc_table char_P)),
   (forall (char_P_char_M_c_3_8_at_L:(memory char_P int8)),
    (forall (c_3:(pointer char_P)),
     ((valid_string
       c_3 char_P_c_3_8_alloc_table_at_L char_P_char_M_c_3_8_at_L) ->
      (forall (j_1:Z),
       (0 <= j_1 /\ j_1 <
        (integer_of_int32 (string_length c_3 char_P_char_M_c_3_8_at_L)) ->
        (integer_of_int8 (select char_P_char_M_c_3_8_at_L (shift c_3 j_1))) <>
        0)))))).
Admitted.
Dp_hint valid_string_not_zero_as_axiom.

(*Why predicate*) Definition valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why logic*) Definition void_P_tag : (tag_id void_P).
Admitted.

(*Why axiom*) Lemma void_P_int : (int_of_tag void_P_tag) = 1.
Admitted.
Dp_hint void_P_int.

(*Why axiom*) Lemma void_P_of_bitvector_of_bitvector_of_void_P :
  (forall (x:(pointer void_P)),
   (void_P_of_bitvector (bitvector_of_void_P x)) = x).
Admitted.
Dp_hint void_P_of_bitvector_of_bitvector_of_void_P.

(*Why axiom*) Lemma void_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer void_P)),
   p = (void_P_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint void_P_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma void_P_parenttag_bottom :
  (parenttag void_P_tag (@bottom_tag void_P)).
Admitted.
Dp_hint void_P_parenttag_bottom.

(*Why axiom*) Lemma void_P_tags :
  (forall (x:(pointer void_P)),
   (forall (void_P_tag_table:(tag_table void_P)),
    (instanceof void_P_tag_table x void_P_tag))).
Admitted.
Dp_hint void_P_tags.

(* Why obligation from file "string.c", line 54, characters 21-55: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_1 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_73 *)
  (* JC_73 *)
  (((integer_of_int8
     (select char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0)))) <>
    0 -> (integer_of_int32 i_0_0) <
    (integer_of_int32 (string_length src char_P_char_M_src_4)))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 53, characters 21-61: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_2 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_74 *)
  (* JC_74 *)
  (forall (j_4:Z),
   (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0) ->
    (integer_of_int8 (select char_P_char_M_src_4 (shift src j_4))) <> 0)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 52, characters 21-68: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_3 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_75 *)
  (* JC_75 *)
  (forall (j_5:Z),
   (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0) ->
    (integer_of_int8 (select char_P_char_M_dest_5 (shift dest j_5))) =
    (integer_of_int8 (select char_P_char_M_src_4 (shift src j_5))))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 51, characters 21-25: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_4 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_78 *) (* JC_76 *) (* JC_76 *) 0 <= (integer_of_int32 i_0_0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 51, characters 24-45: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_5 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_78 *)
  (* JC_77 *)
  (* JC_77 *) (integer_of_int32 i_0_0) <=
  (integer_of_int32 (string_length src char_P_char_M_src_4)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.jc", line 124, characters 9-1389: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_6 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_80 *)
  (* JC_80 *)
  (not_assigns
   char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5 (
   pset_range (pset_singleton dest) 0 ((integer_of_int32 i_0_0) - 1))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.jc", line 124, characters 9-1389: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_7 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  (* JC_81 *)
  (* JC_81 *)
  (not_assigns
   char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5 (
   pset_range
   (pset_singleton dest) 0 (integer_of_int32
                            (string_length src char_P_char_M_src_4)))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 54, characters 21-55: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_8 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_73 *)
  (* JC_73 *)
  (((integer_of_int8
     (select char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_1)))) <>
    0 -> (integer_of_int32 i_0_0_1) <
    (integer_of_int32 (string_length src char_P_char_M_src_4)))).
Proof.
intuition.
apply (sublength char_P_src_4_alloc_table); auto.
rewrite HW_15.
rewrite HW_14.
split; auto with zarith.
intros j Hneq.
destruct Hneq as [Hle Hge].
destruct (Z_le_lt_eq_dec _ _ Hge) as [Hlt | Heq].
cut (j <= integer_of_int32 i_0_0_0); auto with zarith.
clear Hlt Hge; intros Hge;
destruct (Z_le_lt_eq_dec _ _ Hge) as [Hlt | Heq].
unfold not; intros Habs; apply (H4 j); auto.
rewrite Heq.
rewrite HW_10 in HW_11; auto.
rewrite HW_15 in H9; rewrite HW_14 in H9; rewrite Heq; auto. 
Save.

(* Why obligation from file "string.c", line 53, characters 21-61: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_9 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_74 *)
  (* JC_74 *)
  (forall (j_4:Z),
   (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_1) ->
    (integer_of_int8 (select char_P_char_M_src_4 (shift src j_4))) <> 0)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 52, characters 21-68: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_10 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_75 *)
  (* JC_75 *)
  (forall (j_5:Z),
   (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_1) ->
    (integer_of_int8 (select char_P_char_M_dest_5_1 (shift dest j_5))) =
    (integer_of_int8 (select char_P_char_M_src_4 (shift src j_5))))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 51, characters 21-25: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_11 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_78 *) (* JC_76 *) (* JC_76 *) 0 <= (integer_of_int32 i_0_0_1).
Proof.
ergo.
Save.

(* Why obligation from file "string.c", line 51, characters 24-45: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_12 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_78 *)
  (* JC_77 *)
  (* JC_77 *) (integer_of_int32 i_0_0_1) <=
  (integer_of_int32 (string_length src char_P_char_M_src_4)).
Proof.
ergo.
Save.

(* Why obligation from file "string.jc", line 124, characters 9-1389: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_13 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_80 *)
  (* JC_80 *)
  (not_assigns
   char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_1 (
   pset_range (pset_singleton dest) 0 ((integer_of_int32 i_0_0_1) - 1))).
Proof.
intuition.
rewrite HW_13; clear HW_13 char_P_char_M_dest_5_1.
rewrite HW_15; clear HW_15 i_0_0_1.
rewrite HW_14; clear HW_14 result2.
unfold not_assigns.
intros p; destruct 1 as [Hvalid Hrange].
unfold not_assigns in H2.
transitivity (select char_P_char_M_dest_5_0 p).
apply select_store_neq.
unfold not.
intros Habs.
rewrite <- Habs in Hrange.
apply Hrange.
clear Habs Hrange Hvalid p.
destruct (in_pset_range _  (shift dest (integer_of_int32 i_0_0_0))
                (pset_singleton dest) 0 (integer_of_int32 i_0_0_0 + 1 - 1)) as [ _ Hinpset].
apply Hinpset; clear Hinpset.
exists (integer_of_int32 i_0_0_0); exists dest; split; auto.
split; auto with zarith.
split; auto.
destruct (in_pset_singleton _ dest dest); auto.
apply H2; split; trivial.
unfold not; intros Hinpset.
apply Hrange.
destruct (in_pset_range _  p
                (pset_singleton dest) 0 (integer_of_int32 i_0_0_0 + 1 - 1)) as [ _ Hinpset2].
apply Hinpset2; clear Hinpset2.
destruct (in_pset_range _ p (pset_singleton dest) 0
               (integer_of_int32 i_0_0_0 - 1)) as [Hex _].
destruct (Hex Hinpset) as [ i [ r [ Hle [ Hge [ Hin_ps Heq]]]]].
exists i; exists r; auto with zarith.
Save.

(* Why obligation from file "string.jc", line 124, characters 9-1389: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_14 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (integer_of_int8 result0) <> 0),
  forall (result1: int8),
  forall (HW_12: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_15: i_0_0_1 = result2),
  (* JC_81 *)
  (* JC_81 *)
  (not_assigns
   char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_1 (
   pset_range
   (pset_singleton dest) 0 (integer_of_int32
                            (string_length src char_P_char_M_src_4)))).
Proof.
intuition.
apply (not_assigns_trans _  _ char_P_dest_5_alloc_table char_P_char_M_dest_5
             char_P_char_M_dest_5_0 char_P_char_M_dest_5_1 
(pset_range (pset_singleton dest) 0
     (integer_of_int32
        (string_length src char_P_char_M_src_4)))).
assumption.
rewrite HW_13; clear HW_13 char_P_char_M_dest_5_1.
clear HW_15 i_0_0_1 HW_14 result2.
unfold not_assigns.
intros p; destruct 1 as [Hvalid Hrange].
apply select_store_neq; unfold not; intros Habs.
apply Hrange.
rewrite <- Habs; clear Habs.
destruct (in_pset_range _ (shift dest (integer_of_int32 i_0_0_0)) (pset_singleton dest) 0
                 (integer_of_int32 (string_length src char_P_char_M_src_4)))
as [_ Hinpset].
apply Hinpset; clear Hinpset; exists (integer_of_int32 i_0_0_0); exists dest; split.
assumption.
split; try assumption.
split; [eapply in_pset_singleton; reflexivity | reflexivity].
Save.

(* Why obligation from file "string.c", line 58, characters 13-36: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_15 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (integer_of_int8 result0) = 0),
  (* JC_82 *)
  (* JC_82 *) (integer_of_int32 i_0_0_0) =
  (integer_of_int32 (string_length src char_P_char_M_src_4)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 60, characters 13-37: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_16 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (integer_of_int8 result0) = 0),
  forall (HW_20: (* JC_82 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32 (string_length src char_P_char_M_src_4))),
  forall (result1: int8),
  forall (HW_21: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_22: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  (* JC_83 *)
  (* JC_83 *) (integer_of_int32 i_0_0_0) =
  (integer_of_int32 (string_length dest char_P_char_M_dest_5_1)).
Proof.
admit. (*ergo succeeds when called outside of coq*)
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 45, characters 12-30: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_17 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (integer_of_int8 result0) = 0),
  forall (HW_20: (* JC_82 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32 (string_length src char_P_char_M_src_4))),
  forall (result1: int8),
  forall (HW_21: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_22: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (HW_23: (* JC_83 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32
                  (string_length dest char_P_char_M_dest_5_1))),
  (* JC_45 *)
  (* JC_43 *)
  (* JC_41 *)
  (* JC_41 *)
  (valid_string dest char_P_dest_5_alloc_table char_P_char_M_dest_5_1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 46, characters 12-77: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_18 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (integer_of_int8 result0) = 0),
  forall (HW_20: (* JC_82 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32 (string_length src char_P_char_M_src_4))),
  forall (result1: int8),
  forall (HW_21: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_22: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (HW_23: (* JC_83 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32
                  (string_length dest char_P_char_M_dest_5_1))),
  (* JC_45 *)
  (* JC_43 *)
  (* JC_42 *)
  (* JC_42 *)
  (forall (i_1_0:Z),
   (0 <= i_1_0 /\ i_1_0 <=
    (integer_of_int32 (string_length src char_P_char_M_src_4)) ->
    (integer_of_int8 (select char_P_char_M_src_4 (shift src i_1_0))) =
    (integer_of_int8 (select char_P_char_M_dest_5_1 (shift dest i_1_0))))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 49, characters 5-12: *)
(*Why goal*) Lemma str_cpy_ensures_default_po_19 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_8: ((* JC_73 *)
                 (((integer_of_int8
                    (select
                     char_P_char_M_src_4 (shift
                                          src (integer_of_int32 i_0_0_0)))) <>
                   0 -> (integer_of_int32 i_0_0_0) <
                   (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_74 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_75 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5_0 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_78 *) ((* JC_76 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_77 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_80 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 ((integer_of_int32 i_0_0_0) - 1))) /\
                (* JC_81 *)
                (not_assigns
                 char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_0 (
                 pset_range
                 (pset_singleton dest) 0 (integer_of_int32
                                          (string_length
                                           src char_P_char_M_src_4))))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_19: (integer_of_int8 result0) = 0),
  forall (HW_20: (* JC_82 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32 (string_length src char_P_char_M_src_4))),
  forall (result1: int8),
  forall (HW_21: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (char_P_char_M_dest_5_1: (memory char_P int8)),
  forall (HW_22: char_P_char_M_dest_5_1 =
                 (store
                  char_P_char_M_dest_5_0 (shift
                                          dest (integer_of_int32 i_0_0_0)) result1)),
  forall (HW_23: (* JC_83 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32
                  (string_length dest char_P_char_M_dest_5_1))),
  (* JC_45 *)
  (* JC_44 *)
  (* JC_44 *)
  (not_assigns
   char_P_dest_5_alloc_table char_P_char_M_dest_5 char_P_char_M_dest_5_1 (
   pset_range
   (pset_singleton dest) 0 (integer_of_int32
                            (string_length src char_P_char_M_src_4)))).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 57, characters 2-7: *)
(*Why goal*) Lemma str_cpy_safety_po_1 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  (offset_min char_P_src_4_alloc_table src) <= (integer_of_int32 i_0_0_0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 57, characters 2-7: *)
(*Why goal*) Lemma str_cpy_safety_po_2 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  (integer_of_int32 i_0_0_0) <= (offset_max char_P_src_4_alloc_table src).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.jc", line 146, characters 24-296: *)
(*Why goal*) Lemma str_cpy_safety_po_3 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (HW_7: (offset_min char_P_src_4_alloc_table src) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max char_P_src_4_alloc_table src)),
  forall (result0: int8),
  forall (HW_8: result0 =
                (select
                 char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_9: (integer_of_int8 result0) <> 0),
  forall (HW_10: (offset_min char_P_src_4_alloc_table src) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_src_4_alloc_table src)),
  forall (result1: int8),
  forall (HW_11: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  (offset_min char_P_dest_5_alloc_table dest) <= (integer_of_int32 i_0_0_0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.jc", line 146, characters 24-296: *)
(*Why goal*) Lemma str_cpy_safety_po_4 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (HW_7: (offset_min char_P_src_4_alloc_table src) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max char_P_src_4_alloc_table src)),
  forall (result0: int8),
  forall (HW_8: result0 =
                (select
                 char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_9: (integer_of_int8 result0) <> 0),
  forall (HW_10: (offset_min char_P_src_4_alloc_table src) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_src_4_alloc_table src)),
  forall (result1: int8),
  forall (HW_11: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  (integer_of_int32 i_0_0_0) <= (offset_max char_P_dest_5_alloc_table dest).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 57, characters 34-35: *)
(*Why goal*) Lemma str_cpy_safety_po_5 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (HW_7: (offset_min char_P_src_4_alloc_table src) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max char_P_src_4_alloc_table src)),
  forall (result0: int8),
  forall (HW_8: result0 =
                (select
                 char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_9: (integer_of_int8 result0) <> 0),
  forall (HW_10: (offset_min char_P_src_4_alloc_table src) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_src_4_alloc_table src)),
  forall (result1: int8),
  forall (HW_11: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_12: (offset_min char_P_dest_5_alloc_table dest) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_dest_5_alloc_table dest)),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_0 =
                 (store
                  char_P_char_M_dest_5 (shift dest (integer_of_int32 i_0_0_0)) result1)),
  (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 57, characters 34-35: *)
(*Why goal*) Lemma str_cpy_safety_po_6 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (HW_7: (offset_min char_P_src_4_alloc_table src) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max char_P_src_4_alloc_table src)),
  forall (result0: int8),
  forall (HW_8: result0 =
                (select
                 char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_9: (integer_of_int8 result0) <> 0),
  forall (HW_10: (offset_min char_P_src_4_alloc_table src) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_src_4_alloc_table src)),
  forall (result1: int8),
  forall (HW_11: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_12: (offset_min char_P_dest_5_alloc_table dest) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_dest_5_alloc_table dest)),
  forall (char_P_char_M_dest_5_0: (memory char_P int8)),
  forall (HW_13: char_P_char_M_dest_5_0 =
                 (store
                  char_P_char_M_dest_5 (shift dest (integer_of_int32 i_0_0_0)) result1)),
  ((integer_of_int32 i_0_0_0) + 1) <= 2147483647.
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.jc", line 160, characters 15-220: *)
(*Why goal*) Lemma str_cpy_safety_po_7 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (HW_7: (offset_min char_P_src_4_alloc_table src) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max char_P_src_4_alloc_table src)),
  forall (result0: int8),
  forall (HW_8: result0 =
                (select
                 char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_17: (integer_of_int8 result0) = 0),
  forall (HW_18: (* JC_68 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32 (string_length src char_P_char_M_src_4))),
  forall (HW_19: (offset_min char_P_src_4_alloc_table src) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_src_4_alloc_table src)),
  forall (result1: int8),
  forall (HW_20: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  (offset_min char_P_dest_5_alloc_table dest) <= (integer_of_int32 i_0_0_0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.jc", line 160, characters 15-220: *)
(*Why goal*) Lemma str_cpy_safety_po_8 : 
  forall (src: (pointer char_P)),
  forall (dest: (pointer char_P)),
  forall (char_P_src_4_alloc_table: (alloc_table char_P)),
  forall (char_P_dest_5_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_src_4: (memory char_P int8)),
  forall (HW_1: (* JC_39 *)
                ((* JC_36 *)
                 (valid_string
                  src char_P_src_4_alloc_table char_P_char_M_src_4) /\
                (* JC_37 *) (offset_min char_P_dest_5_alloc_table dest) <= 0 /\
                (* JC_38 *) (offset_max char_P_dest_5_alloc_table dest) >=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = 0),
  forall (i_0_0: int32),
  forall (HW_4: i_0_0 = result),
  forall (char_P_char_M_dest_5: (memory char_P int8)),
  forall (i_0_0_0: int32),
  forall (HW_5: (* JC_60 *) True),
  forall (HW_6: (* JC_53 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))) <>
                  0 -> (integer_of_int32 i_0_0_0) <
                  (integer_of_int32 (string_length src char_P_char_M_src_4)))) /\
                (* JC_54 *)
                (forall (j_4:Z),
                 (0 <= j_4 /\ j_4 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_4))) <>
                  0)) /\
                (* JC_55 *)
                (forall (j_5:Z),
                 (0 <= j_5 /\ j_5 < (integer_of_int32 i_0_0_0) ->
                  (integer_of_int8
                   (select char_P_char_M_dest_5 (shift dest j_5))) =
                  (integer_of_int8
                   (select char_P_char_M_src_4 (shift src j_5))))) /\
                (* JC_58 *) ((* JC_56 *) 0 <= (integer_of_int32 i_0_0_0) /\
                (* JC_57 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 (string_length src char_P_char_M_src_4)))),
  forall (HW_7: (offset_min char_P_src_4_alloc_table src) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max char_P_src_4_alloc_table src)),
  forall (result0: int8),
  forall (HW_8: result0 =
                (select
                 char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  forall (HW_17: (integer_of_int8 result0) = 0),
  forall (HW_18: (* JC_68 *) (integer_of_int32 i_0_0_0) =
                 (integer_of_int32 (string_length src char_P_char_M_src_4))),
  forall (HW_19: (offset_min char_P_src_4_alloc_table src) <=
                 (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                 (offset_max char_P_src_4_alloc_table src)),
  forall (result1: int8),
  forall (HW_20: result1 =
                 (select
                  char_P_char_M_src_4 (shift src (integer_of_int32 i_0_0_0)))),
  (integer_of_int32 i_0_0_0) <= (offset_max char_P_dest_5_alloc_table dest).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 37, characters 21-54: *)
(*Why goal*) Lemma str_len_ensures_default_po_1 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (HW_6: (integer_of_int8
                 (select char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1)))) <>
                0),
  (* JC_23 *) 0 <= (integer_of_int32 i_1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 37, characters 21-54: *)
(*Why goal*) Lemma str_len_ensures_default_po_2 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (HW_6: (integer_of_int8
                 (select char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1)))) <>
                0),
  (* JC_23 *) (integer_of_int32 i_1) <
  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 36, characters 21-25: *)
(*Why goal*) Lemma str_len_ensures_default_po_3 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  (* JC_26 *) (* JC_24 *) (* JC_24 *) 0 <= (integer_of_int32 i_1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 36, characters 24-43: *)
(*Why goal*) Lemma str_len_ensures_default_po_4 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  (* JC_26 *)
  (* JC_25 *)
  (* JC_25 *) (integer_of_int32 i_1) <=
  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 35, characters 21-59: *)
(*Why goal*) Lemma str_len_ensures_default_po_5 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  (* JC_27 *)
  (* JC_27 *)
  (forall (j_3:Z),
   (0 <= j_3 /\ j_3 < (integer_of_int32 i_1) ->
    (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <> 0)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 37, characters 21-54: *)
(*Why goal*) Lemma str_len_ensures_default_po_6 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_8: (* JC_23 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_26 *) ((* JC_24 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_25 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_27 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (i_1_1: int32),
  forall (HW_14: i_1_1 = result2),
  forall (HW_15: (integer_of_int8
                  (select
                   char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_1)))) <>
                 0),
  (* JC_23 *) 0 <= (integer_of_int32 i_1_1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 37, characters 21-54: *)
(*Why goal*) Lemma str_len_ensures_default_po_7 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_8: (* JC_23 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_26 *) ((* JC_24 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_25 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_27 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (i_1_1: int32),
  forall (HW_14: i_1_1 = result2),
  forall (HW_15: (integer_of_int8
                  (select
                   char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_1)))) <>
                 0),
  (* JC_23 *) (integer_of_int32 i_1_1) <
  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 36, characters 21-25: *)
(*Why goal*) Lemma str_len_ensures_default_po_8 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_8: (* JC_23 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_26 *) ((* JC_24 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_25 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_27 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (i_1_1: int32),
  forall (HW_14: i_1_1 = result2),
  (* JC_26 *) (* JC_24 *) (* JC_24 *) 0 <= (integer_of_int32 i_1_1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 36, characters 24-43: *)
(*Why goal*) Lemma str_len_ensures_default_po_9 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_8: (* JC_23 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_26 *) ((* JC_24 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_25 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_27 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (i_1_1: int32),
  forall (HW_14: i_1_1 = result2),
  (* JC_26 *)
  (* JC_25 *)
  (* JC_25 *) (integer_of_int32 i_1_1) <=
  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 35, characters 21-59: *)
(*Why goal*) Lemma str_len_ensures_default_po_10 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_8: (* JC_23 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_26 *) ((* JC_24 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_25 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_27 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (i_1_1: int32),
  forall (HW_14: i_1_1 = result2),
  (* JC_27 *)
  (* JC_27 *)
  (forall (j_3:Z),
   (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_1) ->
    (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <> 0)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 30, characters 10-37: *)
(*Why goal*) Lemma str_len_ensures_default_po_11 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: true = true /\
                (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_8: (* JC_23 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_26 *) ((* JC_24 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_25 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_27 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (result0: int8),
  forall (HW_10: result0 =
                 (select
                  char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_17: (integer_of_int32 result1) = 0),
  forall (why__return: int32),
  forall (HW_18: why__return = i_1_0),
  (* JC_5 *) (integer_of_int32 why__return) =
  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 39, characters 2-7: *)
(*Why goal*) Lemma str_len_safety_po_1 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_6: (* JC_17 *) True),
  forall (HW_7: (* JC_11 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_14 *) ((* JC_12 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_13 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_15 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  (offset_min char_P_c_3_alloc_table c_0) <= (integer_of_int32 i_1_0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 39, characters 2-7: *)
(*Why goal*) Lemma str_len_safety_po_2 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_6: (* JC_17 *) True),
  forall (HW_7: (* JC_11 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_14 *) ((* JC_12 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_13 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_15 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  (integer_of_int32 i_1_0) <= (offset_max char_P_c_3_alloc_table c_0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 39, characters 2-7: *)
(*Why goal*) Lemma str_len_safety_po_3 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_6: (* JC_17 *) True),
  forall (HW_7: (* JC_11 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_14 *) ((* JC_12 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_13 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_15 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (HW_8: (offset_min char_P_c_3_alloc_table c_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max char_P_c_3_alloc_table c_0)),
  forall (result0: int8),
  forall (HW_9: result0 =
                (select
                 char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  (-2147483648) <= (integer_of_int8 result0).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 39, characters 2-7: *)
(*Why goal*) Lemma str_len_safety_po_4 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_6: (* JC_17 *) True),
  forall (HW_7: (* JC_11 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_14 *) ((* JC_12 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_13 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_15 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (HW_8: (offset_min char_P_c_3_alloc_table c_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max char_P_c_3_alloc_table c_0)),
  forall (result0: int8),
  forall (HW_9: result0 =
                (select
                 char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  (integer_of_int8 result0) <= 2147483647.
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 39, characters 18-19: *)
(*Why goal*) Lemma str_len_safety_po_5 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_6: (* JC_17 *) True),
  forall (HW_7: (* JC_11 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_14 *) ((* JC_12 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_13 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_15 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (HW_8: (offset_min char_P_c_3_alloc_table c_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max char_P_c_3_alloc_table c_0)),
  forall (result0: int8),
  forall (HW_9: result0 =
                (select
                 char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (HW_10: (-2147483648) <= (integer_of_int8 result0) /\
                 (integer_of_int8 result0) <= 2147483647),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  (-2147483648) <= ((integer_of_int32 i_1_0) + 1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "string.c", line 39, characters 18-19: *)
(*Why goal*) Lemma str_len_safety_po_6 : 
  forall (c_0: (pointer char_P)),
  forall (char_P_c_3_alloc_table: (alloc_table char_P)),
  forall (char_P_char_M_c_3: (memory char_P int8)),
  forall (HW_1: (* JC_3 *)
                (valid_string c_0 char_P_c_3_alloc_table char_P_char_M_c_3)),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 0),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (HW_6: (* JC_17 *) True),
  forall (HW_7: (* JC_11 *)
                (((integer_of_int8
                   (select
                    char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))) <>
                  0 -> 0 <= (integer_of_int32 i_1_0) /\
                  (integer_of_int32 i_1_0) <
                  (integer_of_int32 (string_length c_0 char_P_char_M_c_3)))) /\
                (* JC_14 *) ((* JC_12 *) 0 <= (integer_of_int32 i_1_0) /\
                (* JC_13 *) (integer_of_int32 i_1_0) <=
                (integer_of_int32 (string_length c_0 char_P_char_M_c_3))) /\
                (* JC_15 *)
                (forall (j_3:Z),
                 (0 <= j_3 /\ j_3 < (integer_of_int32 i_1_0) ->
                  (integer_of_int8 (select char_P_char_M_c_3 (shift c_0 j_3))) <>
                  0))),
  forall (HW_8: (offset_min char_P_c_3_alloc_table c_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max char_P_c_3_alloc_table c_0)),
  forall (result0: int8),
  forall (HW_9: result0 =
                (select
                 char_P_char_M_c_3 (shift c_0 (integer_of_int32 i_1_0)))),
  forall (HW_10: (-2147483648) <= (integer_of_int8 result0) /\
                 (integer_of_int8 result0) <= 2147483647),
  forall (result1: int32),
  forall (HW_11: (integer_of_int32 result1) = (integer_of_int8 result0)),
  forall (HW_12: (integer_of_int32 result1) <> 0),
  ((integer_of_int32 i_1_0) + 1) <= 2147483647.
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

