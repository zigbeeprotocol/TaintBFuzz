(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export jessie_why.
Dp_timeout 60.
Dp_hint concat_select_bytes.
Dp_hint concat_store_bytes_down.
Dp_hint concat_store_bytes_up.
Dp_hint shift_select_bytes.
Dp_hint shift_store_bytes.
Dp_hint select_store_neq_bytes.
Dp_hint select_store_eq_bytes.
Dp_hint concat_extract_bytes.
Dp_hint concat_replace_bytes_down.
Dp_hint concat_replace_bytes_up.
Dp_hint select_store_neq_union.
Dp_hint select_store_eq_union.
Dp_hint offset_max_bytes_def.
Dp_hint offset_min_bytes_def.
Dp_hint alloc_extends_except_offset_max.
Dp_hint alloc_extends_except_offset_min.
Dp_hint alloc_extends_not_assigns_empty.
Dp_hint alloc_extends_offset_max.
Dp_hint alloc_extends_offset_min.
Dp_hint lsr_of_lsl_identity_on_positive.
Dp_hint lsl_of_lsr_decreases_on_positive.
Dp_hint asr_lsr_same_on_positive.
Dp_hint asr_decreases_on_positive.
Dp_hint asr_positive_on_positive.
Dp_hint lsr_left_positive_decreases.
Dp_hint lsr_left_positive_returns_positive.
Dp_hint lsl_left_positive_monotone.
Dp_hint lsl_left_positive_returns_positive.
Dp_hint bw_and_not_null.
Dp_hint root_subtag.
Dp_hint bottom_tag_axiom.
Dp_hint downcast_instanceof.
Dp_hint subtag_parent.
Dp_hint subtag_refl.
Dp_hint subtag_bool_def.
Dp_hint full_separated_shift4.
Dp_hint full_separated_shift3.
Dp_hint full_separated_shift2.
Dp_hint full_separated_shift1.
Dp_hint not_assigns_trans.
Dp_hint not_assigns_refl.
Dp_hint valid_pset_union.
Dp_hint valid_pset_range.
Dp_hint valid_pset_deref.
Dp_hint valid_pset_singleton.
Dp_hint valid_pset_empty.
Dp_hint in_pset_union.
Dp_hint in_pset_range_right.
Dp_hint in_pset_range_left.
Dp_hint in_pset_range.
Dp_hint in_pset_all.
Dp_hint in_pset_deref.
Dp_hint in_pset_singleton.
Dp_hint in_pset_empty.
Dp_hint pset_included_range_all.
Dp_hint pset_included_range.
Dp_hint pset_included_self.
Dp_hint select_store_neq.
Dp_hint select_store_eq.
Dp_hint sub_pointer_shift_right.
Dp_hint sub_pointer_shift_left.
Dp_hint sub_pointer_zero.
Dp_hint sub_pointer_self.
Dp_hint sub_pointer_shift.
Dp_hint same_block_shift_left.
Dp_hint same_block_shift_right.
Dp_hint neq_pointer_bool_def.
Dp_hint eq_pointer_bool_def.
Dp_hint null_pointer.
Dp_hint null_not_valid.
Dp_hint neq_shift.
Dp_hint offset_min_shift.
Dp_hint offset_max_shift.
Dp_hint shift_shift.
Dp_hint shift_zero.
Dp_hint address_shift_le.
Dp_hint address_shift_lt.
Dp_hint address_null.
Dp_hint address_injective.
Dp_hint abs_minus.
Dp_hint prod_pos.
Dp_hint log_exp.
Dp_hint abs_real_neg.
Dp_hint abs_real_pos.
Dp_hint real_min_is_some.
Dp_hint real_min_is_le.
Dp_hint real_max_is_some.
Dp_hint real_max_is_ge.
Dp_hint neq_real_bool_axiom.
Dp_hint eq_real_bool_axiom.
Dp_hint ge_real_bool_axiom.
Dp_hint gt_real_bool_axiom.
Dp_hint le_real_bool_axiom.
Dp_hint lt_real_bool_axiom.
Dp_hint int_min_is_some.
Dp_hint int_min_is_le.
Dp_hint int_max_is_some.
Dp_hint int_max_is_ge.
Dp_hint abs_int_neg.
Dp_hint abs_int_pos.
Dp_hint neq_int_bool_axiom.
Dp_hint eq_int_bool_axiom.
Dp_hint ge_int_bool_axiom.
Dp_hint gt_int_bool_axiom.
Dp_hint le_int_bool_axiom.
Dp_hint lt_int_bool_axiom.
Dp_hint ite_false.
Dp_hint ite_true.
Dp_hint bool_not_def.
Dp_hint bool_xor_def.
Dp_hint bool_or_def.
Dp_hint bool_and_def.

(*Why type*) Definition char_P: Set.
Admitted.

(*Why type*) Definition int32: Set.
Admitted.

(*Why type*) Definition int8: Set.
Admitted.

(*Why type*) Definition int_P: Set.
Admitted.

(*Why type*) Definition padding: Set.
Admitted.

(*Why type*) Definition void_P: Set.
Admitted.

(*Why logic*) Definition bitvector_of_char_P : (pointer char_P) -> bitvector.
Admitted.

(*Why logic*) Definition char_P_of_bitvector : bitvector -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_char_P_of_char_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_char_P (char_P_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_char_P_of_char_P_of_bitvector.

(*Why logic*) Definition bitvector_of_int32 : int32 -> bitvector.
Admitted.

(*Why logic*) Definition int32_of_bitvector : bitvector -> int32.
Admitted.

(*Why axiom*) Lemma bitvector_of_int32_of_int32_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int32 (int32_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_int32_of_int32_of_bitvector.

(*Why logic*) Definition bitvector_of_int8 : int8 -> bitvector.
Admitted.

(*Why logic*) Definition int8_of_bitvector : bitvector -> int8.
Admitted.

(*Why axiom*) Lemma bitvector_of_int8_of_int8_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int8 (int8_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_int8_of_int8_of_bitvector.

(*Why logic*) Definition bitvector_of_int_P : (pointer int_P) -> bitvector.
Admitted.

(*Why logic*) Definition int_P_of_bitvector : bitvector -> (pointer int_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_int_P_of_int_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int_P (int_P_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_int_P_of_int_P_of_bitvector.

(*Why logic*) Definition bitvector_of_void_P : (pointer void_P) -> bitvector.
Admitted.

(*Why logic*) Definition void_P_of_bitvector : bitvector -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_void_P_of_void_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_void_P (void_P_of_bitvector x)) = x).
Admitted.
Dp_hint bitvector_of_void_P_of_void_P_of_bitvector.

(*Why logic*) Definition char_P_tag : (tag_id char_P).
Admitted.

(*Why axiom*) Lemma char_P_int : (int_of_tag char_P_tag) = 1.
Admitted.
Dp_hint char_P_int.

(*Why axiom*) Lemma char_P_of_bitvector_of_bitvector_of_char_P :
  (forall (x:(pointer char_P)),
   (char_P_of_bitvector (bitvector_of_char_P x)) = x).
Admitted.
Dp_hint char_P_of_bitvector_of_bitvector_of_char_P.

(*Why logic*) Definition char_P_of_pointer_address :
  (pointer unit) -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma char_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer char_P)),
   p = (char_P_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint char_P_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma char_P_parenttag_bottom :
  (parenttag char_P_tag (@bottom_tag char_P)).
Admitted.
Dp_hint char_P_parenttag_bottom.

(*Why axiom*) Lemma char_P_tags :
  (forall (x:(pointer char_P)),
   (forall (char_P_tag_table:(tag_table char_P)),
    (instanceof char_P_tag_table x char_P_tag))).
Admitted.
Dp_hint char_P_tags.

(*Why logic*) Definition integer_of_int32 : int32 -> Z.
Admitted.

(*Why predicate*) Definition eq_int32  (x:int32) (y:int32)
  := (integer_of_int32 x) = (integer_of_int32 y).

(*Why logic*) Definition integer_of_int8 : int8 -> Z.
Admitted.

(*Why predicate*) Definition eq_int8  (x:int8) (y:int8)
  := (integer_of_int8 x) = (integer_of_int8 y).

(*Why logic*) Definition int32_of_integer : Z -> int32.
Admitted.

(*Why axiom*) Lemma int32_coerce :
  (forall (x:Z),
   ((-2147483648) <= x /\ x <= 2147483647 ->
    (integer_of_int32 (int32_of_integer x)) = x)).
Admitted.
Dp_hint int32_coerce.

(*Why axiom*) Lemma int32_of_bitvector_of_bitvector_of_int32 :
  (forall (x:int32), (eq_int32 (int32_of_bitvector (bitvector_of_int32 x)) x)).
Admitted.
Dp_hint int32_of_bitvector_of_bitvector_of_int32.

(*Why axiom*) Lemma int32_range :
  (forall (x:int32), (-2147483648) <= (integer_of_int32 x) /\
   (integer_of_int32 x) <= 2147483647).
Admitted.
Dp_hint int32_range.

(*Why logic*) Definition int8_of_integer : Z -> int8.
Admitted.

(*Why axiom*) Lemma int8_coerce :
  (forall (x:Z),
   ((-128) <= x /\ x <= 127 -> (integer_of_int8 (int8_of_integer x)) = x)).
Admitted.
Dp_hint int8_coerce.

(*Why axiom*) Lemma int8_of_bitvector_of_bitvector_of_int8 :
  (forall (x:int8), (eq_int8 (int8_of_bitvector (bitvector_of_int8 x)) x)).
Admitted.
Dp_hint int8_of_bitvector_of_bitvector_of_int8.

(*Why axiom*) Lemma int8_range :
  (forall (x:int8), (-128) <= (integer_of_int8 x) /\ (integer_of_int8 x) <=
   127).
Admitted.
Dp_hint int8_range.

(*Why logic*) Definition int_P_tag : (tag_id int_P).
Admitted.

(*Why axiom*) Lemma int_P_int : (int_of_tag int_P_tag) = 1.
Admitted.
Dp_hint int_P_int.

(*Why axiom*) Lemma int_P_of_bitvector_of_bitvector_of_int_P :
  (forall (x:(pointer int_P)),
   (int_P_of_bitvector (bitvector_of_int_P x)) = x).
Admitted.
Dp_hint int_P_of_bitvector_of_bitvector_of_int_P.

(*Why logic*) Definition int_P_of_pointer_address :
  (pointer unit) -> (pointer int_P).
Admitted.

(*Why axiom*) Lemma int_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer int_P)),
   p = (int_P_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint int_P_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma int_P_parenttag_bottom :
  (parenttag int_P_tag (@bottom_tag int_P)).
Admitted.
Dp_hint int_P_parenttag_bottom.

(*Why axiom*) Lemma int_P_tags :
  (forall (x:(pointer int_P)),
   (forall (int_P_tag_table:(tag_table int_P)),
    (instanceof int_P_tag_table x int_P_tag))).
Admitted.
Dp_hint int_P_tags.

(*Why predicate*) Definition left_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_int_P  (p:(pointer int_P)) (a:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a.

(*Why logic*) Definition nb_occ :
  (pointer int_P) -> Z -> Z -> Z -> (memory int_P int32) -> Z.
Admitted.

(*Why axiom*) Lemma nb_occ_0 :
  (forall (int_P_int_M_arr_1_at_L:(memory int_P int32)),
   (forall (arr_0_0:(pointer int_P)),
    (forall (low_0:Z),
     (forall (high_0:Z),
      (forall (val_0_0:Z),
       (high_0 < low_0 ->
        (nb_occ arr_0_0 low_0 high_0 val_0_0 int_P_int_M_arr_1_at_L) = 0)))))).
Admitted.
Dp_hint nb_occ_0.

(*Why axiom*) Lemma nb_occ_eq :
  (forall (int_P_int_M_arr_1_at_L:(memory int_P int32)),
   (forall (low_1:Z),
    (forall (high_1:Z),
     (forall (arr_1_0:(pointer int_P)),
      (forall (v:Z),
       (low_1 <= high_1 /\ v =
        (integer_of_int32
         (select int_P_int_M_arr_1_at_L (shift arr_1_0 high_1))) ->
        (nb_occ arr_1_0 low_1 high_1 v int_P_int_M_arr_1_at_L) =
        ((nb_occ arr_1_0 low_1 (high_1 - 1) v int_P_int_M_arr_1_at_L) + 1))))))).
Admitted.
Dp_hint nb_occ_eq.

(*Why axiom*) Lemma nb_occ_neq :
  (forall (int_P_int_M_arr_1_at_L:(memory int_P int32)),
   (forall (low_2:Z),
    (forall (high_2:Z),
     (forall (arr_2:(pointer int_P)),
      (forall (v_0:Z),
       (low_2 <= high_2 /\ v_0 <>
        (integer_of_int32
         (select int_P_int_M_arr_1_at_L (shift arr_2 high_2))) ->
        (nb_occ arr_2 low_2 high_2 v_0 int_P_int_M_arr_1_at_L) =
        (nb_occ arr_2 low_2 (high_2 - 1) v_0 int_P_int_M_arr_1_at_L))))))).
Admitted.
Dp_hint nb_occ_neq.

(* Why obligation from file "insert_sort_proved.jc", line 103, characters 0-580: *)
(*Why goal*) Lemma nb_occ_same : 
  (forall (int_P_int_M_arr_6_11_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_6_11_at_L1:(memory int_P int32)),
    (forall (low1:Z),
     (forall (low2:Z),
      (forall (high1:Z),
       (forall (high2:Z),
        (forall (arr_6:(pointer int_P)),
         (forall (v_2:Z),
          ((high1 - low1) = (high2 - low2) /\
           (forall (i:Z),
            (0 <= i /\ i <= (high1 - low1) ->
             (integer_of_int32
              (select int_P_int_M_arr_6_11_at_L1 (shift arr_6 (low1 + i)))) =
             (integer_of_int32
              (select int_P_int_M_arr_6_11_at_L2 (shift arr_6 (low2 + i)))))) ->
           (nb_occ arr_6 low1 high1 v_2 int_P_int_M_arr_6_11_at_L1) =
           (nb_occ arr_6 low2 high2 v_2 int_P_int_M_arr_6_11_at_L2)))))))))).
Proof.
intuition.
elim (Z_lt_le_dec high1 low1); intros Hcomp.
rewrite (nb_occ_0 int_P_int_M_arr_6_11_at_L1 arr_6 low1 high1 v_2 ); trivial.
rewrite  (nb_occ_0 int_P_int_M_arr_6_11_at_L2 arr_6 low2 high2 v_2 ); auto with zarith.

pose (ind_var:= high1 - low1).
cut (high1 = low1+ind_var).
Focus 2.
unfold ind_var; auto with zarith.
intros Heq; rewrite Heq.
cut (high2 = low2+ind_var).
Focus 2.
unfold ind_var; auto with zarith.
intros Heq2; rewrite Heq2.
apply (Zlt_0_ind (fun ind_var => ind_var <= high1 - low1 ->
nb_occ arr_6 low1 (low1+ind_var) v_2 int_P_int_M_arr_6_11_at_L1 =
nb_occ arr_6 low2 (low2+ind_var) v_2 int_P_int_M_arr_6_11_at_L2)).
intros x Hind Hle Hle1.
elim (Z_le_lt_eq_dec _ _ Hle).
intros Hlt.
elim (Z_eq_dec  v_2
           (integer_of_int32 (select int_P_int_M_arr_6_11_at_L1 
              (shift arr_6 (low1+x))))); intros Hcomp2.
rewrite (nb_occ_eq int_P_int_M_arr_6_11_at_L1 low1 (low1 + x) arr_6 v_2 ); trivial.
rewrite (nb_occ_eq int_P_int_M_arr_6_11_at_L2 low2 (low2 + x) arr_6 v_2 ); auto with zarith.
cut (low1 + x -1 = low1 + (x-1)); auto with zarith.
cut (low2 + x -1 = low2 + (x-1)); auto with zarith.
intros Hass; rewrite Hass; clear Hass; intros Hass; rewrite Hass; clear Hass.
rewrite (Hind (x-1)); auto with zarith.
rewrite <- H1; auto with zarith.
auto with zarith.
rewrite (nb_occ_neq int_P_int_M_arr_6_11_at_L1 low1 (low1 + x) arr_6 v_2 ); auto with zarith.
rewrite (nb_occ_neq int_P_int_M_arr_6_11_at_L2 low2 (low2 + x) arr_6 v_2 ); auto with zarith.
cut (low1 + x -1 = low1 + (x-1)); auto with zarith.
cut (low2 + x -1 = low2 + (x-1)); auto with zarith.
intros Hass; rewrite Hass; clear Hass; intros Hass; rewrite Hass; clear Hass.
rewrite (Hind (x-1)); auto with zarith.
rewrite <- H1; auto with zarith.
intros Ht; rewrite <- Ht; clear Ht; simpl.
rewrite (Zplus_0_r low1); rewrite (Zplus_0_r low2).
elim (Z_eq_dec v_2
                        (integer_of_int32 (select int_P_int_M_arr_6_11_at_L1 (shift arr_6 (low1))))); intros Hcomp2.
rewrite (nb_occ_eq int_P_int_M_arr_6_11_at_L1 low1 low1 arr_6 v_2 ); auto with zarith.
rewrite (nb_occ_eq int_P_int_M_arr_6_11_at_L2 low2 low2 arr_6 v_2 ); auto with zarith.
rewrite (nb_occ_0 int_P_int_M_arr_6_11_at_L1 arr_6 low1 (low1 -1) v_2).
rewrite (nb_occ_0 int_P_int_M_arr_6_11_at_L2 arr_6 low2 (low2 -1) v_2); auto with zarith.
auto with zarith.
rewrite Hcomp2. rewrite <- (Zplus_0_r low1); rewrite <- (Zplus_0_r low2). rewrite H1; auto with zarith.
rewrite (nb_occ_neq int_P_int_M_arr_6_11_at_L1 low1 low1 arr_6 v_2 ); auto with zarith.
rewrite (nb_occ_neq int_P_int_M_arr_6_11_at_L2 low2 low2 arr_6 v_2 ); auto with zarith.
rewrite (nb_occ_0 int_P_int_M_arr_6_11_at_L1 arr_6 low1 (low1 -1) v_2).
rewrite (nb_occ_0 int_P_int_M_arr_6_11_at_L2 arr_6 low2 (low2 -1) v_2); auto with zarith.
auto with zarith.
rewrite <- (Zplus_0_r low2). rewrite <- H1; auto with zarith.
rewrite (Zplus_0_r low1). auto with zarith.
auto with zarith.
auto with zarith.

Save.

(* Why obligation from file "insert_sort_proved.jc", line 118, characters 0-417: *)
(*Why goal*) Lemma nb_occ_same_2 : 
  (forall (int_P_int_M_arr_7_12_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_7_12_at_L1:(memory int_P int32)),
    (forall (low1_0:Z),
     (forall (high1_0:Z),
      (forall (arr_7:(pointer int_P)),
       (forall (v_3:Z),
        ((forall (i_0:Z),
          (low1_0 <= i_0 /\ i_0 <= high1_0 ->
           (integer_of_int32
            (select int_P_int_M_arr_7_12_at_L1 (shift arr_7 i_0))) =
           (integer_of_int32
            (select int_P_int_M_arr_7_12_at_L2 (shift arr_7 i_0))))) ->
         (nb_occ arr_7 low1_0 high1_0 v_3 int_P_int_M_arr_7_12_at_L1) =
         (nb_occ arr_7 low1_0 high1_0 v_3 int_P_int_M_arr_7_12_at_L2)))))))).
Proof.
intros mem1 mem2 low high arr v.
intros Hsame.
apply (nb_occ_same mem1 mem2 low low high high arr v); auto with zarith.
Save.

(*Why axiom*) Lemma nb_occ_same_2_as_axiom :
  (forall (int_P_int_M_arr_7_12_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_7_12_at_L1:(memory int_P int32)),
    (forall (low1_0:Z),
     (forall (high1_0:Z),
      (forall (arr_7:(pointer int_P)),
       (forall (v_3:Z),
        ((forall (i_0:Z),
          (low1_0 <= i_0 /\ i_0 <= high1_0 ->
           (integer_of_int32
            (select int_P_int_M_arr_7_12_at_L1 (shift arr_7 i_0))) =
           (integer_of_int32
            (select int_P_int_M_arr_7_12_at_L2 (shift arr_7 i_0))))) ->
         (nb_occ arr_7 low1_0 high1_0 v_3 int_P_int_M_arr_7_12_at_L1) =
         (nb_occ arr_7 low1_0 high1_0 v_3 int_P_int_M_arr_7_12_at_L2)))))))).
Admitted.
Dp_hint nb_occ_same_2_as_axiom.

(*Why axiom*) Lemma nb_occ_same_as_axiom :
  (forall (int_P_int_M_arr_6_11_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_6_11_at_L1:(memory int_P int32)),
    (forall (low1:Z),
     (forall (low2:Z),
      (forall (high1:Z),
       (forall (high2:Z),
        (forall (arr_6:(pointer int_P)),
         (forall (v_2:Z),
          ((high1 - low1) = (high2 - low2) /\
           (forall (i:Z),
            (0 <= i /\ i <= (high1 - low1) ->
             (integer_of_int32
              (select int_P_int_M_arr_6_11_at_L1 (shift arr_6 (low1 + i)))) =
             (integer_of_int32
              (select int_P_int_M_arr_6_11_at_L2 (shift arr_6 (low2 + i)))))) ->
           (nb_occ arr_6 low1 high1 v_2 int_P_int_M_arr_6_11_at_L1) =
           (nb_occ arr_6 low2 high2 v_2 int_P_int_M_arr_6_11_at_L2)))))))))).
Admitted.
Dp_hint nb_occ_same_as_axiom.

(* Why obligation from file "insert_sort_proved.jc", line 67, characters 0-381: *)
(*Why goal*) Lemma nb_occ_split : 
  (forall (int_P_int_M_arr_3_8_at_L:(memory int_P int32)),
   (forall (arr_3:(pointer int_P)),
    (forall (low_3:Z),
     (forall (med:Z),
      (forall (high_3:Z),
       (forall (v_1:Z),
        (low_3 <= med /\ med < high_3 ->
         (nb_occ arr_3 low_3 high_3 v_1 int_P_int_M_arr_3_8_at_L) =
         ((nb_occ arr_3 low_3 med v_1 int_P_int_M_arr_3_8_at_L) +
         (nb_occ arr_3 (med + 1) high_3 v_1 int_P_int_M_arr_3_8_at_L))))))))).
Proof.
intros mem arr low med high v Hcompare.
pose (length:=high - med -1).
replace high with (med+1+length).
cut (0<=length); auto with zarith.
generalize length.
apply Zlt_0_ind.
intros x Hrec Hxpos.
elim (Zle_lt_or_eq _ _ Hxpos).
intros Hxspos.
generalize (Z_eq_dec v (integer_of_int32 (select mem (shift arr (med + 1 + x))))).
intros Heq_dec; elim Heq_dec; clear Heq_dec.
intros Heq.
rewrite (nb_occ_eq mem low (med+1+x) arr v); auto with zarith.
rewrite (nb_occ_eq mem (med+1) (med+1+x) arr v); auto with zarith.
replace (med+1+x-1) with ((med+1)+(x-1)); auto with zarith.
rewrite (Hrec (x-1)); auto with zarith.
intros Hneq;
rewrite (nb_occ_neq mem low (med+1+x) arr v); auto with zarith.
rewrite (nb_occ_neq mem (med+1) (med+1+x) arr v); auto with zarith.
replace (med+1+x-1) with ((med+1)+(x-1)); auto with zarith.
intros Hx0; rewrite <- Hx0.
replace (med+1+0) with (med+1); auto with zarith.
generalize (Z_eq_dec v (integer_of_int32 (select mem (shift arr (med + 1))))).
intros Heq_dec; elim Heq_dec; clear Heq_dec.
intros Heq.
rewrite (nb_occ_eq mem (med+1) (med+1) arr v); auto with zarith.
rewrite (nb_occ_0 mem arr (med+1) (med+1-1) v); auto with zarith.
rewrite (nb_occ_eq mem low (med+1) arr v); auto with zarith.
replace (med+1-1) with med; auto with zarith.
intros Hneq.
rewrite (nb_occ_neq mem (med+1) (med+1) arr v); auto with zarith.
rewrite (nb_occ_neq mem low (med+1) arr v); auto with zarith.
rewrite (nb_occ_0 mem arr (med+1) (med+1-1) v); auto with zarith.
replace (med+1-1) with med; auto with zarith.
elim Hcompare; auto with zarith.
unfold length; auto with zarith.
unfold length; auto with zarith.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "insert_sort_proved.jc", line 78, characters 0-482: *)
(*Why goal*) Lemma nb_occ_split_1 : 
  (forall (int_P_int_M_arr_4_9_at_L:(memory int_P int32)),
   (forall (arr_4:(pointer int_P)),
    (forall (low_4:Z),
     (forall (med_0:Z),
      (forall (high_4:Z),
       (forall (val_1:Z),
        (low_4 <= med_0 /\ med_0 <= high_4 /\
         (integer_of_int32
          (select int_P_int_M_arr_4_9_at_L (shift arr_4 med_0))) =
         val_1 ->
         (nb_occ arr_4 low_4 high_4 val_1 int_P_int_M_arr_4_9_at_L) =
         ((nb_occ arr_4 low_4 (med_0 - 1) val_1 int_P_int_M_arr_4_9_at_L) +
         (nb_occ arr_4 (med_0 + 1) high_4 val_1 int_P_int_M_arr_4_9_at_L) +
         1)))))))).
Proof.
intros mem arr low med high v (Hle_low_med, (Hle_med_high, Heq)).
elim (Zle_lt_or_eq _ _ Hle_med_high).
intros Hlt.
rewrite (nb_occ_split mem arr low med high v); auto with zarith.
rewrite (nb_occ_eq mem low med arr v); auto with zarith.
intros Heq1; rewrite Heq1; rewrite Heq1 in Heq.
rewrite (nb_occ_0 mem arr (high+1) high v); auto with zarith.
rewrite (nb_occ_eq mem low high arr v); auto with zarith.
Save.

(*Why axiom*) Lemma nb_occ_split_1_as_axiom :
  (forall (int_P_int_M_arr_4_9_at_L:(memory int_P int32)),
   (forall (arr_4:(pointer int_P)),
    (forall (low_4:Z),
     (forall (med_0:Z),
      (forall (high_4:Z),
       (forall (val_1:Z),
        (low_4 <= med_0 /\ med_0 <= high_4 /\
         (integer_of_int32
          (select int_P_int_M_arr_4_9_at_L (shift arr_4 med_0))) =
         val_1 ->
         (nb_occ arr_4 low_4 high_4 val_1 int_P_int_M_arr_4_9_at_L) =
         ((nb_occ arr_4 low_4 (med_0 - 1) val_1 int_P_int_M_arr_4_9_at_L) +
         (nb_occ arr_4 (med_0 + 1) high_4 val_1 int_P_int_M_arr_4_9_at_L) +
         1)))))))).
Admitted.
Dp_hint nb_occ_split_1_as_axiom.

(* Why obligation from file "insert_sort_proved.jc", line 91, characters 0-459: *)
(*Why goal*) Lemma nb_occ_split_2 : 
  (forall (int_P_int_M_arr_5_10_at_L:(memory int_P int32)),
   (forall (arr_5:(pointer int_P)),
    (forall (low_5:Z),
     (forall (med_1:Z),
      (forall (high_5:Z),
       (forall (val_2:Z),
        (low_5 <= med_1 /\ med_1 <= high_5 /\
         (integer_of_int32
          (select int_P_int_M_arr_5_10_at_L (shift arr_5 med_1))) <>
         val_2 ->
         (nb_occ arr_5 low_5 high_5 val_2 int_P_int_M_arr_5_10_at_L) =
         ((nb_occ arr_5 low_5 (med_1 - 1) val_2 int_P_int_M_arr_5_10_at_L) +
         (nb_occ arr_5 (med_1 + 1) high_5 val_2 int_P_int_M_arr_5_10_at_L))))))))).
Proof.
intros mem arr low med high v (Hle_low_med, (Hle_med_high, Hneq)).
elim (Zle_lt_or_eq _ _ Hle_med_high).
intros Hlt.
rewrite (nb_occ_split mem arr low med high v); auto with zarith.
rewrite (nb_occ_neq mem low med arr v); auto with zarith.
intros Heq; rewrite <- Heq.
rewrite (nb_occ_neq mem low med arr v); auto with zarith.
rewrite (nb_occ_0 mem arr (med+1) med v); auto with zarith.
Save.

(*Why axiom*) Lemma nb_occ_split_2_as_axiom :
  (forall (int_P_int_M_arr_5_10_at_L:(memory int_P int32)),
   (forall (arr_5:(pointer int_P)),
    (forall (low_5:Z),
     (forall (med_1:Z),
      (forall (high_5:Z),
       (forall (val_2:Z),
        (low_5 <= med_1 /\ med_1 <= high_5 /\
         (integer_of_int32
          (select int_P_int_M_arr_5_10_at_L (shift arr_5 med_1))) <>
         val_2 ->
         (nb_occ arr_5 low_5 high_5 val_2 int_P_int_M_arr_5_10_at_L) =
         ((nb_occ arr_5 low_5 (med_1 - 1) val_2 int_P_int_M_arr_5_10_at_L) +
         (nb_occ arr_5 (med_1 + 1) high_5 val_2 int_P_int_M_arr_5_10_at_L))))))))).
Admitted.
Dp_hint nb_occ_split_2_as_axiom.

(*Why axiom*) Lemma nb_occ_split_as_axiom :
  (forall (int_P_int_M_arr_3_8_at_L:(memory int_P int32)),
   (forall (arr_3:(pointer int_P)),
    (forall (low_3:Z),
     (forall (med:Z),
      (forall (high_3:Z),
       (forall (v_1:Z),
        (low_3 <= med /\ med < high_3 ->
         (nb_occ arr_3 low_3 high_3 v_1 int_P_int_M_arr_3_8_at_L) =
         ((nb_occ arr_3 low_3 med v_1 int_P_int_M_arr_3_8_at_L) +
         (nb_occ arr_3 (med + 1) high_3 v_1 int_P_int_M_arr_3_8_at_L))))))))).
Admitted.
Dp_hint nb_occ_split_as_axiom.

(*Why axiom*) Lemma pointer_addr_of_char_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (char_P_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_char_P_of_pointer_address.

(*Why axiom*) Lemma pointer_addr_of_int_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (int_P_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_int_P_of_pointer_address.

(*Why logic*) Definition void_P_of_pointer_address :
  (pointer unit) -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_void_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (void_P_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_void_P_of_pointer_address.

(*Why predicate*) Definition right_valid_struct_char_P  (p:(pointer char_P)) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_int_P  (p:(pointer int_P)) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_void_P  (p:(pointer void_P)) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition sorted  (arr_8:(pointer int_P)) (length:Z) (int_P_int_M_arr_8_2_at_L:(memory int_P int32))
  := (forall (i_1:Z),
      (0 <= i_1 /\ i_1 < (length - 1) ->
       (integer_of_int32 (select int_P_int_M_arr_8_2_at_L (shift arr_8 i_1))) <=
       (integer_of_int32
        (select int_P_int_M_arr_8_2_at_L (shift arr_8 (i_1 + 1)))))).

(*Why predicate*) Definition strict_valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) = a /\
     (offset_max int_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) = a /\
     (offset_max int_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_char_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_int_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_void_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a /\
     (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a /\
     (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why logic*) Definition void_P_tag : (tag_id void_P).
Admitted.

(*Why axiom*) Lemma void_P_int : (int_of_tag void_P_tag) = 1.
Admitted.
Dp_hint void_P_int.

(*Why axiom*) Lemma void_P_of_bitvector_of_bitvector_of_void_P :
  (forall (x:(pointer void_P)),
   (void_P_of_bitvector (bitvector_of_void_P x)) = x).
Admitted.
Dp_hint void_P_of_bitvector_of_bitvector_of_void_P.

(*Why axiom*) Lemma void_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer void_P)),
   p = (void_P_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint void_P_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma void_P_parenttag_bottom :
  (parenttag void_P_tag (@bottom_tag void_P)).
Admitted.
Dp_hint void_P_parenttag_bottom.

(*Why axiom*) Lemma void_P_tags :
  (forall (x:(pointer void_P)),
   (forall (void_P_tag_table:(tag_table void_P)),
    (instanceof void_P_tag_table x void_P_tag))).
Admitted.
Dp_hint void_P_tags.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 49-54: *)
(*Why goal*) Lemma insert_ensures_default_po_1 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_52 *) (* JC_50 *) (* JC_50 *) (-1) <= (integer_of_int32 i_2).
Proof.
intuition.
(* FILL PROOF HERE *)
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 53-61: *)
(*Why goal*) Lemma insert_ensures_default_po_2 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_52 *)
  (* JC_51 *)
  (* JC_51 *) (integer_of_int32 i_2) < (integer_of_int32 length_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 49-54: *)
(*Why goal*) Lemma insert_ensures_default_po_3 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_5: (* JC_52 *) ((* JC_50 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_51 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_7: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_8: result0 =
                (select
                 int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_9: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_10: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_11: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_12: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_13: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_14: i_2_1 = result3),
  (* JC_52 *) (* JC_50 *) (* JC_50 *) (-1) <= (integer_of_int32 i_2_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 53-61: *)
(*Why goal*) Lemma insert_ensures_default_po_4 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_5: (* JC_52 *) ((* JC_50 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_51 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_7: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_8: result0 =
                (select
                 int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_9: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_10: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_11: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_12: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_13: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_14: i_2_1 = result3),
  (* JC_52 *)
  (* JC_51 *)
  (* JC_51 *) (integer_of_int32 i_2_1) < (integer_of_int32 length_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 106, characters 33-124: *)
(*Why goal*) Lemma insert_ensures_elements_po_1 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_78 *)
  (* JC_78 *)
  (forall (v_4:int32),
   (nb_occ
    arr_0 ((integer_of_int32 i_2) + 2) (integer_of_int32 length_0) (integer_of_int32
                                                                    v_4) int_P_int_M_arr_0_3) =
   (nb_occ
    arr_0 ((integer_of_int32 i_2) + 1) ((integer_of_int32 length_0) - 1) (
    integer_of_int32 v_4) int_P_int_M_arr_0_3)).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 98, characters 41-112: *)
(*Why goal*) Lemma insert_ensures_elements_po_2 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_80 *)
  (* JC_80 *)
  (forall (j_1:Z),
   ((integer_of_int32 i_2) < j_1 /\ j_1 < (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 (j_1 + 1)))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 49-54: *)
(*Why goal*) Lemma insert_ensures_elements_po_3 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_84 *) (* JC_82 *) (* JC_82 *) (-1) <= (integer_of_int32 i_2).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 53-61: *)
(*Why goal*) Lemma insert_ensures_elements_po_4 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_84 *)
  (* JC_83 *)
  (* JC_83 *) (integer_of_int32 i_2) < (integer_of_int32 length_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 106, characters 33-124: *)
(*Why goal*) Lemma insert_ensures_elements_po_5 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_12: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_14: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_15: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_16: i_2_1 = result3),
  (* JC_78 *)
  (* JC_78 *)
  (forall (v_4:int32),
   (nb_occ
    arr_0 ((integer_of_int32 i_2_1) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_4) int_P_int_M_arr_0_3_1) =
   (nb_occ
    arr_0 ((integer_of_int32 i_2_1) + 1) ((integer_of_int32 length_0) - 1) (
    integer_of_int32 v_4) int_P_int_M_arr_0_3)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 104, characters 33-99: *)
(*Why goal*) Lemma insert_ensures_elements_po_6 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_12: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_14: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_15: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_16: i_2_1 = result3),
  (* JC_79 *)
  (* JC_79 *)
  (forall (v_5:int32),
   (nb_occ
    arr_0 0 (integer_of_int32 i_2_1) (integer_of_int32 v_5) int_P_int_M_arr_0_3_1) =
   (nb_occ
    arr_0 0 (integer_of_int32 i_2_1) (integer_of_int32 v_5) int_P_int_M_arr_0_3)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 98, characters 41-112: *)
(*Why goal*) Lemma insert_ensures_elements_po_7 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_12: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_14: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_15: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_16: i_2_1 = result3),
  (* JC_80 *)
  (* JC_80 *)
  (forall (j_1:Z),
   ((integer_of_int32 i_2_1) < j_1 /\ j_1 < (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 (j_1 + 1)))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 96, characters 41-107: *)
(*Why goal*) Lemma insert_ensures_elements_po_8 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_12: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_14: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_15: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_16: i_2_1 = result3),
  (* JC_81 *)
  (* JC_81 *)
  (forall (j_2:Z),
   (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_1) + 1) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j_2))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 49-54: *)
(*Why goal*) Lemma insert_ensures_elements_po_9 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_12: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_14: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_15: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_16: i_2_1 = result3),
  (* JC_84 *) (* JC_82 *) (* JC_82 *) (-1) <= (integer_of_int32 i_2_1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 53-61: *)
(*Why goal*) Lemma insert_ensures_elements_po_10 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_12: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_13: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_14: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_15: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_16: i_2_1 = result3),
  (* JC_84 *)
  (* JC_83 *)
  (* JC_83 *) (integer_of_int32 i_2_1) < (integer_of_int32 length_0).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 113, characters 27-158: *)
(*Why goal*) Lemma insert_ensures_elements_po_11 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  (* JC_88 *)
  (* JC_88 *)
  (forall (v_6:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_6) int_P_int_M_arr_0_3_0)) =
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32 length_0) - 1) (
    integer_of_int32 v_6) int_P_int_M_arr_0_3))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 117, characters 27-131: *)
(*Why goal*) Lemma insert_ensures_elements_po_12 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  (* JC_89 *)
  (* JC_89 *)
  (forall (v_7:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_7) int_P_int_M_arr_0_3_0)) =
   (nb_occ
    arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 v_7) int_P_int_M_arr_0_3)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 122, characters 27-158: *)
(*Why goal*) Lemma insert_ensures_elements_po_13 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_21: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  (* JC_90 *)
  (* JC_90 *)
  (forall (v_8:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_8) int_P_int_M_arr_0_3_1)) =
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32 length_0) - 1) (
    integer_of_int32 v_8) int_P_int_M_arr_0_3))).
Proof.
intros arr length val mem mem1 .
intuition.
cut (nb_occ arr 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1 = 
       nb_occ arr 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) mem1).
intros Heq; rewrite Heq; clear Heq.
cut (nb_occ arr (integer_of_int32 i_2_0 + 2) (integer_of_int32 length) 
                         (integer_of_int32 v_8) int_P_int_M_arr_0_3_1 = 
       nb_occ arr (integer_of_int32 i_2_0 + 1) (integer_of_int32 length - 1) 
                         (integer_of_int32 v_8) mem1).
intros Heq; rewrite Heq; clear Heq; auto with zarith.
z3.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 126, characters 27-131: *)
(*Why goal*) Lemma insert_ensures_elements_po_14 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_21: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_24: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  (* JC_91 *)
  (* JC_91 *)
  (forall (v_9:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_9) int_P_int_M_arr_0_3_1)) =
   (nb_occ
    arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 v_9) int_P_int_M_arr_0_3)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 130, characters 27-129: *)
(*Why goal*) Lemma insert_ensures_elements_po_15 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_21: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_24: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_25: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  (* JC_92 *)
  (* JC_92 *)
  (nb_occ
   arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                        (select
                                         int_P_int_M_arr_0_3_1 (shift
                                                                arr_0 
                                                                ((integer_of_int32
                                                                  i_2_0) +
                                                                1)))) int_P_int_M_arr_0_3_1) =
  ((nb_occ
    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                      (select
                                       int_P_int_M_arr_0_3_1 (shift
                                                              arr_0 ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
  (nb_occ
   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
   integer_of_int32
   (select int_P_int_M_arr_0_3_1 (shift arr_0 ((integer_of_int32 i_2_0) + 1)))) int_P_int_M_arr_0_3_1) +
  1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 134, characters 4-110: *)
(*Why goal*) Lemma insert_ensures_elements_po_16 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_21: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_24: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_25: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_26: (* JC_92 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  (* JC_93 *)
  (* JC_93 *)
  (forall (v_10:int32),
   ((integer_of_int32 v_10) <>
    (integer_of_int32
     (select
      int_P_int_M_arr_0_3_1 (shift arr_0 ((integer_of_int32 i_2_0) + 1)))) ->
    (nb_occ
     arr_0 0 (integer_of_int32 length_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) =
    ((nb_occ
      arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
    (nb_occ
     arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
     integer_of_int32 v_10) int_P_int_M_arr_0_3_1)))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 71, characters 12-105: *)
(*Why goal*) Lemma insert_ensures_elements_po_17 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_21: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_24: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_25: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_26: (* JC_92 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_28: (* JC_93 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_25 *)
  (* JC_23 *)
  (* JC_23 *)
  (forall (v_11:int32),
   ((integer_of_int32 v_11) <> (integer_of_int32 val_0) ->
    (nb_occ
     arr_0 0 (integer_of_int32 length_0) (integer_of_int32 v_11) int_P_int_M_arr_0_3_1) =
    (nb_occ
     arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 v_11) int_P_int_M_arr_0_3))).
Proof.
intuition.
rewrite HW_28; auto with zarith.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 75, characters 5-66: *)
(*Why goal*) Lemma insert_ensures_elements_po_18 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_9: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_19: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_20: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_21: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_24: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_25: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_26: (* JC_92 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_28: (* JC_93 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_25 *)
  (* JC_24 *)
  (* JC_24 *)
  (nb_occ
   arr_0 0 (integer_of_int32 length_0) (integer_of_int32 val_0) int_P_int_M_arr_0_3_1) =
  ((nb_occ
    arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 val_0) int_P_int_M_arr_0_3) +
  1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 113, characters 27-158: *)
(*Why goal*) Lemma insert_ensures_elements_po_19 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  (* JC_88 *)
  (* JC_88 *)
  (forall (v_6:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_6) int_P_int_M_arr_0_3_0)) =
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32 length_0) - 1) (
    integer_of_int32 v_6) int_P_int_M_arr_0_3))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 117, characters 27-131: *)
(*Why goal*) Lemma insert_ensures_elements_po_20 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  (* JC_89 *)
  (* JC_89 *)
  (forall (v_7:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_7) int_P_int_M_arr_0_3_0)) =
   (nb_occ
    arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 v_7) int_P_int_M_arr_0_3)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 122, characters 27-158: *)
(*Why goal*) Lemma insert_ensures_elements_po_21 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_32: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_33: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_34: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  (* JC_90 *)
  (* JC_90 *)
  (forall (v_8:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_8) int_P_int_M_arr_0_3_1)) =
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32 length_0) - 1) (
    integer_of_int32 v_8) int_P_int_M_arr_0_3))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 126, characters 27-131: *)
(*Why goal*) Lemma insert_ensures_elements_po_22 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_32: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_33: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_34: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_35: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  (* JC_91 *)
  (* JC_91 *)
  (forall (v_9:int32),
   ((nb_occ
     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
   (nb_occ
    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
    integer_of_int32 v_9) int_P_int_M_arr_0_3_1)) =
   (nb_occ
    arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 v_9) int_P_int_M_arr_0_3)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 130, characters 27-129: *)
(*Why goal*) Lemma insert_ensures_elements_po_23 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_32: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_33: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_34: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_35: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_36: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  (* JC_92 *)
  (* JC_92 *)
  (nb_occ
   arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                        (select
                                         int_P_int_M_arr_0_3_1 (shift
                                                                arr_0 
                                                                ((integer_of_int32
                                                                  i_2_0) +
                                                                1)))) int_P_int_M_arr_0_3_1) =
  ((nb_occ
    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                      (select
                                       int_P_int_M_arr_0_3_1 (shift
                                                              arr_0 ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
  (nb_occ
   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
   integer_of_int32
   (select int_P_int_M_arr_0_3_1 (shift arr_0 ((integer_of_int32 i_2_0) + 1)))) int_P_int_M_arr_0_3_1) +
  1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 134, characters 4-110: *)
(*Why goal*) Lemma insert_ensures_elements_po_24 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_32: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_33: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_34: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_35: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_36: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_37: (* JC_92 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  (* JC_93 *)
  (* JC_93 *)
  (forall (v_10:int32),
   ((integer_of_int32 v_10) <>
    (integer_of_int32
     (select
      int_P_int_M_arr_0_3_1 (shift arr_0 ((integer_of_int32 i_2_0) + 1)))) ->
    (nb_occ
     arr_0 0 (integer_of_int32 length_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) =
    ((nb_occ
      arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
    (nb_occ
     arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32 length_0) (
     integer_of_int32 v_10) int_P_int_M_arr_0_3_1)))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 71, characters 12-105: *)
(*Why goal*) Lemma insert_ensures_elements_po_25 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_32: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_33: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_34: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_35: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_36: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_37: (* JC_92 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_39: (* JC_93 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_25 *)
  (* JC_23 *)
  (* JC_23 *)
  (forall (v_11:int32),
   ((integer_of_int32 v_11) <> (integer_of_int32 val_0) ->
    (nb_occ
     arr_0 0 (integer_of_int32 length_0) (integer_of_int32 v_11) int_P_int_M_arr_0_3_1) =
    (nb_occ
     arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 v_11) int_P_int_M_arr_0_3))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 75, characters 5-66: *)
(*Why goal*) Lemma insert_ensures_elements_po_26 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_7: (* JC_78 *)
                (forall (v_4:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   v_4) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) (integer_of_int32
                                                           v_4) int_P_int_M_arr_0_3)) /\
                (* JC_79 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_5) int_P_int_M_arr_0_3)) /\
                (* JC_80 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_84 *) ((* JC_82 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_83 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_30: (integer_of_int32 i_2_0) < 0),
  forall (HW_31: (* JC_88 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_32: (* JC_89 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_33: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_34: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_35: (* JC_90 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_36: (* JC_91 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_37: (* JC_92 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_39: (* JC_93 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_25 *)
  (* JC_24 *)
  (* JC_24 *)
  (nb_occ
   arr_0 0 (integer_of_int32 length_0) (integer_of_int32 val_0) int_P_int_M_arr_0_3_1) =
  ((nb_occ
    arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32 val_0) int_P_int_M_arr_0_3) +
  1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 102, characters 31-92: *)
(*Why goal*) Lemma insert_ensures_sorted_po_1 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_62 *)
  (* JC_62 *)
  (forall (j:Z),
   (((integer_of_int32 i_2) + 1) < j /\ j <= (integer_of_int32 length_0) ->
    (integer_of_int32 val_0) <
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 100, characters 31-98: *)
(*Why goal*) Lemma insert_ensures_sorted_po_2 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_63 *)
  (* JC_63 *)
  (forall (j_0:Z),
   (((integer_of_int32 i_2) + 1) <= j_0 /\ j_0 <
    (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_0))) <=
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 + 1)))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 98, characters 41-112: *)
(*Why goal*) Lemma insert_ensures_sorted_po_3 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_64 *)
  (* JC_64 *)
  (forall (j_1:Z),
   ((integer_of_int32 i_2) < j_1 /\ j_1 < (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 (j_1 + 1)))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 49-54: *)
(*Why goal*) Lemma insert_ensures_sorted_po_4 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_68 *) (* JC_66 *) (* JC_66 *) (-1) <= (integer_of_int32 i_2).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 53-61: *)
(*Why goal*) Lemma insert_ensures_sorted_po_5 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_68 *)
  (* JC_67 *)
  (* JC_67 *) (integer_of_int32 i_2) < (integer_of_int32 length_0).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 161, characters 9-2424: *)
(*Why goal*) Lemma insert_ensures_sorted_po_6 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_70 *)
  (* JC_70 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3 (
   pset_range
   (pset_singleton arr_0) ((integer_of_int32 i_2) + 1) (integer_of_int32
                                                        length_0))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 161, characters 9-2424: *)
(*Why goal*) Lemma insert_ensures_sorted_po_7 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  (* JC_71 *)
  (* JC_71 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 102, characters 31-92: *)
(*Why goal*) Lemma insert_ensures_sorted_po_8 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_62 *)
  (* JC_62 *)
  (forall (j:Z),
   (((integer_of_int32 i_2_1) + 1) < j /\ j <= (integer_of_int32 length_0) ->
    (integer_of_int32 val_0) <
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j))))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 100, characters 31-98: *)
(*Why goal*) Lemma insert_ensures_sorted_po_9 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_63 *)
  (* JC_63 *)
  (forall (j_0:Z),
   (((integer_of_int32 i_2_1) + 1) <= j_0 /\ j_0 <
    (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j_0))) <=
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 (j_0 + 1)))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 98, characters 41-112: *)
(*Why goal*) Lemma insert_ensures_sorted_po_10 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_64 *)
  (* JC_64 *)
  (forall (j_1:Z),
   ((integer_of_int32 i_2_1) < j_1 /\ j_1 < (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 (j_1 + 1)))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 96, characters 41-107: *)
(*Why goal*) Lemma insert_ensures_sorted_po_11 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_65 *)
  (* JC_65 *)
  (forall (j_2:Z),
   (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_1) + 1) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j_2))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 49-54: *)
(*Why goal*) Lemma insert_ensures_sorted_po_12 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_68 *) (* JC_66 *) (* JC_66 *) (-1) <= (integer_of_int32 i_2_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 95, characters 53-61: *)
(*Why goal*) Lemma insert_ensures_sorted_po_13 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_68 *)
  (* JC_67 *)
  (* JC_67 *) (integer_of_int32 i_2_1) < (integer_of_int32 length_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 161, characters 9-2424: *)
(*Why goal*) Lemma insert_ensures_sorted_po_14 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_70 *)
  (* JC_70 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range
   (pset_singleton arr_0) ((integer_of_int32 i_2_1) + 1) (integer_of_int32
                                                          length_0))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 161, characters 9-2424: *)
(*Why goal*) Lemma insert_ensures_sorted_po_15 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_13: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_14: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_16: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_17: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_18: i_2_1 = result3),
  (* JC_71 *)
  (* JC_71 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 69, characters 14-34: *)
(*Why goal*) Lemma insert_ensures_sorted_po_16 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_23: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_24: (* JC_72 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_25: (* JC_73 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_26: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_27: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_28: (* JC_74 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_29: (* JC_75 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_30: (* JC_76 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_31: (* JC_77 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_19 *)
  (* JC_17 *)
  (* JC_17 *)
  (sorted arr_0 ((integer_of_int32 length_0) + 1) int_P_int_M_arr_0_3_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 90, characters 5-11: *)
(*Why goal*) Lemma insert_ensures_sorted_po_17 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_11: (integer_of_int32 i_2_0) >= 0),
  forall (result0: int32),
  forall (HW_12: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_23: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_24: (* JC_72 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_25: (* JC_73 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result1: int32),
  forall (HW_26: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_27: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (HW_28: (* JC_74 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_29: (* JC_75 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_30: (* JC_76 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_31: (* JC_77 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_19 *)
  (* JC_18 *)
  (* JC_18 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 69, characters 14-34: *)
(*Why goal*) Lemma insert_ensures_sorted_po_18 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_32: (integer_of_int32 i_2_0) < 0),
  forall (HW_33: (* JC_72 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_34: (* JC_73 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_35: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_36: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_37: (* JC_74 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_38: (* JC_75 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_39: (* JC_76 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_40: (* JC_77 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_19 *)
  (* JC_17 *)
  (* JC_17 *)
  (sorted arr_0 ((integer_of_int32 length_0) + 1) int_P_int_M_arr_0_3_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 90, characters 5-11: *)
(*Why goal*) Lemma insert_ensures_sorted_po_19 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_4: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_9: ((* JC_62 *)
                 (forall (j:Z),
                  (((integer_of_int32 i_2_0) + 1) < j /\ j <=
                   (integer_of_int32 length_0) -> (integer_of_int32 val_0) <
                   (integer_of_int32
                    (select int_P_int_M_arr_0_3_0 (shift arr_0 j))))) /\
                (* JC_63 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_2_0) + 1) <= j_0 /\ j_0 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) <=
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_0 + 1)))))) /\
                (* JC_64 *)
                (forall (j_1:Z),
                 ((integer_of_int32 i_2_0) < j_1 /\ j_1 <
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 (j_1 + 1)))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_65 *)
                (forall (j_2:Z),
                 (0 <= j_2 /\ j_2 <= ((integer_of_int32 i_2_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_2))))) /\
                (* JC_68 *) ((* JC_66 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_67 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))) /\
                (* JC_70 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) ((integer_of_int32 i_2_0) + 1) (
                 integer_of_int32 length_0))) /\
                (* JC_71 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_32: (integer_of_int32 i_2_0) < 0),
  forall (HW_33: (* JC_72 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_34: (* JC_73 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (result0: int32),
  forall (HW_35: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_36: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (HW_37: (* JC_74 *)
                 (forall (v_8:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_8) int_P_int_M_arr_0_3_1)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_8) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_8) int_P_int_M_arr_0_3)))),
  forall (HW_38: (* JC_75 *)
                 (forall (v_9:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_9) int_P_int_M_arr_0_3_1) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_9) int_P_int_M_arr_0_3_1)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_9) int_P_int_M_arr_0_3))),
  forall (HW_39: (* JC_76 *)
                 (nb_occ
                  arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                       (select
                                                        int_P_int_M_arr_0_3_1 (
                                                        shift
                                                        arr_0 ((integer_of_int32
                                                                i_2_0) +
                                                              1)))) int_P_int_M_arr_0_3_1) =
                 ((nb_occ
                   arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32
                                                     (select
                                                      int_P_int_M_arr_0_3_1 (
                                                      shift
                                                      arr_0 ((integer_of_int32
                                                              i_2_0) +
                                                            1)))) int_P_int_M_arr_0_3_1) +
                 (nb_occ
                  arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                        length_0) (integer_of_int32
                                                                   (select
                                                                    int_P_int_M_arr_0_3_1 (
                                                                    shift
                                                                    arr_0 
                                                                    ((
                                                                    integer_of_int32
                                                                    i_2_0) +
                                                                    1)))) int_P_int_M_arr_0_3_1) +
                 1)),
  forall (HW_40: (* JC_77 *)
                 (forall (v_10:int32),
                  ((integer_of_int32 v_10) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_0_3_1 (shift
                                            arr_0 ((integer_of_int32 i_2_0) +
                                                  1)))) ->
                   (nb_occ
                    arr_0 0 (integer_of_int32 length_0) (integer_of_int32
                                                         v_10) int_P_int_M_arr_0_3_1) =
                   ((nb_occ
                     arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_10) int_P_int_M_arr_0_3_1) +
                   (nb_occ
                    arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                          length_0) (
                    integer_of_int32 v_10) int_P_int_M_arr_0_3_1))))),
  (* JC_19 *)
  (* JC_18 *)
  (* JC_18 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 91, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_1 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  (-2147483648) <= ((integer_of_int32 length_0) - 1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 91, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_2 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  ((integer_of_int32 length_0) - 1) <= 2147483647.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 112, characters 2-7: *)
(*Why goal*) Lemma insert_safety_po_3 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 i_2_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 112, characters 2-7: *)
(*Why goal*) Lemma insert_safety_po_4 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  (integer_of_int32 i_2_0) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 112, characters 32-35: *)
(*Why goal*) Lemma insert_safety_po_5 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  (-2147483648) <= ((integer_of_int32 i_2_0) + 1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 112, characters 32-35: *)
(*Why goal*) Lemma insert_safety_po_6 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  ((integer_of_int32 i_2_0) + 1) <= 2147483647.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 207, characters 24-190: *)
(*Why goal*) Lemma insert_safety_po_7 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 result2).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 207, characters 24-190: *)
(*Why goal*) Lemma insert_safety_po_8 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  (integer_of_int32 result2) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "insert_sort_proved.c", line 112, characters 51-52: *)
(*Why goal*) Lemma insert_safety_po_9 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (HW_16: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 result2) /\ (integer_of_int32 result2) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_17: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  (-2147483648) <= ((integer_of_int32 i_2_0) - 1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 112, characters 51-52: *)
(*Why goal*) Lemma insert_safety_po_10 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (HW_16: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 result2) /\ (integer_of_int32 result2) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_17: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  ((integer_of_int32 i_2_0) - 1) <= 2147483647.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.why", line 1633, characters 36-67: *)
(*Why goal*) Lemma insert_safety_po_11 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (HW_16: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 result2) /\ (integer_of_int32 result2) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_17: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (HW_18: (-2147483648) <= ((integer_of_int32 i_2_0) - 1) /\
                 ((integer_of_int32 i_2_0) - 1) <= 2147483647),
  forall (result3: int32),
  forall (HW_19: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_20: i_2_1 = result3),
  0 <= (integer_of_int32 ((* JC_41 *) i_2_0)).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.why", line 1633, characters 36-67: *)
(*Why goal*) Lemma insert_safety_po_12 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_2_0) + 1)),
  forall (HW_16: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 result2) /\ (integer_of_int32 result2) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_17: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (HW_18: (-2147483648) <= ((integer_of_int32 i_2_0) - 1) /\
                 ((integer_of_int32 i_2_0) - 1) <= 2147483647),
  forall (result3: int32),
  forall (HW_19: (integer_of_int32 result3) = ((integer_of_int32 i_2_0) - 1)),
  forall (i_2_1: int32),
  forall (HW_20: i_2_1 = result3),
  (integer_of_int32 ((* JC_41 *) i_2_1)) <
  (integer_of_int32 ((* JC_41 *) i_2_0)).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 121, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_13 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_22: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_23: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  (-2147483648) <= ((integer_of_int32 i_2_0) + 1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 121, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_14 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_22: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_23: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  ((integer_of_int32 i_2_0) + 1) <= 2147483647.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 236, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_15 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_22: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_23: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (HW_24: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result1: int32),
  forall (HW_25: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 result1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 236, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_16 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_2_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_2_0) /\ (integer_of_int32 i_2_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_2_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_22: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_23: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (HW_24: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result1: int32),
  forall (HW_25: (integer_of_int32 result1) = ((integer_of_int32 i_2_0) + 1)),
  (integer_of_int32 result1) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 121, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_17 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_32: (integer_of_int32 i_2_0) < 0),
  forall (HW_33: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_34: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  (-2147483648) <= ((integer_of_int32 i_2_0) + 1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 121, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_18 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_32: (integer_of_int32 i_2_0) < 0),
  forall (HW_33: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_34: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  ((integer_of_int32 i_2_0) + 1) <= 2147483647.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 236, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_19 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_32: (integer_of_int32 i_2_0) < 0),
  forall (HW_33: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_34: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (HW_35: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result0: int32),
  forall (HW_36: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 result0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 236, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_20 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) > 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_2: int32),
  forall (HW_5: i_2 = result),
  forall (i_2_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_34 *) True),
  forall (HW_7: (* JC_32 *) ((* JC_30 *) (-1) <= (integer_of_int32 i_2_0) /\
                (* JC_31 *) (integer_of_int32 i_2_0) <
                (integer_of_int32 length_0))),
  forall (HW_32: (integer_of_int32 i_2_0) < 0),
  forall (HW_33: (* JC_42 *)
                 (forall (v_6:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_6) int_P_int_M_arr_0_3_0)) =
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_6) int_P_int_M_arr_0_3) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) (integer_of_int32
                                                            v_6) int_P_int_M_arr_0_3)))),
  forall (HW_34: (* JC_43 *)
                 (forall (v_7:int32),
                  ((nb_occ
                    arr_0 0 (integer_of_int32 i_2_0) (integer_of_int32 v_7) int_P_int_M_arr_0_3_0) +
                  (nb_occ
                   arr_0 ((integer_of_int32 i_2_0) + 2) (integer_of_int32
                                                         length_0) (integer_of_int32
                                                                    v_7) int_P_int_M_arr_0_3_0)) =
                  (nb_occ
                   arr_0 0 ((integer_of_int32 length_0) - 1) (integer_of_int32
                                                              v_7) int_P_int_M_arr_0_3))),
  forall (HW_35: (-2147483648) <= ((integer_of_int32 i_2_0) + 1) /\
                 ((integer_of_int32 i_2_0) + 1) <= 2147483647),
  forall (result0: int32),
  forall (HW_36: (integer_of_int32 result0) = ((integer_of_int32 i_2_0) + 1)),
  (integer_of_int32 result0) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 144, characters 40-53: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_1 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_129 *)
  (* JC_129 *) (sorted arr_1 (integer_of_int32 i_0_0) int_P_int_M_arr_4).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 49-53: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_2 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_132 *) (* JC_130 *) (* JC_130 *) 1 <= (integer_of_int32 i_0_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 52-61: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_3 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_132 *)
  (* JC_131 *)
  (* JC_131 *) (integer_of_int32 i_0_0) <= (integer_of_int32 length_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 144, characters 40-53: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_4 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_129 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_132 *) ((* JC_130 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_131 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_137 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_138 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_129 *)
  (* JC_129 *) (sorted arr_1 (integer_of_int32 i_0_0_1) int_P_int_M_arr_4_1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 49-53: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_5 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_129 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_132 *) ((* JC_130 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_131 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_137 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_138 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_132 *) (* JC_130 *) (* JC_130 *) 1 <= (integer_of_int32 i_0_0_1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 52-61: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_6 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_129 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_132 *) ((* JC_130 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_131 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_137 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_138 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_132 *)
  (* JC_131 *)
  (* JC_131 *) (integer_of_int32 i_0_0_1) <= (integer_of_int32 length_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 49-53: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_1 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_154 *) (* JC_152 *) (* JC_152 *) 1 <= (integer_of_int32 i_0_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 52-61: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_2 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_154 *)
  (* JC_153 *)
  (* JC_153 *) (integer_of_int32 i_0_0) <= (integer_of_int32 length_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 309, characters 12-3203: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_3 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_157 *)
  (* JC_157 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4 (pset_range
                                                                (pset_singleton
                                                                 arr_1) 0 (
                                                                integer_of_int32
                                                                i_0_0))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 154, characters 33-128: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_4 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  (* JC_160 *)
  (* JC_160 *)
  (nb_occ
   arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                       (select
                                        int_P_int_M_arr_4 (shift
                                                           arr_1 (integer_of_int32
                                                                  i_0_0_0)))) int_P_int_M_arr_4_1) =
  ((nb_occ
    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                              (select
                                               int_P_int_M_arr_4 (shift
                                                                  arr_1 (
                                                                  integer_of_int32
                                                                  i_0_0_0)))) int_P_int_M_arr_4) +
  1).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 155, characters 33-136: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_5 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  (* JC_161 *)
  (* JC_161 *)
  (forall (v_12:int32),
   ((integer_of_int32 v_12) <>
    (integer_of_int32
     (select int_P_int_M_arr_4 (shift arr_1 (integer_of_int32 i_0_0_0)))) ->
    (nb_occ
     arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
    (nb_occ
     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32 v_12) int_P_int_M_arr_4))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 149, characters 33-109: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_6 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_161 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_15: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_16: i_0_0_1 = result1),
  (* JC_149 *)
  (* JC_149 *)
  (forall (v_13:int32),
   (nb_occ
    arr_1 (integer_of_int32 i_0_0_1) ((integer_of_int32 length_1) - 1) (
    integer_of_int32 v_13) int_P_int_M_arr_4_1) =
   (nb_occ
    arr_1 (integer_of_int32 i_0_0_1) ((integer_of_int32 length_1) - 1) (
    integer_of_int32 v_13) int_P_int_M_arr_4)).
Proof.
intuition.
rewrite (nb_occ_same_2 int_P_int_M_arr_4 int_P_int_M_arr_4_1
             (integer_of_int32 i_0_0_1)  (integer_of_int32 length_1 - 1) arr_1 
             (integer_of_int32 v_13));
auto with zarith  .
rewrite HW_16.
clear HW_16 i_0_0_1; rewrite HW_15; clear HW_15 result1.
intros idx Hbound_idx.
transitivity (integer_of_int32 (select int_P_int_M_arr_4_0 (shift arr_1 idx))).
unfold not_assigns in H13.
rewrite H13; trivial.
split.
unfold valid.
split.
rewrite offset_min_shift. auto with zarith.
rewrite offset_max_shift. auto with zarith.
unfold not; intros Hpset.
elim (in_pset_range _ (shift arr_1 idx) (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)).
intros Helim _; elim (Helim Hpset).
intros x (r, (Hlow, (Hhigh, (Hpset_single, Hshift)))).
absurd (shift arr_1 idx = shift r x); trivial.
elim (in_pset_singleton _ r arr_1).
intros Heq _; generalize (Heq Hpset_single); clear Heq; intros Heq.
rewrite Heq.
apply neq_shift; auto with zarith.
auto with zarith.
Save.

(* Why obligation from file "insert_sort_proved.c", line 147, characters 33-99: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_7 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_161 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_15: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_16: i_0_0_1 = result1),
  (* JC_150 *)
  (* JC_150 *)
  (forall (v_14:int32),
   (nb_occ
    arr_1 0 ((integer_of_int32 i_0_0_1) - 1) (integer_of_int32 v_14) int_P_int_M_arr_4_1) =
   (nb_occ
    arr_1 0 ((integer_of_int32 i_0_0_1) - 1) (integer_of_int32 v_14) int_P_int_M_arr_4)).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 146, characters 33-91: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_8 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_161 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_15: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_16: i_0_0_1 = result1),
  (* JC_151 *)
  (* JC_151 *)
  (forall (j_3:Z),
   ((integer_of_int32 i_0_0_1) <= j_3 /\ j_3 < (integer_of_int32 length_1) ->
    (integer_of_int32 (select int_P_int_M_arr_4_1 (shift arr_1 j_3))) =
    (integer_of_int32 (select int_P_int_M_arr_4 (shift arr_1 j_3))))).
Proof.
intuition.
rewrite HW_16 in H14; clear HW_16 i_0_0_1; rewrite HW_15 in H14; clear HW_15 result1.
transitivity (integer_of_int32 (select int_P_int_M_arr_4_0 (shift arr_1 j_3))); auto with zarith.
unfold not_assigns in H13; rewrite H13; trivial.
split.
unfold valid.
split.
rewrite offset_min_shift. auto with zarith.
rewrite offset_max_shift. auto with zarith.
unfold not; intros Hpset.
elim (in_pset_range _ (shift arr_1 j_3) (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)).
intros Helim _; elim (Helim Hpset).
intros x (r, (Hlow, (Hhigh, (Hpset_single, Hshift)))).
absurd (shift arr_1 j_3 = shift r x); trivial.
elim (in_pset_singleton _ r arr_1).
intros Heq _; generalize (Heq Hpset_single); clear Heq; intros Heq.
rewrite Heq.
apply neq_shift; auto with zarith.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 49-53: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_9 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_161 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_15: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_16: i_0_0_1 = result1),
  (* JC_154 *) (* JC_152 *) (* JC_152 *) 1 <= (integer_of_int32 i_0_0_1).
Proof.
ergo.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 52-61: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_10 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_161 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_15: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_16: i_0_0_1 = result1),
  (* JC_154 *)
  (* JC_153 *)
  (* JC_153 *) (integer_of_int32 i_0_0_1) <= (integer_of_int32 length_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 309, characters 12-3203: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_11 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_12: (* JC_160 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_161 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_15: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_16: i_0_0_1 = result1),
  (* JC_157 *)
  (* JC_157 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_1 (pset_range
                                                                  (pset_singleton
                                                                   arr_1) 0 (
                                                                  integer_of_int32
                                                                  i_0_0_1))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 85, characters 10-94: *)
(*Why goal*) Lemma insert_sort_ensures_elements_po_12 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_149 *)
                 (forall (v_13:int32),
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 (integer_of_int32 i_0_0_0) ((integer_of_int32
                                                      length_1) -
                                                    1) (integer_of_int32 v_13) int_P_int_M_arr_4)) /\
                (* JC_150 *)
                (forall (v_14:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                            v_14) int_P_int_M_arr_4)) /\
                (* JC_151 *)
                (forall (j_3:Z),
                 ((integer_of_int32 i_0_0_0) <= j_3 /\ j_3 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_3))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_3))))) /\
                (* JC_154 *) ((* JC_152 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_153 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_157 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))),
  forall (HW_8: (* JC_155 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0)),
  forall (HW_18: (integer_of_int32 i_0_0_0) >= (integer_of_int32 length_1)),
  forall (v_15: int32),
  (* JC_114 *)
  (nb_occ
   arr_1 0 ((integer_of_int32 length_1) - 1) (integer_of_int32 v_15) int_P_int_M_arr_4_0) =
  (nb_occ
   arr_1 0 ((integer_of_int32 length_1) - 1) (integer_of_int32 v_15) int_P_int_M_arr_4).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 144, characters 40-53: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_1 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_139 *)
  (* JC_139 *) (sorted arr_1 (integer_of_int32 i_0_0) int_P_int_M_arr_4).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 49-53: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_2 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_142 *) (* JC_140 *) (* JC_140 *) 1 <= (integer_of_int32 i_0_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 52-61: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_3 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_142 *)
  (* JC_141 *)
  (* JC_141 *) (integer_of_int32 i_0_0) <= (integer_of_int32 length_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 309, characters 12-3203: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_4 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_144 *)
  (* JC_144 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4 (pset_range
                                                                (pset_singleton
                                                                 arr_1) 0 (
                                                                integer_of_int32
                                                                i_0_0))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 309, characters 12-3203: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_5 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_145 *)
  (* JC_145 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4 (pset_range
                                                                (pset_singleton
                                                                 arr_1) 0 
                                                                ((integer_of_int32
                                                                  length_1) -
                                                                1))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 144, characters 40-53: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_6 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_147 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_148 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_139 *)
  (* JC_139 *) (sorted arr_1 (integer_of_int32 i_0_0_1) int_P_int_M_arr_4_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 49-53: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_7 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_147 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_148 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_142 *) (* JC_140 *) (* JC_140 *) 1 <= (integer_of_int32 i_0_0_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 143, characters 52-61: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_8 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_147 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_148 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_142 *)
  (* JC_141 *)
  (* JC_141 *) (integer_of_int32 i_0_0_1) <= (integer_of_int32 length_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 309, characters 12-3203: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_9 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_147 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_148 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_144 *)
  (* JC_144 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_1 (pset_range
                                                                  (pset_singleton
                                                                   arr_1) 0 (
                                                                  integer_of_int32
                                                                  i_0_0_1))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 309, characters 12-3203: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_10 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_9: result0 =
                (select
                 int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_10: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_11: (* JC_147 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_12: (* JC_148 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (result1: int32),
  forall (HW_13: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_14: i_0_0_1 = result1),
  (* JC_145 *)
  (* JC_145 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_1 (pset_range
                                                                  (pset_singleton
                                                                   arr_1) 0 
                                                                  ((integer_of_int32
                                                                    length_1) -
                                                                  1))).
Proof.
z3.
Save.

(* Why obligation from file "insert_sort_proved.c", line 83, characters 10-28: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_11 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_15: (integer_of_int32 i_0_0_0) >= (integer_of_int32 length_1)),
  (* JC_110 *)
  (* JC_108 *)
  (* JC_108 *) (sorted arr_1 (integer_of_int32 length_1) int_P_int_M_arr_4_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 139, characters 5-16: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_12 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: ((* JC_139 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_142 *) ((* JC_140 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_141 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_144 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))) /\
                (* JC_145 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_15: (integer_of_int32 i_0_0_0) >= (integer_of_int32 length_1)),
  (* JC_110 *)
  (* JC_109 *)
  (* JC_109 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (pset_range
                                                                  (pset_singleton
                                                                   arr_1) 0 
                                                                  ((integer_of_int32
                                                                    length_1) -
                                                                  1))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 83, characters 10-28: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_13 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_16: (integer_of_int32 length_1) <= 0),
  (* JC_110 *)
  (* JC_108 *)
  (* JC_108 *) (sorted arr_1 (integer_of_int32 length_1) int_P_int_M_arr_4).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 139, characters 5-16: *)
(*Why goal*) Lemma insert_sort_ensures_sorted_po_14 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_16: (integer_of_int32 length_1) <= 0),
  (* JC_110 *)
  (* JC_109 *)
  (* JC_109 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4 (pset_range
                                                                (pset_singleton
                                                                 arr_1) 0 
                                                                ((integer_of_int32
                                                                  length_1) -
                                                                1))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 153, characters 8-14: *)
(*Why goal*) Lemma insert_sort_safety_po_1 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  (offset_min int_P_arr_4_alloc_table arr_1) <= (integer_of_int32 i_0_0_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 153, characters 8-14: *)
(*Why goal*) Lemma insert_sort_safety_po_2 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  (integer_of_int32 i_0_0_0) <= (offset_max int_P_arr_4_alloc_table arr_1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 340, characters 26-112: *)
(*Why goal*) Lemma insert_sort_safety_po_3 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  (* JC_5 *)
  (* JC_2 *)
  (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
  (integer_of_int32 i_0_0_0).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.jc", line 340, characters 26-112: *)
(*Why goal*) Lemma insert_sort_safety_po_4 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  (* JC_5 *) (* JC_3 *) (* JC_3 *) (integer_of_int32 i_0_0_0) > 0.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 152, characters 10-13: *)
(*Why goal*) Lemma insert_sort_safety_po_5 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (* JC_5 *)
                 ((* JC_1 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                 (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                 (integer_of_int32 i_0_0_0) /\
                 (* JC_3 *) (integer_of_int32 i_0_0_0) > 0 /\
                 (* JC_4 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_12: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_13: (* JC_125 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_126 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 152, characters 10-13: *)
(*Why goal*) Lemma insert_sort_safety_po_6 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (* JC_5 *)
                 ((* JC_1 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                 (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                 (integer_of_int32 i_0_0_0) /\
                 (* JC_3 *) (integer_of_int32 i_0_0_0) > 0 /\
                 (* JC_4 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_12: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_13: (* JC_125 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_126 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  ((integer_of_int32 i_0_0_0) + 1) <= 2147483647.
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 142, characters 17-27: *)
(*Why goal*) Lemma insert_sort_safety_po_7 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (* JC_5 *)
                 ((* JC_1 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                 (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                 (integer_of_int32 i_0_0_0) /\
                 (* JC_3 *) (integer_of_int32 i_0_0_0) > 0 /\
                 (* JC_4 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_12: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_13: (* JC_125 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_126 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (HW_15: (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1) /\
                 ((integer_of_int32 i_0_0_0) + 1) <= 2147483647),
  forall (result1: int32),
  forall (HW_16: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_17: i_0_0_1 = result1),
  0 <=
  ((* JC_128 *) ((integer_of_int32 length_1) - (integer_of_int32 i_0_0_0))).
Proof.
ergo.
Save.

(* Why obligation from file "insert_sort_proved.c", line 142, characters 17-27: *)
(*Why goal*) Lemma insert_sort_safety_po_8 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_102 *)
                ((* JC_99 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_100 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_101 *) (integer_of_int32 length_1) > 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_121 *) True),
  forall (HW_7: (* JC_116 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_119 *) ((* JC_117 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_118 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (* JC_5 *)
                 ((* JC_1 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                 (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                 (integer_of_int32 i_0_0_0) /\
                 (* JC_3 *) (integer_of_int32 i_0_0_0) > 0 /\
                 (* JC_4 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_12: ((true = true ->
                   (* JC_28 *)
                   ((* JC_26 *)
                    (forall (v_11:int32),
                     ((integer_of_int32 v_11) <>
                      (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                           v_11) int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                                 v_11) int_P_int_M_arr_4_0))) /\
                   (* JC_27 *)
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                        result0) int_P_int_M_arr_4_1) =
                   ((nb_occ
                     arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                               result0) int_P_int_M_arr_4_0) +
                   1)))) /\
                 ((true = true ->
                   (* JC_22 *)
                   ((* JC_20 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_21 *)
                   (not_assigns
                    int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                    pset_range
                    (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0))))))),
  forall (HW_13: (* JC_125 *)
                 (nb_occ
                  arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32
                                                      (select
                                                       int_P_int_M_arr_4 (
                                                       shift
                                                       arr_1 (integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4_1) =
                 ((nb_occ
                   arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                             (select
                                                              int_P_int_M_arr_4 (
                                                              shift
                                                              arr_1 (
                                                              integer_of_int32
                                                              i_0_0_0)))) int_P_int_M_arr_4) +
                 1)),
  forall (HW_14: (* JC_126 *)
                 (forall (v_12:int32),
                  ((integer_of_int32 v_12) <>
                   (integer_of_int32
                    (select
                     int_P_int_M_arr_4 (shift
                                        arr_1 (integer_of_int32 i_0_0_0)))) ->
                   (nb_occ
                    arr_1 0 (integer_of_int32 i_0_0_0) (integer_of_int32 v_12) int_P_int_M_arr_4_1) =
                   (nb_occ
                    arr_1 0 ((integer_of_int32 i_0_0_0) - 1) (integer_of_int32
                                                              v_12) int_P_int_M_arr_4)))),
  forall (HW_15: (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1) /\
                 ((integer_of_int32 i_0_0_0) + 1) <= 2147483647),
  forall (result1: int32),
  forall (HW_16: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_17: i_0_0_1 = result1),
  ((* JC_128 *) ((integer_of_int32 length_1) - (integer_of_int32 i_0_0_1))) <
  ((* JC_128 *) ((integer_of_int32 length_1) - (integer_of_int32 i_0_0_0))).
Proof.
ergo.
Save.

