\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{center}
\large
1st Asian-Pacific Summer School on Formal Methods\\
Class 11-12: Deductive verification with Frama-C
\end{center}
\section{Introduction}
The goal of these classes is to prove with Frama-C and its jessie
plugin that a C implementation of insert sort is correct. The C code
itself is in \texttt{insert\_sort.c}. The specification, helper
annotations and Coq proofs will be built during the classes.

The algorithm work as follows. We first have a function which insert a
new value $v$ in an already sorted array $a$ of length $l$ (provided
$a[l]$ is a valid location). For that, we start at index $l-1$ and
shift each cell to the right until we reach an index $i$ for which
$a[i]<=v$: $v$ can then be inserted at index $i+1$.

The sort function itself inserts each element of the original array
one by one, so that at each step $i$, the sub-array of length $i$ is sorted.

A C implementation is the following:
\input{insert_sort_orig.pp}

The properties that we want to establish are the following:
\begin{itemize}
\item safety: all array accesses are valid
\item sort: at the end of the \texttt{insert\_sort} function, the array
\texttt{arr} is sorted
\item elements: at the end of \texttt{insert\_sort}, \texttt{arr}
  contains the same elements as before
\end{itemize}

\section{Logic Specifications}
Before writing the function contracts, we have to define the
predicates that we will use.
\begin{enumerate}
\item Define a predicate \texttt{sorted} which, given an array and its
  length is true iff the value of each cell of the array is less than
  or equal to the value of the next one.
\item (Optional) Write a lemma that says that this predicate is
  equivalent to the predicate seen during the course.
\item In order to ensure that the array always contain the same
  elements, we will use a function \texttt{nb\_occ} that counts the number of
  occurrences of a given value in an array. This function can be
  defined axiomatically:
  \begin{itemize}
    \item the function takes as input an array, the two bounds between
      which we count the occurrences, and the value to be searched
    \item a first axiom indicates that if the higher bound is less
      than the lower one, then \texttt{nb\_occ} is $0$
    \item if the bounds $low$ and $high$ are in the correct order,
      there are two cases (thus two axioms): the number of occurrences
      from  from $low$ to $high$ is equal to the number of occurrences
      from $low$ to $high-1$ if the last cell does not contain the
      value of interest. Otherwise, we have to add one to this number.
  \end{itemize}
\end{enumerate}

\section{Function Contracts}
\subsection{\texttt{insert\_sort}}
The main function of the program is \texttt{insert\_sort}. We thus
start by writing its specification. This is the main property that we
want to establish.
\begin{enumerate}
\item What are the pre-conditions for the function (validity of the
  pointers, possible values for the length)?
\item What are the post-conditions (for the sort and elements
  properties respectively)?
\end{enumerate}

\subsection{\texttt{insert}}
This function is an auxiliary function. Its specification must be
complete enough to allow us to prove the contract of
\texttt{insert\_sort}.
\begin{enumerate}
\item What are the pre-conditions (validity, possible values of
  length, fact that the array is sorted)?
\item What are the locations that may be assigned by the function?
\item What is the post-condition for the sort property?
\item What is the post-condition for the elements property? (Don't
  forget that we are \textit{inserting} an element, so the number of
  occurrences is not the same for all values).
\end{enumerate}

\section{Loop invariants}

Loop invariants are not part of the specification \textit{per se}, but
it is not possible to perform a proof without them. For both loops,
the invariants must in particular indicate the following things
\begin{itemize}
\item interval of variation of the indices
\item locations that are unchanged
\item number of occurrences of the various elements
\end{itemize}

For \texttt{insert}, it is in addition important to state that all
cells seen so far are greater than \texttt{val}, and that they have
been shifted on the right.

For \texttt{insert\_sort}, the main invariant is that the beginning of
the array is sorted.

\section{Proof}
Once you're confident with your contracts and your invariants, you may
try to have alt-ergo prove the program. For that, the command line
\begin{verbatim}
frama-c -jessie insert_sort.c
\end{verbatim}

will launch the gwhy interface with all proof obligations generated by
the tool chain. You can then try to have alt-ergo discharge
automatically all of them. If this works, you're done. Otherwise, you
have to check the failed formulas to see if you must refine your
specification (e.g. an invariant is too weak to prove the
post-condition, or too strong and does not hold), or if alt-ergo needs
some more help.

In particular, a few lemmas about \texttt{nb\_occ} might be useful:
\begin{enumerate}
\item split: if we take a third index \texttt{med} between
  \texttt{low} and \texttt{high}, the number of occurrences between
  \texttt{low} and \texttt{high} is the sum of the occurrences between
  \texttt{low} and \texttt{med} and between \texttt{med+1} and \texttt{high}
\item copy: if a portion (between indices \texttt{low2} and
  \texttt{high2} of an array in a state \texttt{L2} is a copy
  of another portion of the array in a state \texttt{L1} (between
  \texttt{low1} and \texttt{high1}), the number of occurrences between
  \texttt{low2} and \texttt{high2} in state \texttt{L2} is the same as
  the number of occurrences between \texttt{low1} and \texttt{high1}
  in state \texttt{L1}
\item reverse: the axioms give a recursive definition by defining the
  number of occurrences between \texttt{low} and \texttt{high} in
  terms of  the number of occurrences between
  \texttt{low} and \texttt{high-1}, but we can establish that there is
  also a relation with the number of occurrences between
  \texttt{low-1} and \texttt{high}
\end{enumerate}

In any case, we need Coq to complete the missing proofs. The following
command will instruct Frama-C to generate a Coq file in which the
``proofs'' consists in a call to ergo:
\begin{verbatim}
frama-c -jessie -jessie-atp coq \
        -jessie-why-opt="--coq-tactic ergo" insert_sort.c
\end{verbatim}
In addition, Frama-c launches \texttt{coqc} which will fail at the first proof
obligation that alt-ergo cannot discharge. You must then edit the
generated Coq file \texttt{insert\_sort\_why.v}, which is in directory
\texttt{insert\_sort.jessie/coq/}\footnote{Don't
  forget to include the directory in Coq's search
  path. You can also cd to that directory.} with coqide or Proof
General and replace the calls to alt-ergo that fail by a real Coq
proof.

Note that calling alt-ergo through Coq is less efficient than through
gwhy. You might want to give alt-ergo a bit more time by writing
\begin{verbatim}
Dp_timeout 20.
\end{verbatim}
at the beginning of the Coq file.

Since writing a Coq proof can be quite time consuming, be really sure
that your specification is correct before that.

\end{document}

Local Variables:
mode: latex
ispell-local-dictionary: "english"
End:
