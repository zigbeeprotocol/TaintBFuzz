(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export jessie_why.

(*Why type*) Definition char_P: Set.
Admitted.

(*Why type*) Definition int32: Set.
Admitted.

(*Why type*) Definition int8: Set.
Admitted.

(*Why type*) Definition int_P: Set.
Admitted.

(*Why type*) Definition padding: Set.
Admitted.

(*Why type*) Definition void_P: Set.
Admitted.

(*Why logic*) Definition bitvector_of_char_P : (pointer char_P) -> bitvector.
Admitted.

(*Why logic*) Definition char_P_of_bitvector : bitvector -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_char_P_of_char_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_char_P (char_P_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_int32 : int32 -> bitvector.
Admitted.

(*Why logic*) Definition int32_of_bitvector : bitvector -> int32.
Admitted.

(*Why axiom*) Lemma bitvector_of_int32_of_int32_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int32 (int32_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_int8 : int8 -> bitvector.
Admitted.

(*Why logic*) Definition int8_of_bitvector : bitvector -> int8.
Admitted.

(*Why axiom*) Lemma bitvector_of_int8_of_int8_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int8 (int8_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_int_P : (pointer int_P) -> bitvector.
Admitted.

(*Why logic*) Definition int_P_of_bitvector : bitvector -> (pointer int_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_int_P_of_int_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_int_P (int_P_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition bitvector_of_void_P : (pointer void_P) -> bitvector.
Admitted.

(*Why logic*) Definition void_P_of_bitvector : bitvector -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma bitvector_of_void_P_of_void_P_of_bitvector :
  (forall (x:bitvector), (bitvector_of_void_P (void_P_of_bitvector x)) = x).
Admitted.

(*Why logic*) Definition char_P_tag : (tag_id char_P).
Admitted.

(*Why axiom*) Lemma char_P_int : (int_of_tag char_P_tag) = 1.
Admitted.

(*Why axiom*) Lemma char_P_of_bitvector_of_bitvector_of_char_P :
  (forall (x:(pointer char_P)),
   (char_P_of_bitvector (bitvector_of_char_P x)) = x).
Admitted.

(*Why logic*) Definition char_P_of_pointer_address :
  (pointer unit) -> (pointer char_P).
Admitted.

(*Why axiom*) Lemma char_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer char_P)),
   p = (char_P_of_pointer_address (pointer_address p))).
Admitted.

(*Why axiom*) Lemma char_P_parenttag_bottom :
  (parenttag char_P_tag (@bottom_tag char_P)).
Admitted.

(*Why axiom*) Lemma char_P_tags :
  (forall (x:(pointer char_P)),
   (forall (char_P_tag_table:(tag_table char_P)),
    (instanceof char_P_tag_table x char_P_tag))).
Admitted.

(*Why logic*) Definition integer_of_int32 : int32 -> Z.
Admitted.

(*Why predicate*) Definition eq_int32  (x:int32) (y:int32)
  := (integer_of_int32 x) = (integer_of_int32 y).

(*Why logic*) Definition integer_of_int8 : int8 -> Z.
Admitted.

(*Why predicate*) Definition eq_int8  (x:int8) (y:int8)
  := (integer_of_int8 x) = (integer_of_int8 y).

(*Why logic*) Definition int32_of_integer : Z -> int32.
Admitted.

(*Why axiom*) Lemma int32_coerce :
  (forall (x:Z),
   ((-2147483648) <= x /\ x <= 2147483647 ->
    (integer_of_int32 (int32_of_integer x)) = x)).
Admitted.

(*Why axiom*) Lemma int32_of_bitvector_of_bitvector_of_int32 :
  (forall (x:int32), (eq_int32 (int32_of_bitvector (bitvector_of_int32 x)) x)).
Admitted.

(*Why axiom*) Lemma int32_range :
  (forall (x:int32), (-2147483648) <= (integer_of_int32 x) /\
   (integer_of_int32 x) <= 2147483647).
Admitted.

(*Why logic*) Definition int8_of_integer : Z -> int8.
Admitted.

(*Why axiom*) Lemma int8_coerce :
  (forall (x:Z),
   ((-128) <= x /\ x <= 127 -> (integer_of_int8 (int8_of_integer x)) = x)).
Admitted.

(*Why axiom*) Lemma int8_of_bitvector_of_bitvector_of_int8 :
  (forall (x:int8), (eq_int8 (int8_of_bitvector (bitvector_of_int8 x)) x)).
Admitted.

(*Why axiom*) Lemma int8_range :
  (forall (x:int8), (-128) <= (integer_of_int8 x) /\ (integer_of_int8 x) <=
   127).
Admitted.

(*Why logic*) Definition int_P_tag : (tag_id int_P).
Admitted.

(*Why axiom*) Lemma int_P_int : (int_of_tag int_P_tag) = 1.
Admitted.

(*Why axiom*) Lemma int_P_of_bitvector_of_bitvector_of_int_P :
  (forall (x:(pointer int_P)),
   (int_P_of_bitvector (bitvector_of_int_P x)) = x).
Admitted.

(*Why logic*) Definition int_P_of_pointer_address :
  (pointer unit) -> (pointer int_P).
Admitted.

(*Why axiom*) Lemma int_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer int_P)),
   p = (int_P_of_pointer_address (pointer_address p))).
Admitted.

(*Why axiom*) Lemma int_P_parenttag_bottom :
  (parenttag int_P_tag (@bottom_tag int_P)).
Admitted.

(*Why axiom*) Lemma int_P_tags :
  (forall (x:(pointer int_P)),
   (forall (int_P_tag_table:(tag_table int_P)),
    (instanceof int_P_tag_table x int_P_tag))).
Admitted.

(*Why predicate*) Definition left_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_int_P  (p:(pointer int_P)) (a:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a.

(*Why logic*) Definition nb_occ :
  (pointer int_P) -> Z -> Z -> int32 -> (memory int_P int32) -> Z.
Admitted.

(*Why axiom*) Lemma nb_occ_0 :
  (forall (int_P_int_M_arr_1_at_L:(memory int_P int32)),
   (forall (arr_0_0:(pointer int_P)),
    (forall (low_0:Z),
     (forall (high_0:Z),
      (forall (val_0_0:int32),
       (high_0 < low_0 ->
        (nb_occ arr_0_0 low_0 high_0 val_0_0 int_P_int_M_arr_1_at_L) = 0)))))).
Admitted.

(*Why axiom*) Lemma nb_occ_eq :
  (forall (int_P_int_M_arr_1_at_L:(memory int_P int32)),
   (forall (low_1:Z),
    (forall (high_1:Z),
     (forall (arr_1_0:(pointer int_P)),
      (forall (v:int32),
       ((integer_of_int32 v) =
        (integer_of_int32
         (select int_P_int_M_arr_1_at_L (shift arr_1_0 high_1))) ->
        (nb_occ arr_1_0 low_1 high_1 v int_P_int_M_arr_1_at_L) =
        ((nb_occ arr_1_0 low_1 (high_1 - 1) v int_P_int_M_arr_1_at_L) + 1))))))).
Admitted.

(*Why axiom*) Lemma nb_occ_neq :
  (forall (int_P_int_M_arr_1_at_L:(memory int_P int32)),
   (forall (low_2:Z),
    (forall (high_2:Z),
     (forall (arr_2:(pointer int_P)),
      (forall (v_0:int32),
       ((integer_of_int32 v_0) <>
        (integer_of_int32
         (select int_P_int_M_arr_1_at_L (shift arr_2 high_2))) ->
        (nb_occ arr_2 low_2 high_2 v_0 int_P_int_M_arr_1_at_L) =
        (nb_occ arr_2 low_2 (high_2 - 1) v_0 int_P_int_M_arr_1_at_L))))))).
Admitted.

(* Why obligation from file "insert_sort.jc", line 92, characters 0-513: *)
(*Why goal*) Lemma nb_occ_rev : 
  (forall (int_P_int_M_arr_5_10_at_L:(memory int_P int32)),
   (forall (arr_5:(pointer int_P)),
    (forall (low_4:Z),
     (forall (high_4:Z),
      (forall (val_2:int32),
       (low_4 <= high_4 ->
        (((integer_of_int32
           (select int_P_int_M_arr_5_10_at_L (shift arr_5 low_4))) =
          (integer_of_int32 val_2) ->
          (nb_occ arr_5 low_4 high_4 val_2 int_P_int_M_arr_5_10_at_L) =
          ((nb_occ arr_5 (low_4 + 1) high_4 val_2 int_P_int_M_arr_5_10_at_L) +
          1))) /\
        (((integer_of_int32
           (select int_P_int_M_arr_5_10_at_L (shift arr_5 low_4))) <>
          (integer_of_int32 val_2) ->
          (nb_occ arr_5 low_4 high_4 val_2 int_P_int_M_arr_5_10_at_L) =
          (nb_occ arr_5 (low_4 + 1) high_4 val_2 int_P_int_M_arr_5_10_at_L))))))))).
Proof.
intros mem arr low high val Hle.
pose (ind_var:=high-low).
cut (high=low+ind_var).
Focus 2. unfold ind_var; auto with zarith.
intros Heq; rewrite Heq; clear Heq.
split.
intros Heq_ind.
apply (Zlt_0_ind (fun ind_var => nb_occ arr low (low + ind_var) val mem =
nb_occ arr (low + 1) (low + ind_var) val mem + 1)).
intros x Hind Hxpos.
elim (Z_le_lt_eq_dec _ _ Hxpos).
intros Hxspos.
elim (Z_eq_dec (integer_of_int32 (select mem (shift arr (low + x)))) (integer_of_int32 val)).
intros Heq_ind2.
rewrite (nb_occ_eq mem low (low+x) arr val); auto with zarith.
rewrite (nb_occ_eq mem (low+1) (low+x) arr val); auto with zarith.
specialize (Hind (x-1)).
cut (low+x-1 = low+(x-1)); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
auto with zarith.
intros Hneq_ind.
rewrite (nb_occ_neq mem low (low+x) arr val); auto with zarith.
rewrite (nb_occ_neq mem (low+1) (low+x) arr val); auto with zarith.
specialize (Hind (x-1)).
cut (low+x-1 = low+(x-1)); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
auto with zarith.
intros Hx0; rewrite <- Hx0; clear Hx0.
rewrite (Zplus_0_r low).
rewrite (nb_occ_eq mem low low arr val); auto with zarith.
rewrite (nb_occ_0 mem arr low (low -1) val); auto with zarith.
rewrite (nb_occ_0 mem arr (low+1) low val); auto with zarith.
unfold ind_var; auto with zarith.
intros Hneq_ind.
apply (Zlt_0_ind (fun ind_var => nb_occ arr low (low + ind_var) val mem =
nb_occ arr (low + 1) (low + ind_var) val mem)).
intros x Hind Hxpos.
elim (Z_le_lt_eq_dec _ _ Hxpos).
intros Hxspos.
elim (Z_eq_dec (integer_of_int32 (select mem (shift arr (low + x)))) (integer_of_int32 val)).
intros Heq_ind2.
rewrite (nb_occ_eq mem low (low+x) arr val); auto with zarith.
rewrite (nb_occ_eq mem (low+1) (low+x) arr val); auto with zarith.
specialize (Hind (x-1)).
cut (low+x-1 = low+(x-1)); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
auto with zarith.
intros Hneq_ind2.
rewrite (nb_occ_neq mem low (low+x) arr val); auto with zarith.
rewrite (nb_occ_neq mem (low+1) (low+x) arr val); auto with zarith.
specialize (Hind (x-1)).
cut (low+x-1 = low+(x-1)); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
auto with zarith.
intros Hx0; rewrite <- Hx0; clear Hx0.
rewrite (Zplus_0_r low).
rewrite (nb_occ_neq mem low low arr val); auto with zarith.
rewrite (nb_occ_0 mem arr low (low -1) val); auto with zarith.
rewrite (nb_occ_0 mem arr (low+1) low val); auto with zarith.
unfold ind_var; auto with zarith.
Save.

(*Why axiom*) Lemma nb_occ_rev_as_axiom :
  (forall (int_P_int_M_arr_5_10_at_L:(memory int_P int32)),
   (forall (arr_5:(pointer int_P)),
    (forall (low_4:Z),
     (forall (high_4:Z),
      (forall (val_2:int32),
       (low_4 <= high_4 ->
        (((integer_of_int32
           (select int_P_int_M_arr_5_10_at_L (shift arr_5 low_4))) =
          (integer_of_int32 val_2) ->
          (nb_occ arr_5 low_4 high_4 val_2 int_P_int_M_arr_5_10_at_L) =
          ((nb_occ arr_5 (low_4 + 1) high_4 val_2 int_P_int_M_arr_5_10_at_L) +
          1))) /\
        (((integer_of_int32
           (select int_P_int_M_arr_5_10_at_L (shift arr_5 low_4))) <>
          (integer_of_int32 val_2) ->
          (nb_occ arr_5 low_4 high_4 val_2 int_P_int_M_arr_5_10_at_L) =
          (nb_occ arr_5 (low_4 + 1) high_4 val_2 int_P_int_M_arr_5_10_at_L))))))))).
Admitted.

(* Why obligation from file "insert_sort.jc", line 77, characters 0-582: *)
(*Why goal*) Lemma nb_occ_same : 
  (forall (int_P_int_M_arr_4_9_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_4_9_at_L1:(memory int_P int32)),
    (forall (low1:Z),
     (forall (high1:Z),
      (forall (low2:Z),
       (forall (high2:Z),
        (forall (arr_4:(pointer int_P)),
         (forall (v_1:int32),
          ((high1 - low1) = (high2 - low2) ->
           ((forall (i:Z),
             (0 <= i /\ i <= (high1 - low1) ->
              (integer_of_int32
               (select int_P_int_M_arr_4_9_at_L1 (shift arr_4 (low1 + i)))) =
              (integer_of_int32
               (select int_P_int_M_arr_4_9_at_L2 (shift arr_4 (low2 + i)))))) ->
            (nb_occ arr_4 low1 high1 v_1 int_P_int_M_arr_4_9_at_L1) =
            (nb_occ arr_4 low2 high2 v_1 int_P_int_M_arr_4_9_at_L2))))))))))).
Proof.
intuition.
elim (Z_lt_le_dec high1 low1); intros Hcomp.
rewrite (nb_occ_0 int_P_int_M_arr_4_9_at_L1 arr_4 low1 high1 v_1 ); trivial.
rewrite  (nb_occ_0 int_P_int_M_arr_4_9_at_L2 arr_4 low2 high2 v_1 ); auto with zarith.

pose (ind_var:= high1 - low1).
cut (high1 = low1+ind_var).
Focus 2.
unfold ind_var; auto with zarith.
intros Heq; rewrite Heq.
cut (high2 = low2+ind_var).
Focus 2.
unfold ind_var; auto with zarith.
intros Heq2; rewrite Heq2.
apply (Zlt_0_ind (fun ind_var => ind_var <= high1 - low1 ->
nb_occ arr_4 low1 (low1+ind_var) v_1 int_P_int_M_arr_4_9_at_L1 =
nb_occ arr_4 low2 (low2+ind_var) v_1 int_P_int_M_arr_4_9_at_L2)).
intros x Hind Hle Hle1.
elim (Z_le_lt_eq_dec _ _ Hle).
intros Hlt.
elim (Z_eq_dec (integer_of_int32 v_1) 
                        (integer_of_int32 (select int_P_int_M_arr_4_9_at_L1 (shift arr_4 (low1+x))))); intros Hcomp2.
rewrite (nb_occ_eq int_P_int_M_arr_4_9_at_L1 low1 (low1 + x) arr_4 v_1 ); trivial.
rewrite (nb_occ_eq int_P_int_M_arr_4_9_at_L2 low2 (low2 + x) arr_4 v_1 ); auto with zarith.
cut (low1 + x -1 = low1 + (x-1)); auto with zarith.
cut (low2 + x -1 = low2 + (x-1)); auto with zarith.
intros Hass; rewrite Hass; clear Hass; intros Hass; rewrite Hass; clear Hass.
rewrite (Hind (x-1)); auto with zarith.
rewrite <- H0; auto with zarith.
rewrite (nb_occ_neq int_P_int_M_arr_4_9_at_L1 low1 (low1 + x) arr_4 v_1 ); trivial.
rewrite (nb_occ_neq int_P_int_M_arr_4_9_at_L2 low2 (low2 + x) arr_4 v_1 ); auto with zarith.
cut (low1 + x -1 = low1 + (x-1)); auto with zarith.
cut (low2 + x -1 = low2 + (x-1)); auto with zarith.
intros Hass; rewrite Hass; clear Hass; intros Hass; rewrite Hass; clear Hass.
rewrite (Hind (x-1)); auto with zarith.
rewrite <- H0; auto with zarith.
intros Ht; rewrite <- Ht; clear Ht; simpl.
rewrite (Zplus_0_r low1); rewrite (Zplus_0_r low2).
elim (Z_eq_dec (integer_of_int32 v_1) 
                        (integer_of_int32 (select int_P_int_M_arr_4_9_at_L1 (shift arr_4 (low1))))); intros Hcomp2.
rewrite (nb_occ_eq int_P_int_M_arr_4_9_at_L1 low1 low1 arr_4 v_1 ); trivial.
rewrite (nb_occ_eq int_P_int_M_arr_4_9_at_L2 low2 low2 arr_4 v_1 ); auto with zarith.
rewrite (nb_occ_0 int_P_int_M_arr_4_9_at_L1 arr_4 low1 (low1 -1) v_1).
rewrite (nb_occ_0 int_P_int_M_arr_4_9_at_L2 arr_4 low2 (low2 -1) v_1); auto with zarith.
auto with zarith.
rewrite Hcomp2. rewrite <- (Zplus_0_r low1); rewrite <- (Zplus_0_r low2). rewrite H0; auto with zarith.
rewrite (nb_occ_neq int_P_int_M_arr_4_9_at_L1 low1 low1 arr_4 v_1 ); trivial.
rewrite (nb_occ_neq int_P_int_M_arr_4_9_at_L2 low2 low2 arr_4 v_1 ); auto with zarith.
rewrite (nb_occ_0 int_P_int_M_arr_4_9_at_L1 arr_4 low1 (low1 -1) v_1).
rewrite (nb_occ_0 int_P_int_M_arr_4_9_at_L2 arr_4 low2 (low2 -1) v_1); auto with zarith.
auto with zarith.
rewrite <- (Zplus_0_r low2). rewrite <- H0; auto with zarith.
rewrite (Zplus_0_r low1). auto with zarith.
auto with zarith.
auto with zarith.

(* FILL PROOF HERE *)
Save.

(*Why axiom*) Lemma nb_occ_same_as_axiom :
  (forall (int_P_int_M_arr_4_9_at_L2:(memory int_P int32)),
   (forall (int_P_int_M_arr_4_9_at_L1:(memory int_P int32)),
    (forall (low1:Z),
     (forall (high1:Z),
      (forall (low2:Z),
       (forall (high2:Z),
        (forall (arr_4:(pointer int_P)),
         (forall (v_1:int32),
          ((high1 - low1) = (high2 - low2) ->
           ((forall (i:Z),
             (0 <= i /\ i <= (high1 - low1) ->
              (integer_of_int32
               (select int_P_int_M_arr_4_9_at_L1 (shift arr_4 (low1 + i)))) =
              (integer_of_int32
               (select int_P_int_M_arr_4_9_at_L2 (shift arr_4 (low2 + i)))))) ->
            (nb_occ arr_4 low1 high1 v_1 int_P_int_M_arr_4_9_at_L1) =
            (nb_occ arr_4 low2 high2 v_1 int_P_int_M_arr_4_9_at_L2))))))))))).
Admitted.



(* Why obligation from file "insert_sort.jc", line 66, characters 0-388: *)
(*Why goal*) Lemma nb_occ_split : 
  (forall (int_P_int_M_arr_3_8_at_L:(memory int_P int32)),
   (forall (arr_3:(pointer int_P)),
    (forall (low_3:Z),
     (forall (med:Z),
      (forall (high_3:Z),
       (forall (val_1:int32),
        (low_3 <= med /\ med <= high_3 ->
         (nb_occ arr_3 low_3 high_3 val_1 int_P_int_M_arr_3_8_at_L) =
         ((nb_occ arr_3 low_3 med val_1 int_P_int_M_arr_3_8_at_L) +
         (nb_occ arr_3 (med + 1) high_3 val_1 int_P_int_M_arr_3_8_at_L))))))))).
Proof.
intuition.
pose (ind_var:=med-low_3).
cut (med = low_3+ind_var).
Focus 2. unfold ind_var; auto with zarith.
intros Heq; rewrite Heq; clear Heq.
cut (low_3+ind_var <= high_3).
Focus 2. unfold ind_var; auto with zarith.
apply (Zlt_0_ind (fun ind_var => low_3+ind_var <= high_3 -> nb_occ arr_3 low_3 high_3 val_1 int_P_int_M_arr_3_8_at_L =
nb_occ arr_3 low_3 (low_3 + ind_var) val_1 int_P_int_M_arr_3_8_at_L +
nb_occ arr_3 (low_3 + ind_var + 1) high_3 val_1 int_P_int_M_arr_3_8_at_L

 )).
intros x Hind Hxpos.
elim (Z_le_lt_eq_dec _ _ Hxpos).
intros Hxspos.
intros Hind_stop.
elim (nb_occ_rev int_P_int_M_arr_3_8_at_L arr_3 (low_3 + x) high_3 val_1 Hind_stop).
intros Hnb_occ_rev_eq Hnb_occ_rev_neq.
elim (Z_eq_dec (integer_of_int32 (select int_P_int_M_arr_3_8_at_L (shift arr_3 (low_3 +  x))))
                        (integer_of_int32 val_1)).


intros Heq.
rewrite (nb_occ_eq int_P_int_M_arr_3_8_at_L low_3 (low_3+x) arr_3 val_1); auto with zarith.
cut (nb_occ arr_3 low_3 (low_3 + x - 1) val_1 int_P_int_M_arr_3_8_at_L + 1 +
nb_occ arr_3 (low_3 + x + 1) high_3 val_1 int_P_int_M_arr_3_8_at_L = 
nb_occ arr_3 low_3 (low_3 + x - 1) val_1 int_P_int_M_arr_3_8_at_L +
((nb_occ arr_3 (low_3 + x + 1) high_3 val_1 int_P_int_M_arr_3_8_at_L) + 1)); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
rewrite <- Hnb_occ_rev_eq; auto with zarith.
specialize (Hind (x-1)); auto with zarith.
cut (low_3 + x - 1 = low_3 + (x-1)); auto with zarith.
cut (low_3+x = low_3+(x-1)+1); auto with zarith.
intros Hrew Hrew1; rewrite Hrew1; rewrite Hrew; apply Hind; auto with zarith.

intros Hneq.
rewrite (nb_occ_neq int_P_int_M_arr_3_8_at_L low_3 (low_3+x) arr_3 val_1); auto with zarith.
rewrite <- Hnb_occ_rev_neq; auto with zarith.
specialize (Hind (x-1)); auto with zarith.
cut (low_3 + x - 1 = low_3 + (x-1)); auto with zarith.
cut (low_3+x = low_3+(x-1)+1); auto with zarith.
intros Hrew Hrew1; rewrite Hrew1; rewrite Hrew; apply Hind; auto with zarith.

intros Hx0.
rewrite <- Hx0.
rewrite (Zplus_0_r low_3).
intros Hle.
elim (nb_occ_rev int_P_int_M_arr_3_8_at_L arr_3 low_3 high_3 val_1 Hle).
intros Hnb_occ_rev_eq Hnb_occ_rev_neq.
elim (Z_eq_dec (integer_of_int32 (select int_P_int_M_arr_3_8_at_L (shift arr_3 (low_3))))
                        (integer_of_int32 val_1)).
intros Heq.
rewrite (nb_occ_eq int_P_int_M_arr_3_8_at_L low_3 low_3 arr_3 val_1); auto with zarith.
rewrite (nb_occ_0  int_P_int_M_arr_3_8_at_L arr_3 low_3 (low_3 -1) val_1); auto with zarith.
intros Hneq.
rewrite (nb_occ_neq int_P_int_M_arr_3_8_at_L low_3 low_3 arr_3 val_1); auto with zarith.
rewrite (nb_occ_0  int_P_int_M_arr_3_8_at_L arr_3 low_3 (low_3 -1) val_1); auto with zarith.
unfold ind_var; auto with zarith.





Save.

(*Why axiom*) Lemma nb_occ_split_as_axiom :
  (forall (int_P_int_M_arr_3_8_at_L:(memory int_P int32)),
   (forall (arr_3:(pointer int_P)),
    (forall (low_3:Z),
     (forall (med:Z),
      (forall (high_3:Z),
       (forall (val_1:int32),
        (low_3 <= med /\ med <= high_3 ->
         (nb_occ arr_3 low_3 high_3 val_1 int_P_int_M_arr_3_8_at_L) =
         ((nb_occ arr_3 low_3 med val_1 int_P_int_M_arr_3_8_at_L) +
         (nb_occ arr_3 (med + 1) high_3 val_1 int_P_int_M_arr_3_8_at_L))))))))).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_char_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (char_P_of_pointer_address p))).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_int_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (int_P_of_pointer_address p))).
Admitted.

(*Why logic*) Definition void_P_of_pointer_address :
  (pointer unit) -> (pointer void_P).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_void_P_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (void_P_of_pointer_address p))).
Admitted.

(*Why predicate*) Definition right_valid_struct_char_P  (p:(pointer char_P)) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_int_P  (p:(pointer int_P)) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_void_P  (p:(pointer void_P)) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition sorted  (arr_6:(pointer int_P)) (length:Z) (int_P_int_M_arr_6_2_at_L:(memory int_P int32))
  := (forall (i_0:Z),
      (0 <= i_0 /\ i_0 < (length - 1) ->
       (integer_of_int32 (select int_P_int_M_arr_6_2_at_L (shift arr_6 i_0))) <=
       (integer_of_int32
        (select int_P_int_M_arr_6_2_at_L (shift arr_6 (i_0 + 1)))))).

(*Why predicate*) Definition strict_valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) = a /\
     (offset_max int_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) = a /\
     (offset_max char_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) = a /\
     (offset_max int_P_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) = a /\
     (offset_max void_P_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_char_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_int_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_bitvector_struct_void_P  (p:(pointer unit)) (a:Z) (b:Z) (bitvector_alloc_table:(alloc_table unit))
  := (offset_min bitvector_alloc_table p) = a /\
     (offset_max bitvector_alloc_table p) = b.

(*Why predicate*) Definition valid_root_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a /\
     (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_char_P  (p:(pointer char_P)) (a:Z) (b:Z) (char_P_alloc_table:(alloc_table char_P))
  := (offset_min char_P_alloc_table p) <= a /\
     (offset_max char_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_int_P  (p:(pointer int_P)) (a:Z) (b:Z) (int_P_alloc_table:(alloc_table int_P))
  := (offset_min int_P_alloc_table p) <= a /\
     (offset_max int_P_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_void_P  (p:(pointer void_P)) (a:Z) (b:Z) (void_P_alloc_table:(alloc_table void_P))
  := (offset_min void_P_alloc_table p) <= a /\
     (offset_max void_P_alloc_table p) >= b.

(*Why logic*) Definition void_P_tag : (tag_id void_P).
Admitted.

(*Why axiom*) Lemma void_P_int : (int_of_tag void_P_tag) = 1.
Admitted.

(*Why axiom*) Lemma void_P_of_bitvector_of_bitvector_of_void_P :
  (forall (x:(pointer void_P)),
   (void_P_of_bitvector (bitvector_of_void_P x)) = x).
Admitted.

(*Why axiom*) Lemma void_P_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer void_P)),
   p = (void_P_of_pointer_address (pointer_address p))).
Admitted.

(*Why axiom*) Lemma void_P_parenttag_bottom :
  (parenttag void_P_tag (@bottom_tag void_P)).
Admitted.

(*Why axiom*) Lemma void_P_tags :
  (forall (x:(pointer void_P)),
   (forall (void_P_tag_table:(tag_table void_P)),
    (instanceof void_P_tag_table x void_P_tag))).
Admitted.

(* Why obligation from file "insert_sort.c", line 76, characters 21-112: *)
(*Why goal*) Lemma insert_ensures_default_po_1 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  (* JC_47 *)
  (* JC_47 *)
  (forall (v_2:int32),
   (nb_occ
    arr_0 ((integer_of_int32 i_1) + 2) (integer_of_int32 length_0) v_2 int_P_int_M_arr_0_3) =
   (nb_occ
    arr_0 ((integer_of_int32 i_1) + 1) ((integer_of_int32 length_0) - 1) v_2 int_P_int_M_arr_0_3)).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 72, characters 21-82: *)
(*Why goal*) Lemma insert_ensures_default_po_2 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  (* JC_49 *)
  (* JC_49 *)
  (forall (j:Z),
   (((integer_of_int32 i_1) + 1) < j /\ j <= (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j))) >
    (integer_of_int32 val_0))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 70, characters 21-95: *)
(*Why goal*) Lemma insert_ensures_default_po_3 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  (* JC_50 *)
  (* JC_50 *)
  (forall (j_0:Z),
   (((integer_of_int32 i_1) + 1) < j_0 /\ j_0 <=
    (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_0))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 67, characters 19-24: *)
(*Why goal*) Lemma insert_ensures_default_po_4 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  (* JC_54 *) (* JC_52 *) (* JC_52 *) (-1) <= (integer_of_int32 i_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 67, characters 23-31: *)
(*Why goal*) Lemma insert_ensures_default_po_5 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  (* JC_54 *)
  (* JC_53 *)
  (* JC_53 *) (integer_of_int32 i_1) < (integer_of_int32 length_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 134, characters 9-1951: *)
(*Why goal*) Lemma insert_ensures_default_po_6 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  (* JC_56 *)
  (* JC_56 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 76, characters 21-112: *)
(*Why goal*) Lemma insert_ensures_default_po_7 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_47 *)
  (* JC_47 *)
  (forall (v_2:int32),
   (nb_occ
    arr_0 ((integer_of_int32 i_1_1) + 2) (integer_of_int32 length_0) v_2 int_P_int_M_arr_0_3_1) =
   (nb_occ
    arr_0 ((integer_of_int32 i_1_1) + 1) ((integer_of_int32 length_0) - 1) v_2 int_P_int_M_arr_0_3)).
Proof.
intuition.
apply nb_occ_same; auto with zarith.
rewrite HW_17; clear HW_17.
clear i_1_1; rewrite HW_16; clear HW_16 result3.
cut (integer_of_int32 i_1_0 - 1 + 2 = integer_of_int32 i_1_0 +1); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
clear v_2.
intros i Hind; elim Hind.
intros Hipos Himax.
rewrite HW_15; clear HW_15 int_P_int_M_arr_0_3_1.
rewrite HW_14; clear HW_14 result2.
elim (Z_le_lt_eq_dec _  _ Hipos).
intros Hispos.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                                                  (shift arr_0 (integer_of_int32 i_1_0 + 1 + i)) result1).
cut (integer_of_int32 i_1_0 - 1 + 1 + i = (integer_of_int32 i_1_0 + 1 + i) -1); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
apply H8.
auto with zarith.
apply neq_shift; auto with zarith.
intros Hi0; rewrite <- Hi0; clear Hi0.
rewrite (Zplus_0_r (integer_of_int32 i_1_0 + 1)).
rewrite (Zplus_0_r (integer_of_int32 i_1_0 -1 + 1)).
cut (integer_of_int32 i_1_0 -1 + 1 = integer_of_int32 i_1_0); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew.
rewrite (select_store_eq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                                      (shift arr_0 (integer_of_int32 i_1_0 + 1))result1).
rewrite HW_13; clear HW_13 result1.
apply H9; auto with zarith.
trivial.
Save.

(* Why obligation from file "insert_sort.c", line 74, characters 21-87: *)
(*Why goal*) Lemma insert_ensures_default_po_8 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_48 *)
  (* JC_48 *)
  (forall (v_3:int32),
   (nb_occ arr_0 0 (integer_of_int32 i_1_1) v_3 int_P_int_M_arr_0_3_1) =
   (nb_occ arr_0 0 (integer_of_int32 i_1_1) v_3 int_P_int_M_arr_0_3)).
Proof.
intuition.
apply nb_occ_same.
trivial.
rewrite HW_17; clear HW_17 i_1_1.
rewrite HW_16; clear HW_16 result3.
rewrite HW_15; clear HW_15  int_P_int_M_arr_0_3_1.
rewrite HW_14; clear HW_14 result2.
rewrite (Zminus_0_r (integer_of_int32 i_1_0 - 1)).
intros i Hind.
rewrite (Zplus_0_l i).
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1)) (shift arr_0 i)).
apply H9; auto with zarith.
apply neq_shift; auto with zarith.

Save.

(* Why obligation from file "insert_sort.c", line 72, characters 21-82: *)
(*Why goal*) Lemma insert_ensures_default_po_9 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_49 *)
  (* JC_49 *)
  (forall (j:Z),
   (((integer_of_int32 i_1_1) + 1) < j /\ j <= (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j))) >
    (integer_of_int32 val_0))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 70, characters 21-95: *)
(*Why goal*) Lemma insert_ensures_default_po_10 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_50 *)
  (* JC_50 *)
  (forall (j_0:Z),
   (((integer_of_int32 i_1_1) + 1) < j_0 /\ j_0 <=
    (integer_of_int32 length_0) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j_0))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 68, characters 21-87: *)
(*Why goal*) Lemma insert_ensures_default_po_11 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_51 *)
  (* JC_51 *)
  (forall (j_1:Z),
   (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_1) + 1) ->
    (integer_of_int32 (select int_P_int_M_arr_0_3_1 (shift arr_0 j_1))) =
    (integer_of_int32 (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 67, characters 19-24: *)
(*Why goal*) Lemma insert_ensures_default_po_12 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_54 *) (* JC_52 *) (* JC_52 *) (-1) <= (integer_of_int32 i_1_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 67, characters 23-31: *)
(*Why goal*) Lemma insert_ensures_default_po_13 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_54 *)
  (* JC_53 *)
  (* JC_53 *) (integer_of_int32 i_1_1) < (integer_of_int32 length_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 134, characters 9-1951: *)
(*Why goal*) Lemma insert_ensures_default_po_14 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_12: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (result2: int32),
  forall (HW_14: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_15: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  forall (result3: int32),
  forall (HW_16: (integer_of_int32 result3) = ((integer_of_int32 i_1_0) - 1)),
  forall (i_1_1: int32),
  forall (HW_17: i_1_1 = result3),
  (* JC_56 *)
  (* JC_56 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 47, characters 12-32: *)
(*Why goal*) Lemma insert_ensures_default_po_15 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  (* JC_17 *)
  (* JC_15 *)
  (* JC_13 *)
  (* JC_13 *)
  (sorted arr_0 ((integer_of_int32 length_0) + 1) int_P_int_M_arr_0_3_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 48, characters 12-186: *)
(*Why goal*) Lemma insert_ensures_default_po_16 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (v_4: int32),
  forall (HW_24: (integer_of_int32 v_4) <> (integer_of_int32 val_0)),
  (* JC_17 *)
  (* JC_15 *)
  (* JC_14 *)
  (nb_occ arr_0 0 (integer_of_int32 length_0) v_4 int_P_int_M_arr_0_3_1) =
  (nb_occ arr_0 0 ((integer_of_int32 length_0) - 1) v_4 int_P_int_M_arr_0_3).
Proof.
intuition.
rewrite (nb_occ_split int_P_int_M_arr_0_3_1 arr_0 0 (integer_of_int32 i_1_0) (integer_of_int32 length_0) v_4).
rewrite (nb_occ_split int_P_int_M_arr_0_3 arr_0 0 (integer_of_int32 i_1_0) (integer_of_int32 length_0 - 1) v_4).
rewrite (nb_occ_split int_P_int_M_arr_0_3_1 arr_0 (integer_of_int32 i_1_0 + 1) (integer_of_int32 i_1_0 + 1) (integer_of_int32 length_0) v_4).
rewrite (nb_occ_same int_P_int_M_arr_0_3_0 int_P_int_M_arr_0_3_1 0 (integer_of_int32 i_1_0)
                                    0 (integer_of_int32 i_1_0) arr_0 v_4).
rewrite (nb_occ_same int_P_int_M_arr_0_3_0 int_P_int_M_arr_0_3_1 
                                   (integer_of_int32 i_1_0 + 1 + 1) (integer_of_int32 length_0)
                                   (integer_of_int32 i_1_0 + 1 + 1) (integer_of_int32 length_0)
                                   arr_0 v_4).
rewrite (nb_occ_neq int_P_int_M_arr_0_3_1 (integer_of_int32 i_1_0 + 1) (integer_of_int32 i_1_0 + 1)
                                 arr_0 v_4).
rewrite (nb_occ_0 int_P_int_M_arr_0_3_1 arr_0  (integer_of_int32 i_1_0 + 1) (integer_of_int32 i_1_0 + 1 -1) v_4);
auto with zarith.
rewrite H3. 
cut (integer_of_int32 i_1_0 + 1 + 1 = integer_of_int32 i_1_0 + 2); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew; 
rewrite H6; auto with zarith.
rewrite HW_23; clear HW_23 int_P_int_M_arr_0_3_1.
rewrite HW_22; clear HW_22 result1.
rewrite (select_store_eq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                  (shift arr_0 (integer_of_int32 i_1_0 + 1)) val_0); trivial.
trivial.
intros i Hibound.
rewrite  HW_23; clear HW_23 int_P_int_M_arr_0_3_1.
rewrite HW_22; clear HW_22 result1.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                  (shift arr_0 (integer_of_int32 i_1_0 + 1 + 1 + i)) val_0); auto with zarith.
apply neq_shift; auto with zarith.
trivial.
intros i Hibound.
rewrite  HW_23; clear HW_23 int_P_int_M_arr_0_3_1.
rewrite HW_22; clear HW_22 result1.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                  (shift arr_0 (0 + i)) val_0); auto with zarith.
apply neq_shift; auto with zarith.
auto with zarith.
auto with zarith.
auto with zarith.
Save.

(* Why obligation from file "insert_sort.c", line 48, characters 12-186: *)
(*Why goal*) Lemma insert_ensures_default_po_17 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  forall (v_4: int32),
  forall (HW_25: (integer_of_int32 v_4) = (integer_of_int32 val_0)),
  (* JC_17 *)
  (* JC_15 *)
  (* JC_14 *)
  (nb_occ arr_0 0 (integer_of_int32 length_0) v_4 int_P_int_M_arr_0_3_1) =
  ((nb_occ arr_0 0 ((integer_of_int32 length_0) - 1) v_4 int_P_int_M_arr_0_3) +
  1).
Proof.
intuition.
rewrite (nb_occ_split int_P_int_M_arr_0_3_1 arr_0 0 (integer_of_int32 i_1_0) (integer_of_int32 length_0) v_4).
rewrite (nb_occ_split int_P_int_M_arr_0_3 arr_0 0 (integer_of_int32 i_1_0) (integer_of_int32 length_0 - 1) v_4).
rewrite (nb_occ_split int_P_int_M_arr_0_3_1 arr_0 (integer_of_int32 i_1_0 + 1) (integer_of_int32 i_1_0 + 1) (integer_of_int32 length_0) v_4).
rewrite (nb_occ_same int_P_int_M_arr_0_3_0 int_P_int_M_arr_0_3_1 0 (integer_of_int32 i_1_0)
                                    0 (integer_of_int32 i_1_0) arr_0 v_4).
rewrite (nb_occ_same int_P_int_M_arr_0_3_0 int_P_int_M_arr_0_3_1 
                                   (integer_of_int32 i_1_0 + 1 + 1) (integer_of_int32 length_0)
                                   (integer_of_int32 i_1_0 + 1 + 1) (integer_of_int32 length_0)
                                   arr_0 v_4).
rewrite (nb_occ_eq int_P_int_M_arr_0_3_1 (integer_of_int32 i_1_0 + 1) (integer_of_int32 i_1_0 + 1)
                                 arr_0 v_4).
rewrite (nb_occ_0 int_P_int_M_arr_0_3_1 arr_0  (integer_of_int32 i_1_0 + 1) (integer_of_int32 i_1_0 + 1 -1) v_4);
auto with zarith.
rewrite H3. 
cut (integer_of_int32 i_1_0 + 1 + 1 = integer_of_int32 i_1_0 + 2); auto with zarith.
intros Hrew; rewrite Hrew; clear Hrew; 
rewrite H6; auto with zarith.
rewrite HW_23; clear HW_23 int_P_int_M_arr_0_3_1.
rewrite HW_22; clear HW_22 result1.
rewrite (select_store_eq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                  (shift arr_0 (integer_of_int32 i_1_0 + 1)) val_0); trivial.
trivial.
intros i Hibound.
rewrite  HW_23; clear HW_23 int_P_int_M_arr_0_3_1.
rewrite HW_22; clear HW_22 result1.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                  (shift arr_0 (integer_of_int32 i_1_0 + 1 + 1 + i)) val_0); auto with zarith.
apply neq_shift; auto with zarith.
trivial.
intros i Hibound.
rewrite  HW_23; clear HW_23 int_P_int_M_arr_0_3_1.
rewrite HW_22; clear HW_22 result1.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0 + 1))
                  (shift arr_0 (0 + i)) val_0); auto with zarith.
apply neq_shift; auto with zarith.
auto with zarith.
auto with zarith.
auto with zarith.
Save.

(* Why obligation from file "insert_sort.c", line 64, characters 5-11: *)
(*Why goal*) Lemma insert_ensures_default_po_18 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_10: (integer_of_int32 i_1_0) >= 0),
  forall (result0: int32),
  forall (HW_11: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (result1: int32),
  forall (HW_22: (integer_of_int32 result1) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_23: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result1)) val_0)),
  (* JC_17 *)
  (* JC_16 *)
  (* JC_16 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 47, characters 12-32: *)
(*Why goal*) Lemma insert_ensures_default_po_19 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  forall (result0: int32),
  forall (HW_27: (integer_of_int32 result0) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_28: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  (* JC_17 *)
  (* JC_15 *)
  (* JC_13 *)
  (* JC_13 *)
  (sorted arr_0 ((integer_of_int32 length_0) + 1) int_P_int_M_arr_0_3_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 48, characters 12-186: *)
(*Why goal*) Lemma insert_ensures_default_po_20 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  forall (result0: int32),
  forall (HW_27: (integer_of_int32 result0) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_28: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (v_4: int32),
  forall (HW_29: (integer_of_int32 v_4) <> (integer_of_int32 val_0)),
  (* JC_17 *)
  (* JC_15 *)
  (* JC_14 *)
  (nb_occ arr_0 0 (integer_of_int32 length_0) v_4 int_P_int_M_arr_0_3_1) =
  (nb_occ arr_0 0 ((integer_of_int32 length_0) - 1) v_4 int_P_int_M_arr_0_3).
Proof.
intuition.
cut (integer_of_int32 i_1_0 = -1); auto with zarith.
intros Hrew; rewrite Hrew in HW_27.
simpl in HW_27.
rewrite HW_27 in HW_28.
rewrite Hrew in H6; simpl in H6.
elim (nb_occ_rev int_P_int_M_arr_0_3_1 arr_0 0  (integer_of_int32 length_0) v_4 (Zge_le _ _ H2)).
intros Heq Hneq.
rewrite Hneq. simpl.
cut (Zpos (2-1) = 1); auto with zarith. intros Hsimple; rewrite Hsimple in H6; clear Hsimple.
rewrite (nb_occ_same int_P_int_M_arr_0_3_0 int_P_int_M_arr_0_3_1 1 (integer_of_int32 length_0)
                                   1 (integer_of_int32 length_0) arr_0 v_4); trivial.
rewrite HW_28; clear HW_28 Heq Hneq int_P_int_M_arr_0_3_1.
intros i Hibound.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 0) (shift arr_0 (1 + i))); trivial.
apply neq_shift; auto with zarith.
rewrite HW_28; clear HW_28 Heq Hneq int_P_int_M_arr_0_3_1.
rewrite (select_store_eq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 0) (shift arr_0 0)); auto.
Save.

(* Why obligation from file "insert_sort.c", line 48, characters 12-186: *)
(*Why goal*) Lemma insert_ensures_default_po_21 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  forall (result0: int32),
  forall (HW_27: (integer_of_int32 result0) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_28: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  forall (v_4: int32),
  forall (HW_30: (integer_of_int32 v_4) = (integer_of_int32 val_0)),
  (* JC_17 *)
  (* JC_15 *)
  (* JC_14 *)
  (nb_occ arr_0 0 (integer_of_int32 length_0) v_4 int_P_int_M_arr_0_3_1) =
  ((nb_occ arr_0 0 ((integer_of_int32 length_0) - 1) v_4 int_P_int_M_arr_0_3) +
  1).
Proof.
intuition.
cut (integer_of_int32 i_1_0 = -1); auto with zarith.
intros Hrew; rewrite Hrew in HW_27.
simpl in HW_27.
rewrite HW_27 in HW_28.
rewrite Hrew in H6; simpl in H6.
elim (nb_occ_rev int_P_int_M_arr_0_3_1 arr_0 0  (integer_of_int32 length_0) v_4 (Zge_le _ _ H2)).
intros Heq Hneq.
rewrite Heq. simpl.
cut (Zpos (2-1) = 1); auto with zarith. intros Hsimple; rewrite Hsimple in H6; clear Hsimple.
rewrite (nb_occ_same int_P_int_M_arr_0_3_0 int_P_int_M_arr_0_3_1 1 (integer_of_int32 length_0)
                                   1 (integer_of_int32 length_0) arr_0 v_4); auto with zarith.
rewrite HW_28; clear HW_28 Heq Hneq int_P_int_M_arr_0_3_1.
intros i Hibound.
rewrite (select_store_neq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 0) (shift arr_0 (1 + i))); trivial.
apply neq_shift; auto with zarith.
rewrite HW_28; clear HW_28 Heq Hneq int_P_int_M_arr_0_3_1.
rewrite (select_store_eq _ _ int_P_int_M_arr_0_3_0 (shift arr_0 0) (shift arr_0 0)); auto.
Save.

(* Why obligation from file "insert_sort.c", line 64, characters 5-11: *)
(*Why goal*) Lemma insert_ensures_default_po_22 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (result: int32),
  forall (HW_3: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_4: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_8: ((* JC_47 *)
                 (forall (v_2:int32),
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                         length_0) v_2 int_P_int_M_arr_0_3_0) =
                  (nb_occ
                   arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                          length_0) -
                                                        1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_48 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_49 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_50 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_51 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_54 *) ((* JC_52 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_53 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))) /\
                (* JC_56 *)
                (not_assigns
                 int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_0 (
                 pset_range
                 (pset_singleton arr_0) 0 (integer_of_int32 length_0)))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  forall (result0: int32),
  forall (HW_27: (integer_of_int32 result0) = ((integer_of_int32 i_1_0) + 1)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_28: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result0)) val_0)),
  (* JC_17 *)
  (* JC_16 *)
  (* JC_16 *)
  (not_assigns
   int_P_arr_0_3_alloc_table int_P_int_M_arr_0_3 int_P_int_M_arr_0_3_1 (
   pset_range (pset_singleton arr_0) 0 (integer_of_int32 length_0))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 65, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_1 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  (-2147483648) <= ((integer_of_int32 length_0) - 1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 65, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_2 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  ((integer_of_int32 length_0) - 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 81, characters 2-7: *)
(*Why goal*) Lemma insert_safety_po_3 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 i_1_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 81, characters 2-7: *)
(*Why goal*) Lemma insert_safety_po_4 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  (integer_of_int32 i_1_0) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 81, characters 32-35: *)
(*Why goal*) Lemma insert_safety_po_5 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  (-2147483648) <= ((integer_of_int32 i_1_0) + 1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 81, characters 32-35: *)
(*Why goal*) Lemma insert_safety_po_6 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  ((integer_of_int32 i_1_0) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 167, characters 24-190: *)
(*Why goal*) Lemma insert_safety_po_7 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 result2).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 167, characters 24-190: *)
(*Why goal*) Lemma insert_safety_po_8 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  (integer_of_int32 result2) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 81, characters 51-52: *)
(*Why goal*) Lemma insert_safety_po_9 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (HW_16: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 result2) /\ (integer_of_int32 result2) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_17: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  (-2147483648) <= ((integer_of_int32 i_1_0) - 1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 81, characters 51-52: *)
(*Why goal*) Lemma insert_safety_po_10 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_11: (integer_of_int32 result0) > (integer_of_int32 val_0)),
  forall (HW_12: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result1: int32),
  forall (HW_13: result1 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_14: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result2: int32),
  forall (HW_15: (integer_of_int32 result2) = ((integer_of_int32 i_1_0) + 1)),
  forall (HW_16: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                 (integer_of_int32 result2) /\ (integer_of_int32 result2) <=
                 (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (int_P_int_M_arr_0_3_1: (memory int_P int32)),
  forall (HW_17: int_P_int_M_arr_0_3_1 =
                 (store
                  int_P_int_M_arr_0_3_0 (shift
                                         arr_0 (integer_of_int32 result2)) result1)),
  ((integer_of_int32 i_1_0) - 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 82, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_11 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  (-2147483648) <= ((integer_of_int32 i_1_0) + 1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 82, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_12 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  ((integer_of_int32 i_1_0) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 175, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_13 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_22: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result1: int32),
  forall (HW_23: (integer_of_int32 result1) = ((integer_of_int32 i_1_0) + 1)),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 result1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 175, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_14 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_8: (integer_of_int32 i_1_0) >= 0),
  forall (HW_9: (offset_min int_P_arr_0_3_alloc_table arr_0) <=
                (integer_of_int32 i_1_0) /\ (integer_of_int32 i_1_0) <=
                (offset_max int_P_arr_0_3_alloc_table arr_0)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_0_3_0 (shift arr_0 (integer_of_int32 i_1_0)))),
  forall (HW_21: (integer_of_int32 result0) <= (integer_of_int32 val_0)),
  forall (HW_22: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result1: int32),
  forall (HW_23: (integer_of_int32 result1) = ((integer_of_int32 i_1_0) + 1)),
  (integer_of_int32 result1) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 82, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_15 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  (-2147483648) <= ((integer_of_int32 i_1_0) + 1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 82, characters 2-5: *)
(*Why goal*) Lemma insert_safety_po_16 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  ((integer_of_int32 i_1_0) + 1) <= 2147483647.
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 175, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_17 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  forall (HW_27: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result0: int32),
  forall (HW_28: (integer_of_int32 result0) = ((integer_of_int32 i_1_0) + 1)),
  (offset_min int_P_arr_0_3_alloc_table arr_0) <= (integer_of_int32 result0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 175, characters 15-91: *)
(*Why goal*) Lemma insert_safety_po_18 : 
  forall (arr_0: (pointer int_P)),
  forall (length_0: int32),
  forall (val_0: int32),
  forall (int_P_arr_0_3_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_0_3: (memory int_P int32)),
  forall (HW_1: (* JC_11 *)
                ((* JC_7 *) (offset_min int_P_arr_0_3_alloc_table arr_0) <= 0 /\
                (* JC_8 *) (offset_max int_P_arr_0_3_alloc_table arr_0) >=
                (integer_of_int32 length_0) /\
                (* JC_9 *) (integer_of_int32 length_0) >= 0 /\
                (* JC_10 *)
                (sorted arr_0 (integer_of_int32 length_0) int_P_int_M_arr_0_3))),
  forall (HW_3: (-2147483648) <= ((integer_of_int32 length_0) - 1) /\
                ((integer_of_int32 length_0) - 1) <= 2147483647),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = ((integer_of_int32 length_0) - 1)),
  forall (i_1: int32),
  forall (HW_5: i_1 = result),
  forall (i_1_0: int32),
  forall (int_P_int_M_arr_0_3_0: (memory int_P int32)),
  forall (HW_6: (* JC_36 *) True),
  forall (HW_7: (* JC_27 *)
                (forall (v_2:int32),
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 2) (integer_of_int32
                                                        length_0) v_2 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 ((integer_of_int32 i_1_0) + 1) ((integer_of_int32
                                                         length_0) -
                                                       1) v_2 int_P_int_M_arr_0_3)) /\
                (* JC_28 *)
                (forall (v_3:int32),
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3_0) =
                 (nb_occ
                  arr_0 0 (integer_of_int32 i_1_0) v_3 int_P_int_M_arr_0_3)) /\
                (* JC_29 *)
                (forall (j:Z),
                 (((integer_of_int32 i_1_0) + 1) < j /\ j <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j))) >
                  (integer_of_int32 val_0))) /\
                (* JC_30 *)
                (forall (j_0:Z),
                 (((integer_of_int32 i_1_0) + 1) < j_0 /\ j_0 <=
                  (integer_of_int32 length_0) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_0))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 (j_0 - 1)))))) /\
                (* JC_31 *)
                (forall (j_1:Z),
                 (0 <= j_1 /\ j_1 <= ((integer_of_int32 i_1_0) + 1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3_0 (shift arr_0 j_1))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_0_3 (shift arr_0 j_1))))) /\
                (* JC_34 *) ((* JC_32 *) (-1) <= (integer_of_int32 i_1_0) /\
                (* JC_33 *) (integer_of_int32 i_1_0) <
                (integer_of_int32 length_0))),
  forall (HW_26: (integer_of_int32 i_1_0) < 0),
  forall (HW_27: (-2147483648) <= ((integer_of_int32 i_1_0) + 1) /\
                 ((integer_of_int32 i_1_0) + 1) <= 2147483647),
  forall (result0: int32),
  forall (HW_28: (integer_of_int32 result0) = ((integer_of_int32 i_1_0) + 1)),
  (integer_of_int32 result0) <= (offset_max int_P_arr_0_3_alloc_table arr_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 90, characters 19-32: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_1 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_95 *)
  (* JC_95 *) (sorted arr_1 (integer_of_int32 i_0_0) int_P_int_M_arr_4).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 89, characters 19-23: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_2 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_98 *) (* JC_96 *) (* JC_96 *) 1 <= (integer_of_int32 i_0_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 89, characters 22-31: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_3 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_98 *)
  (* JC_97 *)
  (* JC_97 *) (integer_of_int32 i_0_0) <= (integer_of_int32 length_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 199, characters 12-1127: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_4 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  (* JC_100 *)
  (* JC_100 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4 (pset_range
                                                                (pset_singleton
                                                                 arr_1) 0 
                                                                ((integer_of_int32
                                                                  length_1) -
                                                                1))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 92, characters 19-95: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_5 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  forall (result1: int32),
  forall (HW_12: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_13: i_0_0_1 = result1),
  (* JC_93 *)
  (* JC_93 *)
  (forall (v_5:int32),
   (nb_occ arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_1) =
   (nb_occ arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)).
Proof.
intuition.
rewrite (nb_occ_split int_P_int_M_arr_4_1 arr_1 0 (integer_of_int32 i_0_0_0)  (integer_of_int32 length_1 - 1) v_5);
auto with zarith.
rewrite (nb_occ_same int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 
                                     (integer_of_int32 i_0_0_0 + 1) (integer_of_int32 length_1 - 1)
                                     (integer_of_int32 i_0_0_0 + 1) (integer_of_int32 length_1 - 1) arr_1 v_5).
cut (nb_occ arr_1 0 (integer_of_int32 i_0_0_0) v_5 int_P_int_M_arr_4_1 = nb_occ arr_1 0 (integer_of_int32 i_0_0_0) v_5 int_P_int_M_arr_4_0).
intros Heq; rewrite Heq; clear Heq.
rewrite <- (nb_occ_split int_P_int_M_arr_4_0 arr_1 0 (integer_of_int32 i_0_0_0)  (integer_of_int32 length_1 - 1) v_5);
auto with zarith.
trivial.
elim (Z_eq_dec (integer_of_int32 v_5) (integer_of_int32 result0));
elim (H12 v_5);
intros Hnb_occ1 Hnb_occ2 Hcmp_val.
rewrite Hnb_occ2; trivial.
rewrite (nb_occ_eq int_P_int_M_arr_4_0 0 (integer_of_int32 i_0_0_0) arr_1 v_5); trivial.
rewrite HW_10 in Hcmp_val; trivial.
rewrite Hnb_occ1; trivial.
rewrite (nb_occ_neq int_P_int_M_arr_4_0 0 (integer_of_int32 i_0_0_0) arr_1 v_5); trivial.
rewrite HW_10 in Hcmp_val; trivial.
trivial.
intros i Hibound.
unfold not_assigns in H11.
rewrite  H11; trivial.
split. unfold valid.
rewrite offset_min_shift.
rewrite offset_max_shift.
auto with zarith.
generalize (in_pset_range _ (shift arr_1 (integer_of_int32 i_0_0_0 + 1 + i)) (pset_singleton arr_1)
                                        0 (integer_of_int32 i_0_0_0)).
intros Hequiv; elim Hequiv.
intros Hin1 Hin2; unfold not; intros Habs.
absurd (exists i0 : Z,
         exists r : pointer int_P,
           0 <= i0 /\
           i0 <= integer_of_int32 i_0_0_0 /\
           in_pset r (pset_singleton arr_1) /\
           shift arr_1 (integer_of_int32 i_0_0_0 + 1 + i) = shift r i0); trivial.
unfold not; intros Habs2.
elim Habs2.
intros x Habs3; elim Habs3; clear Habs Habs2 Habs3 Hin1 Hin2 Hequiv.
intros p Habs.
decompose [and] Habs.
generalize (in_pset_singleton _ p arr_1).
intros Heq; elim Heq; intros Heq1 Heq2.
generalize (Heq1 H13); clear Heq Heq1 Heq2 Habs.
intros Heq.
rewrite Heq in H16.
contradict H16.
apply neq_shift; auto with zarith.
exact (Hin1 Habs).

Save.

(* Why obligation from file "insert_sort.c", line 91, characters 19-76: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_6 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  forall (result1: int32),
  forall (HW_12: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_13: i_0_0_1 = result1),
  (* JC_94 *)
  (* JC_94 *)
  (forall (j_2:Z),
   ((integer_of_int32 i_0_0_1) < j_2 /\ j_2 < (integer_of_int32 length_1) ->
    (integer_of_int32 (select int_P_int_M_arr_4_1 (shift arr_1 j_2))) =
    (integer_of_int32 (select int_P_int_M_arr_4 (shift arr_1 j_2))))).
Proof.
intuition.
unfold not_assigns in H11.
rewrite H11.
apply H2; auto with zarith.
rewrite HW_13 in H13; rewrite HW_12 in H13; auto with zarith.
split.
unfold valid.
rewrite offset_min_shift.
rewrite offset_max_shift.
rewrite HW_13 in H13; rewrite HW_12 in H13; auto with zarith.
unfold not; intros Habs.
generalize (in_pset_range _ (shift arr_1 j_2) (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)).
intros Hequiv; elim Hequiv; clear Hequiv.
intros Hind1 Hind2; clear Hind2; generalize (Hind1 Habs).
clear Habs Hind1; intros Habs; elim Habs.
intros x Habs2; elim Habs2; intros p Hpset; decompose [and] Hpset.
clear Habs2 Hpset Habs.
generalize (in_pset_singleton _ p arr_1); intros Hequiv; elim Hequiv; clear Hequiv.
intros Heq _. generalize (Heq H15); clear Heq; intros Heq; rewrite Heq in H18; clear Heq H15 p.
contradict H18.
rewrite HW_13 in H13; rewrite HW_12 in H13.
apply neq_shift; auto with zarith.
Save.

(* Why obligation from file "insert_sort.c", line 90, characters 19-32: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_7 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  forall (result1: int32),
  forall (HW_12: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_13: i_0_0_1 = result1),
  (* JC_95 *)
  (* JC_95 *) (sorted arr_1 (integer_of_int32 i_0_0_1) int_P_int_M_arr_4_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 89, characters 19-23: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_8 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  forall (result1: int32),
  forall (HW_12: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_13: i_0_0_1 = result1),
  (* JC_98 *) (* JC_96 *) (* JC_96 *) 1 <= (integer_of_int32 i_0_0_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 89, characters 22-31: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_9 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  forall (result1: int32),
  forall (HW_12: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_13: i_0_0_1 = result1),
  (* JC_98 *)
  (* JC_97 *)
  (* JC_97 *) (integer_of_int32 i_0_0_1) <= (integer_of_int32 length_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 199, characters 12-1127: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_10 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_9: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_11: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  forall (result1: int32),
  forall (HW_12: (integer_of_int32 result1) =
                 ((integer_of_int32 i_0_0_0) + 1)),
  forall (i_0_0_1: int32),
  forall (HW_13: i_0_0_1 = result1),
  (* JC_100 *)
  (* JC_100 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_1 (pset_range
                                                                  (pset_singleton
                                                                   arr_1) 0 
                                                                  ((integer_of_int32
                                                                    length_1) -
                                                                  1))).
Proof.
intuition.
apply (not_assigns_trans _ _ int_P_arr_4_alloc_table 
           int_P_int_M_arr_4 int_P_int_M_arr_4_0 int_P_int_M_arr_4_1
          (pset_range (pset_singleton arr_1) 0 (integer_of_int32 length_1 - 1))).
trivial.
unfold not_assigns;
unfold not_assigns in H11.
intros p Hpset.
apply H11; split; trivial.
elim Hpset; trivial.
unfold not;
generalize (in_pset_range _ p (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)).
intros Hequiv; elim Hequiv; clear Hequiv.
intros Hind1 Hind2 Hpset1; generalize (Hind1 Hpset1); clear Hind1 Hind2 Hpset1.
intros Hex; elim Hex; intros i Hex2; elim Hex2; intros r Hbound. clear Hex Hex2;
elim Hpset. intros _ Habs; apply Habs. clear Habs.
generalize (in_pset_range _ p (pset_singleton arr_1) 0 (integer_of_int32 length_1 -1)).
intros Hequiv; elim Hequiv; intros Hind1 Hind2; apply Hind2; clear Hequiv Hind1 Hind2.
exists i; exists r; decompose [and] Hbound; auto with zarith.
Save.

(* Why obligation from file "insert_sort.c", line 58, characters 10-28: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_11 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_15: (integer_of_int32 i_0_0_0) >= (integer_of_int32 length_1)),
  (* JC_72 *)
  (* JC_70 *)
  (* JC_68 *)
  (* JC_68 *) (sorted arr_1 (integer_of_int32 length_1) int_P_int_M_arr_4_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 59, characters 10-94: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_12 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_7: ((* JC_93 *)
                 (forall (v_5:int32),
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                  (nb_occ
                   arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_94 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_95 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_98 *) ((* JC_96 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_97 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))) /\
                (* JC_100 *)
                (not_assigns
                 int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4_0 (
                 pset_range
                 (pset_singleton arr_1) 0 ((integer_of_int32 length_1) - 1)))),
  forall (HW_15: (integer_of_int32 i_0_0_0) >= (integer_of_int32 length_1)),
  (* JC_72 *)
  (* JC_70 *)
  (* JC_69 *)
  (* JC_69 *)
  (forall (v_6:int32),
   (nb_occ arr_1 0 ((integer_of_int32 length_1) - 1) v_6 int_P_int_M_arr_4_0) =
   (nb_occ arr_1 0 ((integer_of_int32 length_1) - 1) v_6 int_P_int_M_arr_4)).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 58, characters 10-28: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_13 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_16: (integer_of_int32 length_1) <= 0),
  (* JC_72 *)
  (* JC_70 *)
  (* JC_68 *)
  (* JC_68 *) (sorted arr_1 (integer_of_int32 length_1) int_P_int_M_arr_4).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 86, characters 5-16: *)
(*Why goal*) Lemma insert_sort_ensures_default_po_14 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: true = true /\
                (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_16: (integer_of_int32 length_1) <= 0),
  (* JC_72 *)
  (* JC_71 *)
  (* JC_71 *)
  (not_assigns
   int_P_arr_4_alloc_table int_P_int_M_arr_4 int_P_int_M_arr_4 (pset_range
                                                                (pset_singleton
                                                                 arr_1) 0 
                                                                ((integer_of_int32
                                                                  length_1) -
                                                                1))).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 95, characters 40-46: *)
(*Why goal*) Lemma insert_sort_safety_po_1 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  (offset_min int_P_arr_4_alloc_table arr_1) <= (integer_of_int32 i_0_0_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 95, characters 40-46: *)
(*Why goal*) Lemma insert_sort_safety_po_2 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  (integer_of_int32 i_0_0_0) <= (offset_max int_P_arr_4_alloc_table arr_1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 218, characters 26-112: *)
(*Why goal*) Lemma insert_sort_safety_po_3 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  (* JC_5 *)
  (* JC_2 *)
  (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
  (integer_of_int32 i_0_0_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 218, characters 26-112: *)
(*Why goal*) Lemma insert_sort_safety_po_4 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  (* JC_5 *) (* JC_3 *) (* JC_3 *) (integer_of_int32 i_0_0_0) >= 0.
Proof.
Admitted.

(* Why obligation from file "insert_sort.jc", line 218, characters 26-112: *)
(*Why goal*) Lemma insert_sort_safety_po_5 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  (* JC_5 *)
  (* JC_4 *)
  (* JC_4 *) (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 95, characters 10-13: *)
(*Why goal*) Lemma insert_sort_safety_po_6 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (* JC_5 *)
                 ((* JC_1 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                 (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                 (integer_of_int32 i_0_0_0) /\
                 (* JC_3 *) (integer_of_int32 i_0_0_0) >= 0 /\
                 (* JC_4 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_12: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  (-2147483648) <= ((integer_of_int32 i_0_0_0) + 1).
Proof.
Admitted.

(* Why obligation from file "insert_sort.c", line 95, characters 10-13: *)
(*Why goal*) Lemma insert_sort_safety_po_7 : 
  forall (arr_1: (pointer int_P)),
  forall (length_1: int32),
  forall (int_P_arr_4_alloc_table: (alloc_table int_P)),
  forall (int_P_int_M_arr_4: (memory int_P int32)),
  forall (HW_1: (* JC_66 *)
                ((* JC_63 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                (* JC_64 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                ((integer_of_int32 length_1) - 1) /\
                (* JC_65 *) (integer_of_int32 length_1) >= 0)),
  forall (HW_3: (integer_of_int32 length_1) > 0),
  forall (result: int32),
  forall (HW_4: (integer_of_int32 result) = 1),
  forall (i_0_0: int32),
  forall (HW_5: i_0_0 = result),
  forall (i_0_0_0: int32),
  forall (int_P_int_M_arr_4_0: (memory int_P int32)),
  forall (HW_6: (* JC_87 *) True),
  forall (HW_7: (* JC_80 *)
                (forall (v_5:int32),
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4_0) =
                 (nb_occ
                  arr_1 0 ((integer_of_int32 length_1) - 1) v_5 int_P_int_M_arr_4)) /\
                (* JC_81 *)
                (forall (j_2:Z),
                 ((integer_of_int32 i_0_0_0) < j_2 /\ j_2 <
                  (integer_of_int32 length_1) ->
                  (integer_of_int32
                   (select int_P_int_M_arr_4_0 (shift arr_1 j_2))) =
                  (integer_of_int32
                   (select int_P_int_M_arr_4 (shift arr_1 j_2))))) /\
                (* JC_82 *)
                (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0) /\
                (* JC_85 *) ((* JC_83 *) 1 <= (integer_of_int32 i_0_0_0) /\
                (* JC_84 *) (integer_of_int32 i_0_0_0) <=
                (integer_of_int32 length_1))),
  forall (HW_8: (integer_of_int32 i_0_0_0) < (integer_of_int32 length_1)),
  forall (HW_9: (offset_min int_P_arr_4_alloc_table arr_1) <=
                (integer_of_int32 i_0_0_0) /\ (integer_of_int32 i_0_0_0) <=
                (offset_max int_P_arr_4_alloc_table arr_1)),
  forall (result0: int32),
  forall (HW_10: result0 =
                 (select
                  int_P_int_M_arr_4_0 (shift arr_1 (integer_of_int32 i_0_0_0)))),
  forall (HW_11: (* JC_5 *)
                 ((* JC_1 *) (offset_min int_P_arr_4_alloc_table arr_1) <= 0 /\
                 (* JC_2 *) (offset_max int_P_arr_4_alloc_table arr_1) >=
                 (integer_of_int32 i_0_0_0) /\
                 (* JC_3 *) (integer_of_int32 i_0_0_0) >= 0 /\
                 (* JC_4 *)
                 (sorted arr_1 (integer_of_int32 i_0_0_0) int_P_int_M_arr_4_0))),
  forall (int_P_int_M_arr_4_1: (memory int_P int32)),
  forall (HW_12: (true = true ->
                  (* JC_22 *)
                  ((* JC_20 *)
                   ((* JC_18 *)
                    (sorted
                     arr_1 ((integer_of_int32 i_0_0_0) + 1) int_P_int_M_arr_4_1) /\
                   (* JC_19 *)
                   (forall (v_4:int32),
                    (((integer_of_int32 v_4) <> (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      (nb_occ
                       arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0))) /\
                    (((integer_of_int32 v_4) = (integer_of_int32 result0) ->
                      (nb_occ
                       arr_1 0 (integer_of_int32 i_0_0_0) v_4 int_P_int_M_arr_4_1) =
                      ((nb_occ
                        arr_1 0 ((integer_of_int32 i_0_0_0) - 1) v_4 int_P_int_M_arr_4_0) +
                      1))))) /\
                  (* JC_21 *)
                  (not_assigns
                   int_P_arr_4_alloc_table int_P_int_M_arr_4_0 int_P_int_M_arr_4_1 (
                   pset_range
                   (pset_singleton arr_1) 0 (integer_of_int32 i_0_0_0)))))),
  ((integer_of_int32 i_0_0_0) + 1) <= 2147483647.
Proof.
Admitted.

