[kernel] Parsing declaration.c (with preprocessing)
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:initial-state] Values of globals at initialization
  X ∈ [--..--]
  Y ∈ {-42}
[eva] computing for function f <- main.
  Called from declaration.c:27.
[eva:alarm] declaration.c:6: Warning: 
  signed overflow. assert *x + 1 ≤ 2147483647;
[eva] computing for function h <- f <- main.
  Called from declaration.c:8.
[eva:alarm] declaration.c:22: Warning: 
  signed overflow. assert *x + 2 ≤ 2147483647;
[eva] Recording results for h
[eva] Done for function h
[eva] Recording results for f
[eva] Done for function f
[eva] computing for function g <- main.
  Called from declaration.c:28.
[eva:alarm] declaration.c:12: Warning: 
  signed overflow. assert *x + 1 ≤ 2147483647;
[eva] computing for function h <- g <- main.
  Called from declaration.c:14.
[eva] Recording results for h
[eva] Done for function h
[eva] Recording results for g
[eva] Done for function g
[eva] Recording results for main
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function h:
  X ∈ [-2147483645..2147483647]
  Y ∈ {-36; -30}
[eva:final-states] Values at end of function f:
  X ∈ [-2147483645..2147483647]
  Y ∈ {-36}
[eva:final-states] Values at end of function g:
  X ∈ [-2147483642..2147483647]
  Y ∈ {-30}
[eva:final-states] Values at end of function main:
  X ∈ [-2147483642..2147483647]
  Y ∈ {-30}
[scf] beginning constant propagation
/* Generated by Frama-C */
void h(int *x, int *y);

int Y;

extern int X;

void f(int *x, int *y, void (*p)(int *x, int *y))
{
  /*@ assert Eva: signed_overflow: *x + 1 ≤ 2147483647; */
  X ++;
  Y = -41;
  h(& X,& Y);
  return;
}

void g(int *x, int *y, void (*p)(int *x, int *y))
{
  /*@ assert Eva: signed_overflow: *x + 1 ≤ 2147483647; */
  X ++;
  Y = -35;
  h(& X,& Y);
  return;
}

int Y = -42;
void h(int *x, int *y)
{
  /*@ assert Eva: signed_overflow: *x + 2 ≤ 2147483647; */
  X += 2;
  Y += 5;
  return;
}

int main(void)
{
  f(& X,& Y,& h);
  g(& X,& Y,& h);
  return Y;
}


[scf] constant propagation done
[scf] beginning constant propagation
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:initial-state] Values of globals at initialization
  X ∈ [--..--]
  Y ∈ {-42}
[eva] computing for function f <- main.
  Called from declaration.c:27.
[eva:alarm] declaration.c:6: Warning: 
  signed overflow. assert X + 1 ≤ 2147483647;
[eva] computing for function h <- f <- main.
  Called from declaration.c:8.
[eva:alarm] declaration.c:22: Warning: 
  signed overflow. assert X + 2 ≤ 2147483647;
[eva] Recording results for h
[eva] Done for function h
[eva] Recording results for f
[eva] Done for function f
[eva] computing for function g <- main.
  Called from declaration.c:28.
[eva:alarm] declaration.c:12: Warning: 
  signed overflow. assert X + 1 ≤ 2147483647;
[eva] computing for function h <- g <- main.
  Called from declaration.c:14.
[eva] Recording results for h
[eva] Done for function h
[eva] Recording results for g
[eva] Done for function g
[eva] Recording results for main
[eva] done for function main
/* Generated by Frama-C */
void h(int *x, int *y);

int Y;

extern int X;

void f(int *x, int *y, void (*p)(int *x, int *y))
{
  /*@ assert Eva: signed_overflow: *x + 1 ≤ 2147483647; */
  /*@ assert Eva: signed_overflow: X + 1 ≤ 2147483647; */
  X ++;
  Y = -41;
  h(& X,& Y);
  return;
}

void g(int *x, int *y, void (*p)(int *x, int *y))
{
  /*@ assert Eva: signed_overflow: *x + 1 ≤ 2147483647; */
  /*@ assert Eva: signed_overflow: X + 1 ≤ 2147483647; */
  X ++;
  Y = -35;
  h(& X,& Y);
  return;
}

int Y = -42;
void h(int *x, int *y)
{
  /*@ assert Eva: signed_overflow: *x + 2 ≤ 2147483647; */
  /*@ assert Eva: signed_overflow: X + 2 ≤ 2147483647; */
  X += 2;
  Y += 5;
  return;
}

int main(void)
{
  f(& X,& Y,& h);
  g(& X,& Y,& h);
  return Y;
}


[scf] constant propagation done, result is in project `propagated 2`
