[kernel] Parsing kw.c (with preprocessing)
/* Generated by Frama-C */
typedef int assert;
struct custom {
   int reads ;
   int behaviors ;
   int label ;
};
struct at {
   int module ;
   int function ;
   int global ;
};
struct loop {
   int requires ;
   int ensures ;
   int checks ;
};
assert behavior = 0;
/*@ logic assert foo(assert x) = x;
 */
/*@ requires behavior ≥ 0;
    ensures behavior ≥ 0;
    assigns behavior;
    assigns behavior \from behavior;
 */
int main(void)
{
  int __retres;
  struct custom writes;
  struct at include;
  struct loop assert;
  /*@ slevel 4; */
  behavior ++;
  /*@
  assert
  custom:
    writes.reads + writes.behaviors ≤ (\let global = writes.label; global);
   */
  ;
  /*@
  assert
  at:
    include.function + include.module ≤
    (\let behaviors = include.global; behaviors);
   */
  ;
  /*@
  assert
  loop:
    assert.ensures + assert.ensures ≤ (\let reads = assert.checks; reads);
   */
  ;
  __retres = 0;
  return __retres;
}

/*@ type List<A> = Nil | Cons(A, List<A> );
 */
/*@
inductive model{L}(List<ℤ>  root, List<ℤ>  logic_list) {
  case nil{L}: model(Nil, Nil);
  case cons{L}: ∀ List<ℤ>  l1, List<ℤ>  ll1;
                  model(l1, ll1) ⇒ model(Cons(0, l1), Cons(0, ll1));
  }
 */
/*@ axiomatic foo {
      logic ℤ func{L}(ℤ i) 
        reads behavior;
      
      }

*/
int volatile assigns;
int ensures(int volatile *a)
{
  int __retres;
  __retres = *a;
  return __retres;
}

int requires(int volatile *a, int v)
{
  *a = v;
  return v;
}

/*@ volatile assigns reads ensures writes requires;
*/
int slevel = 1000000;
/*@ lemma bar{L}: slevel ≥ 0;

*/

