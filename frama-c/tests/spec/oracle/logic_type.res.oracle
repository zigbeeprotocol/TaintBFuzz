[kernel] Parsing logic_type.c (with preprocessing)
[kernel] logic_type.c:1: Warning: 
  parsing obsolete ACSL construct 'logic type declaration'. 'an axiomatic block' should be used instead.
[kernel] logic_type.c:2: Warning: 
  parsing obsolete ACSL construct 'logic declaration'. 'an axiomatic block' should be used instead.
[kernel] logic_type.c:3: Warning: 
  parsing obsolete ACSL construct 'logic declaration'. 'an axiomatic block' should be used instead.
[kernel] logic_type.c:7: Warning: 
  parsing obsolete ACSL construct 'logic declaration'. 'an axiomatic block' should be used instead.
[kernel:annot-error] logic_type.c:3: Warning: 
  no such type t1. Ignoring global annotation
[kernel:annot-error] logic_type.c:6: Warning: 
  Definition of t2 is cyclic. Ignoring global annotation
[kernel:annot-error] logic_type.c:7: Warning: 
  no such type t2. Ignoring global annotation
[kernel:annot-error] logic_type.c:8: Warning: 
  no such type t2. Ignoring global annotation
/* Generated by Frama-C */
struct __anonstruct_Point_1 {
   int x ;
   int y ;
};
typedef struct __anonstruct_Point_1 Point;
struct INTEGER {
   int integer ;
};
typedef struct INTEGER Integer;
struct COMPLEX {
   double real ;
   double img ;
};
typedef struct COMPLEX Complex;
/*@ type t;
 */
/*@ logic t create(int x) ;
 */
/*@
axiomatic A {
  type point = Point;
  
  predicate Q{L}(Point *tt) 
    reads \at(*(tt + (0 .. 1)),L), \at((tt + 2)->x,L), \at((tt + 2)->y,L);
  
  type triangle = Point [3];
  
  predicate P(triangle tt) = tt[1].x ≡ tt[2].y;
  
  }
 */
/*@ ensures Q(\old(q));
    ensures P(*((Point (*)[3])\old(q))); */
void f(Point *q);

Point tab[3];
/*@ ensures Q((Point *)tab);
    ensures P(tab); */
void h(void)
{
  f(tab);
  return;
}

/*@ logic t t_from_t(t x) = x;
 */
/*@ logic _Bool _Bool_from_boolean(𝔹 b) = (_Bool)b;
 */
/*@ logic 𝔹 boolean_from_integer(ℤ b) = b ≢ 0;
 */
/*@ logic 𝔹 boolean_from_int(int b) = b ≢ 0;
 */
/*@ logic 𝔹 boolean_from_Bool(_Bool b) = b ≢ 0;
 */
/*@ axiomatic B {
      logic ℤ value{L}(Integer *p) = p->integer;
      
      }
 */
/*@
axiomatic CPX {
  type complex = Complex;
  
  logic double re{L}(Complex *p) = p->real;
  
  logic complex with_re(complex c, double re) = {c \with .real = re};
  
  }

*/

