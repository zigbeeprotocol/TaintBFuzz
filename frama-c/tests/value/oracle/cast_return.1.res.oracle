[kernel] Parsing cast_return.c (with preprocessing)
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:initial-state] Values of globals at initialization
  i ∈ [--..--]
  c ∈ [--..--]
[eva] computing for function main1 <- main.
  Called from cast_return.c:63.
[eva] computing for function f <- main1 <- main.
  Called from cast_return.c:26.
[eva] Recording results for f
[eva] Done for function f
[eva] computing for function g <- main1 <- main.
  Called from cast_return.c:27.
[eva] Recording results for g
[eva] Done for function g
[eva:alarm] cast_return.c:27: Warning: 
  accessing uninitialized left-value.
  assert \initialized(&tmp_0);
  (tmp_0 from g())
[eva] computing for function h <- main1 <- main.
  Called from cast_return.c:31.
[eva] Recording results for h
[eva] Done for function h
[eva:alarm] cast_return.c:31: Warning: out of bounds write. assert \valid(*p);
[kernel] cast_return.c:31: Warning: 
  all target addresses were invalid. This path is assumed to be dead.
[eva] Recording results for main1
[eva] Done for function main1
[eva] computing for function main2 <- main.
  Called from cast_return.c:64.
[eva] computing for function fl1 <- main2 <- main.
  Called from cast_return.c:50.
[eva] Recording results for fl1
[eva] Done for function fl1
[eva:alarm] cast_return.c:50: Warning: 
  accessing uninitialized left-value.
  assert \initialized(&tmp);
  (tmp from fl1())
[eva] computing for function fl2 <- main2 <- main.
  Called from cast_return.c:51.
[eva] Recording results for fl2
[eva] Done for function fl2
[eva:alarm] cast_return.c:51: Warning: 
  accessing uninitialized left-value.
  assert \initialized(&tmp_0);
  (tmp_0 from fl2())
[eva] Recording results for main2
[eva] Done for function main2
[eva] computing for function main3 <- main.
  Called from cast_return.c:65.
[eva] computing for function ret_float <- main3 <- main.
  Called from cast_return.c:58.
[eva] using specification for function ret_float
[eva] Done for function ret_float
[eva:alarm] cast_return.c:58: Warning: 
  non-finite float value. assert \is_finite(tmp);
                          (tmp from ret_float())
[eva] Recording results for main3
[eva] Done for function main3
[eva] Recording results for main
[eva] done for function main
[eva] cast_return.c:31: assertion 'Eva,mem_access' got final status invalid.
[eva] cast_return.c:50: assertion 'Eva,initialization' got final status invalid.
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function f:
  
[eva:final-states] Values at end of function fl1:
  v[bits 0 to 7] ∈ {1}
   [bits 8 to 31] ∈ UNINITIALIZED
[eva:final-states] Values at end of function fl2:
  v ∈ {1.} or UNINITIALIZED
[eva:final-states] Values at end of function g:
  x ∈ {1} or UNINITIALIZED
[eva:final-states] Values at end of function h:
  __retres ∈ {1}
[eva:final-states] Values at end of function main1:
  
[eva:final-states] Values at end of function main2:
  d1 ∈ UNINITIALIZED
  d2 ∈ {1.}
[eva:final-states] Values at end of function main3:
  f1 ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
  f2 ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
[eva:final-states] Values at end of function main:
  
[from] Computing for function f
[from] Done for function f
[from] Computing for function fl1
[from] Done for function fl1
[from] Computing for function fl2
[from] Done for function fl2
[from] Computing for function g
[from] Done for function g
[from] Computing for function h
[from] Done for function h
[from] Computing for function main1
[from] Done for function main1
[from] Computing for function main2
[from] Done for function main2
[from] Computing for function main3
[from] Computing for function ret_float <-main3
[from] Done for function ret_float
[from] Done for function main3
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
  These dependencies hold at termination for the executions that terminate:
[from] Function f:
  \result FROM i
[from] Function fl1:
  \result FROM \nothing
[from] Function fl2:
  \result FROM c
[from] Function g:
  \result FROM c
[from] Function h:
  \result FROM \nothing
[from] Function main1:
  NO EFFECTS
[from] Function main2:
  NO EFFECTS
[from] Function ret_float:
  \result FROM \nothing
[from] Function main3:
  NO EFFECTS
[from] Function main:
  NO EFFECTS
[from] ====== END OF DEPENDENCIES ======
[inout] Out (internal) for function f:
    \nothing
[inout] Inputs for function f:
    i
[inout] Out (internal) for function fl1:
    v[bits 0 to 7]
[inout] Inputs for function fl1:
    \nothing
[inout] Out (internal) for function fl2:
    v
[inout] Inputs for function fl2:
    c
[inout] Out (internal) for function g:
    x
[inout] Inputs for function g:
    c
[inout] Out (internal) for function h:
    __retres
[inout] Inputs for function h:
    \nothing
[inout] Out (internal) for function main1:
    f_; tmp; v; tmp_0; x; p; tmp_1
[inout] Inputs for function main1:
    i; c
[inout] Out (internal) for function main2:
    d1; d2; tmp; tmp_0
[inout] Inputs for function main2:
    c
[inout] Out (internal) for function main3:
    f1; tmp; f2
[inout] Inputs for function main3:
    \nothing
[inout] Out (internal) for function main:
    \nothing
[inout] Inputs for function main:
    i; c
/* Generated by Frama-C */
extern int i;

int f(void)
{
  return i;
}

int volatile c;
int g(void)
{
  int x;
  if (c) x = 1;
  return x;
}

char h(void)
{
  char __retres;
  __retres = (char)1;
  return __retres;
}

void main1(void)
{
  if (c) {
    int tmp;
    tmp = f();
    float f_ = (float)tmp;
  }
  if (c) {
    int tmp_0;
    tmp_0 = g();
    /*@ assert Eva: initialization: \initialized(&tmp_0); */
    long long v = (long long)tmp_0;
  }
  if (c) {
    char tmp_1;
    int *x = (int *)0;
    int **p = & x;
    tmp_1 = h();
    /*@ assert Eva: mem_access: \valid(*p); */
    *(*p) = (int)tmp_1;
  }
  return;
}

float fl1(void)
{
  float v;
  *((char *)(& v)) = (char)1;
  return v;
}

float fl2(void)
{
  float v;
  if (c) v = (float)1;
  return v;
}

void main2(void)
{
  double d1;
  double d2;
  float tmp_0;
  if (c) {
    float tmp;
    tmp = fl1();
    /*@ assert Eva: initialization: \initialized(&tmp); */
    d1 = (double)tmp;
  }
  tmp_0 = fl2();
  /*@ assert Eva: initialization: \initialized(&tmp_0); */
  d2 = (double)tmp_0;
  return;
}

/*@ assigns \result;
    assigns \result \from \nothing; */
float ret_float(void);

void main3(void)
{
  float tmp;
  tmp = ret_float();
  /*@ assert Eva: is_nan_or_infinite: \is_finite(tmp); */
  float f1 = tmp;
  float f2 = f1 + (float)1;
  return;
}

void main(void)
{
  main1();
  main2();
  main3();
  return;
}


