[kernel] Parsing ghost_cv_valid_use.i (no preprocessing)
/* Generated by Frama-C */
typedef int int_array[10];
struct Type {
   int field ;
};
void instr(void)
{
  /*@ ghost int x; */
  /*@ ghost int \ghost *p; */
  /*@ ghost int arr[10]; */
  /*@ ghost x = 1; */
  /*@ ghost *p = 1; */
  /*@ ghost arr[0] = 1; */
  return;
}

void named(void)
{
  /*@ ghost int_array a; */
  /*@ ghost a[0] = 42; */
  return;
}

void field_access(void)
{
  struct Type ng_var;
  /*@ ghost struct Type g_var; */
  ng_var.field = 42;
  /*@ ghost g_var.field = 42; */
  return;
}

void nested(void)
{
  /*@ ghost int **ptrp; */
  /*@ ghost int * \ghost *ptrpg; */
  /*@ ghost int \ghost * \ghost *ptrpgg; */
  /*@ ghost int \ghost arra[10][10]; */
  /*@ ghost int *arrp[10]; */
  /*@ ghost int \ghost *arrpg[10]; */
  /*@ ghost int (*ptra)[10]; */
  /*@ ghost int \ghost (*ptrag)[10]; */
  /*@ ghost ptrp = (int **)0; */
  /*@ ghost ptrpg = (int * \ghost *)0; */
  /*@ ghost *ptrpg = (int *)0; */
  /*@ ghost ptrpgg = (int \ghost * \ghost *)0; */
  /*@ ghost *ptrpgg = (int \ghost *)0; */
  /*@ ghost *(*ptrpgg) = 1; */
  /*@ ghost arra[0][0] = 1; */
  /*@ ghost arrp[0] = (int *)0; */
  /*@ ghost arrpg[0] = (int \ghost *)0; */
  /*@ ghost *(arrpg[0]) = 1; */
  /*@ ghost ptra = (int (*)[10])0; */
  /*@ ghost ptrag = (int \ghost (*)[10])0; */
  /*@ ghost (*ptrag)[0] = 1; */
  return;
}

void assigns_clause(void)
{
  /*@ ghost int *p; */
  {
    int i = 0;
    /*@ loop assigns p, i; */
    while (i < 10) i ++;
  }
  /*@ ghost
    {
      int i_0 = 0;
      /@ loop assigns p, i_0; @/
      while (i_0 < 10) i_0 ++;
    }
  */
  return;
}

/*@ ghost /@ assigns *p; @/
void g_decl_star(int \ghost *p); */

/*@ ghost /@ assigns *p; @/
          void g_def_star(int \ghost *p)
          {
            return;
          }

*/

/*@ assigns *p; */
void ng_decl_star(void) /*@ ghost (int \ghost *p) */;

/*@ assigns *p; */
void ng_def_star(void) /*@ ghost (int \ghost *p) */
{
  return;
}

/*@ assigns *p; */
void ng_decl_star_ng(void) /*@ ghost (int *p) */;

/*@ assigns *p; */
void ng_def_star_ng(void) /*@ ghost (int *p) */
{
  return;
}

void assigns_loop_star(void)
{
  /*@ ghost int \ghost *p; */
  {
    int i = 0;
    /*@ loop assigns *p, i; */
    while (i < 10) i ++;
  }
  /*@ ghost
    {
      int i_0 = 0;
      /@ loop assigns *p, i_0; @/
      while (i_0 < 10) i_0 ++;
    }
  */
  return;
}

/*@ ghost
/@ assigns *(p + (0 .. max)); @/
void g_decl_set(int \ghost *p, int max); */

/*@ ghost
  /@ assigns *(p + (0 .. max)); @/
  void g_def_set(int \ghost *p, int max)
  {
    return;
  }

*/

/*@ assigns *(p + (0 .. max)); */
void ng_decl_set(int max) /*@ ghost (int \ghost *p) */;

/*@ assigns *(p + (0 .. max)); */
void ng_def_set(int max) /*@ ghost (int \ghost *p) */
{
  return;
}

/*@ assigns *(p + (0 .. max)); */
void ng_decl_set_ng(int max) /*@ ghost (int \ghost *p) */;

/*@ assigns *(p + (0 .. max)); */
void ng_def_set_ng(int max) /*@ ghost (int \ghost *p) */
{
  return;
}

void assigns_loop_set(void)
{
  /*@ ghost int \ghost *p; */
  int max = 42;
  {
    int i = 0;
    /*@ loop assigns *(p + (0 .. max)), i; */
    while (i < 10) i ++;
  }
  /*@ ghost
    {
      int i_0 = 0;
      /@ loop assigns *(p + (0 .. max)), i_0; @/
      while (i_0 < 10) i_0 ++;
    }
  */
  return;
}

/*@ ghost /@ assigns \nothing; @/
void ghost_decl_nothing(int *a); */

/*@ ghost /@ assigns *a; @/
void ghost_decl_valid_a(int \ghost *a); */

/*@ ghost void ghost_def_nothing(int *a)
          {
            int x = *a;
            return;
          }

*/

/*@ ghost void ghost_def_valid_a(int \ghost *a)
          {
            *a = 42;
            return;
          }

*/

void assigns_nothing_or_correct(void)
{
  int ng;
  /*@ ghost int g; */
  /*@ ghost ghost_decl_nothing(& ng); */
  /*@ ghost ghost_def_nothing(& ng); */
  /*@ ghost ghost_decl_valid_a(& g); */
  /*@ ghost ghost_def_valid_a(& g); */
  return;
}


