[kernel] Parsing invalid_fptr.i (no preprocessing)
[rte:annot] annotating function f
[rte:annot] annotating function g
[rte:annot] annotating function h
/* Generated by Frama-C */
struct S {
   void (*f)(void) ;
};
struct S1 {
   void (*f)(void) ;
};
union __anonunion_2 {
   void (*g)(void) ;
   unsigned int x ;
};
struct __anonstruct_s2_1 {
   union __anonunion_2 __anonCompField1 ;
};
struct __anonstruct_s3_3 {
   void (*tab[12])(void) ;
};
struct S s;
struct S1 s1;
void (*p)(void);
void f(void)
{
  if (p) goto return_label;
  /*@ assert rte: pointer_value: \valid_function(p + 2); */
  if (p + 2) goto return_label;
  if (s.f) goto return_label;
  /*@ assert rte: pointer_value: \valid_function(s.f + 2); */
  if (s.f + 2) goto return_label;
  return_label: return;
}

struct __anonstruct_s2_1 s2;
struct __anonstruct_s3_3 s3;
void write_something(void *x);

void h(void)
{
  /*@ assert rte: pointer_value: \object_pointer(&s1.f); */
  write_something((void *)(& s1.f));
  /*@ assert rte: pointer_value: \object_pointer(&s3.tab[4]); */
  write_something((void *)(& s3.tab[4]));
  return;
}

void g(void)
{
  /*@ assert rte: pointer_value: \valid_function(s2.__anonCompField1.g); */
  if (s2.__anonCompField1.g) goto return_label;
  /*@ assert rte: pointer_value: \valid_function(s1.f); */
  if (s1.f) goto return_label;
  /*@ assert rte: pointer_value: \valid_function(s3.tab[4]); */
  if (s3.tab[4]) goto return_label;
  return_label: return;
}


